{
    "swagger": "2.0",
    "info": {
      "description": "Hosting Controller is a hybrid multi-cloud control panel for enterprises, government organizations and service providers. Hosting Controller transforms your data center into a private cloud, letting your data stay where it is. Hosting Controller’s robust and unified control panel offers cross platform support, N-tier user architecture and self service portals. It has built-in integrations for Microsoft Enterprise Applications “MS Exchange, SharePoint, Skype for Business, Active Directory and MS 365 and a full automation solution for IaaS offering virtualized partitions on both Windows and Linux based servers through Hyper-V and VMware.",
      "version": "10.2.3",
      "title": "Hosting Controller 10"
    },
    "host": "localhost:17177",
    "schemes": [
      "http"
    ],
    "securityDefinitions": {
      "basic_auth": {
        "type": "basic",
        "description": "Basic Authentication"
      },
      "token": {
        "type": "apiKey",
        "description": "API Token Authentication",
        "name": "token",
        "in": "header"
      }
    },
    "security": [
      {
        "basic_auth": []
      },
      {
        "token": []
      }
    ],
    "paths": {
      "active-directory/organizations/{organizationId}/users": {
        "post": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Add New User",
          "description": "The method will add new active directory user and will return new user details.",
          "operationId": "ActiveDirectoryObject_AddActiveDirectoryUser",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "activeDirectoryObjectDto",
              "description": "Provide data for user to be added.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/ActiveDirectoryObjectDto:Request" }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ActiveDirectoryObjectDto"
  
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/active-directory/organizations/{organizationId}/users/password": {
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Change User Password",
          "description": "The method will update the password settings of active directory user.",
          "operationId": "ActiveDirectoryObject_ChangeAdUserPassword",
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "input",
              "description": "UserDn is the distinguished name of user whose password settings will be updated.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/AdUserPasswordDto" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/active-directory/organizations/{organizationId}/users/enable-disable": {
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Enable/Disable User",
          "description": "The method will toggle the state of active directory user.",
          "operationId": "ActiveDirectoryObject_ToggleAdUserState",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "AdUsersDto",
              "description": "AdUsers is the list of users in which UserDn is the distinguished name of user whose state will be toggled.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/AdUsersDto:Request" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/active-directory/organizations/{organizationId}/objects": {
        "get": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Get Organization Objects",
          "description": "The method will retrieve the list of organization objects.",
          "operationId": "ActiveDirectory_GetOrganizationObjects",
          "consumes": [],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "objectType",
              "description": "Provide ObjectType to retrieve specific type of objects.",
              "in": "query",
              "required": false,
              "type": "string"
            },
            {
              "name": "objectName",
              "description": "Search specific objects by name.",
              "in": "query",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": { "$ref": "#/definitions/OrganizationObjectsDto" }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Delete Organization Objects",
          "description": "The method will delete organization objects provided in list.",
          "operationId": "ActiveDirectory_DeleteMultipleObjects",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "AdObjectsDto",
              "description": "AdObjects is the list of objects in which ObjectDn is the distinguished name of object or value of UPN suffix which will be deleted from Active Directory. ObjectType is required in case of UPN suffix deletion",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/AdObjectsDto" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/active-directory/organizations/{organizationId}/objects/account": {
        "get": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Get Object Account Settings",
          "description": "The method will retrieve the account expiry details.",
          "operationId": "ActiveDirectoryObject_GetObjectAccountSettings",
          "consumes": [],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "userDn",
              "description": "The UserDn is the distinguished name of user whose account expiry settings will be retrieved.",
              "in": "query",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": { "$ref": "#/definitions/ADUserAccountSettingDto" }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Update Object Account Settings",
          "description": "The method will update the account expiry settings of user.",
          "operationId": "ActiveDirectoryObject_SetObjectAccountSettings",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "query",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "ADUserAccountSettingDto",
              "description": "The UserDn is the distinguished name of user whose account expiry settings will be updated.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/ADUserAccountSettingDto:Request" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "400": {
              "description": "Invalid Input data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/active-directory/organizations/{organizationId}/objects/details": {
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Update Object Details",
          "description": "The method will update the object protection from accidental delete.",
          "operationId": "ActiveDirectoryObject_SetObjectDetails",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "AdObjectDetailsDto",
              "description": "The objectDn is the distinguished name of object whose protection from accidental deletion will be updated.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/AdObjectDetailsDto" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "400": {
              "description": "Invalid Input data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
  
          }
        }
      },
  
      "/active-directory/organizations/{organizationId}/objects/general-profile": {
        "get": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Get Object General Properties",
          "description": "The method will retrieve the general properties of active directory object.",
          "operationId": "ActiveDirectoryObject_GetADObjectGeneralProperties",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "objectDn",
              "description": "The objectDn is the distinguished name of object whose general properties will be retrieved.",
              "in": "query",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": { "$ref": "#/definitions/ADUserGeneralProfileDto" }
            }
          }
        },
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Update Object General Properties",
          "description": "The method will update the general properties of active directory object.",
          "operationId": "ActiveDirectoryObject_UpdateADObjectGeneralProperties",
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "userProfileDto",
              "description": "The UserDn is the distinguished name of object whose general properties will be updated.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/UserGeneralProfileDto:Request" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
  
      },
  
      "/active-directory/organizations/{organizationId}/objects/memberof": {
        "get": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Get Object Membership Detail",
          "description": "The method will retrieve the list of groups for which object has membership.",
          "operationId": "ActiveDirectoryObject_GetObjectMemberOfDetails",
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "objectDn",
              "description": "The objectDn is the distinguished name of object whose membership details will be retrieved.",
              "in": "query",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": { "$ref": "#/definitions/AdObjectsMemberofListDto" }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Update Object Membership",
          "description": "The method will add object in those groups which are provided in list.",
          "operationId": "ActiveDirectoryObject_UpdateObjectMemberOfDetails",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "AdObjectsMemberofListDto",
              "description": "The objectDn is the distinguished name of object which will be added in those groups whose distinguished names are provided in objects list.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/AdObjectsMemberofListDto:Request" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/active-directory/organizations/{organizationId}/objects/move": {
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Move Active Directory Object.",
          "description": "The method will move the objects from one organizational unit to other.",
          "operationId": "ActiveDirectoryObject_MoveObjectToOu",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "input",
              "description": "The destinationOUPath is the path of organizational unit where objects will be moved and Objects is the list of objects in which objectDn is the distinguished name of object which will be moved from one organizational unit to other.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/ADMoveObjectListDto:Request" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/active-directory/organizations/{organizationId}/groups/members": {
        "get": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Get Group Members",
          "description": "The method will retrieve the list of memebers of group.",
          "operationId": "ActiveDirectoryObject_GetGroupMembers",
          "consumes": [],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "objectDn",
              "description": "The objectDn is the distinguished name of group whose members list will be retrieved.",
              "in": "query",
              "required": false,
              "type": "string"
            }
  
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": { "$ref": "#/definitions/AdObjectsGroupMemberListDto" }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
  
          }
        },
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Update Group Members",
          "description": "The method will update the members of group.",
          "operationId": "ActiveDirectoryObject_UpdateGroupMembers",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "AdObjectsGroupMemberListDto",
              "description": "The objectDn is the distinguished name of group whose members will be updated and Objects is the list of objects in which objectDn is the distinguished name of object which will be added as member of this group.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/AdObjectsGroupMemberListDto:Request" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "400": {
              "description": "Invalid Input data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/active-directory/organizations/{organizationId}/groups/admin": {
        "get": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Get Group Admin",
          "description": "The method will retrieve the admin of group.",
          "operationId": "ActiveDirectoryObject_GetGroupAdmin",
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "objectDn",
              "description": "The objectDn is the distinguished name of group whose admin will be retrieved.",
              "in": "query",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": { "$ref": "#/definitions/GroupMangaedByDto" }
            },
            "404": {
              "description": "Record Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [ "ActiveDirectory" ],
          "summary": "Update Group Admin",
          "description": "The method will update the admin of group.",
          "operationId": "ActiveDirectoryObject_UpdateGroupAdmin",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "GroupMangaedByDto",
              "description": "The objectDn is the distinguished name of group whose admin will be updated and ManagedBy is the distinguished name of user who will be added as admin of this group.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/GroupMangaedByDto:Request" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/auth-tokens": {
        "get": {
          "tags": [
            "Token"
          ],
          "security": [],
          "summary": "Get Token Details",
          "description": "Get Token Details, operation will return you complete token details. Tokens are used for authentication.",
          "operationId": "Token_GetTokenDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "token",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Give value of token."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TokenDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "tags": [
            "Token"
          ],
          "security": [],
          "summary": "Revoke Token",
          "description": "Delete Token, it will return you the status of the operation.",
          "operationId": "Token_RevokeToken",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "token",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Give value of token."
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "post": {
          "tags": [
            "Token"
          ],
          "security": [],
          "summary": "Generate Token",
          "description": "Generate token, method generates token by taking user credentials.",
          "operationId": "Token_GenerateToken",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "description": "The complete details to generate token.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AuthenticationDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Generated",
              "schema": {
                "$ref": "#/definitions/TokenDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Method Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/panel-users": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Get all Users",
          "description": "The method fetches a list of all users.",
          "operationId": "Users_GetAllUsers",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give value if want to search by username."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give value if want to search by ownerId."
            },
            {
              "name": "roleId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give value if want to search by roleId. You will get AllUserRoles by calling 'GET: /user-roles'"
            },
            {
              "name": "firstName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give value if want to search by firstname. It will return all the possible results that contain the provided value."
            },
            {
              "name": "lastName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give value if want to search by lastname. It will return all the possible results that contain the provided value."
            },
            {
              "name": "company",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give value if want to search by company. It will return all the possible results that contain the provided value."
            },
            {
              "name": "emailAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give value if want to search by emailaddress. It will return all the possible results that contain the provided value."
            },
            {
              "name": "directChild",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set true if want to get the direct children only of the provided ownerid."
            },
            {
              "name": "exactNameMatch",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set true if want to exactly match the provided username."
            },
            {
              "name": "customersOnly",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set true if want to get all customers only."
            },
            {
              "name": "staffMembersOnly",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set true if want to get all staff members only."
            },
            {
              "name": "isDisabled",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Set true if want to get all disabled users."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/UsersDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Add a new User",
          "description": "Add new user, method will return you new user id.",
          "operationId": "Users_AddUser",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "addUserDto",
              "in": "body",
              "description": "The complete details of user to be added.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddUserDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/AddUserDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Method Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/panel-users/{userId}": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Get User Details",
          "description": "Get complete user details, method will return you complete details of a user.",
          "operationId": "Users_GetUserDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "The Id of user whose details are required, use '0' for getting own details.",
              "required": true,
              "type": "integer",
              "format": "int32",
              "default": "0"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UserDto"
              }
            },
            "404": {
              "description": "Record Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [
            "Users"
          ],
          "summary": "Update User Details",
          "description": "Update user details, method will return you user's updated details.",
          "operationId": "Users_UpdateUser",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "The Id of user whose details are to be updated. Use '0' to update own details.",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "user",
              "in": "body",
              "description": "The complete details of user to be updated.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserUpdateDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/AddUserDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "tags": [
            "Users"
          ],
          "summary": "Delete User",
          "description": "Delete user, method will return you the operation status.",
          "operationId": "Users_DeleteUser",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "The Id of user to be deleted.",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "advanceDelete",
              "in": "query",
              "description": "It is a bool flag, it works for the customers, mark true if the user has consumed resources under it.",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Record Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/panel-users/{userId}/disable": {
        "put": {
          "tags": [
            "Users"
          ],
          "summary": "Disable User",
          "description": "Disable user, method will return you the operation status.",
          "operationId": "Users_DisableUser",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "The Id of user to be disabled.",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "disableOptionDto",
              "in": "body",
              "description": "The detail of ways the user can be disabled. There are three ways the user can be disabled. The user can be Suspended (suspenduser), Restricted Access (restrictpanelaccess) and Completely Disabled (restrictpanelaccessandsuspenduser).",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserDisableOptionDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Disabled",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/panel-users/{userId}/enable": {
        "put": {
          "tags": [
            "Users"
          ],
          "summary": "Enable User",
          "description": "Enable user, method will return you the operation status.",
          "operationId": "Users_EnableUser",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "The Id of user to be enabled.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Enabled",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/panel-users/{userId}/change-password": {
        "put": {
          "tags": [
            "Users"
          ],
          "summary": "Change Password",
          "description": "Change user pasword, method will return you the operation status.",
          "operationId": "Users_ChangePassword",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "The Id of user whose password is to be changed. Use '0' to change own password.",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "userPasswordDto",
              "in": "body",
              "description": "The packet contains a new password.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserChangePasswordDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully password changed",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/panel-users/user-names/{userName}": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Check Username Availability",
          "description": "Check username availablity, method verifies if the username is available for use.",
          "operationId": "Users_IsLoginNameAvailable",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userName",
              "in": "path",
              "description": "Give username to check its availability.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Available/Not_Available",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/panel-users/{userId}/general-profile": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Get User Profile Details",
          "description": "Get user profile details, method will return you the user profile details.",
          "operationId": "Users_GetUserProfileDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "The Id of user whose profile details are to be obtained. Use '0' for getting own profile details.",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UserProfileDto"
              }
            },
            "404": {
              "description": "Record Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [
            "Users"
          ],
          "summary": "Update User Profile",
          "description": "Update user profile details, method will return you the operation status.",
          "operationId": "Users_UpdateUserProfile",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "The Id of user whose profile details are to be obtained. Use '0' for getting own profile details.",
              "required": true,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "input",
              "in": "body",
              "description": "Complete details that you want to set.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserProfileDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Record Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/reports/quota": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get User Quota Report",
          "description": "Get user quota report, method will return users quota and all its resources.",
          "operationId": "Report_GetUserQuotaReport",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give userid to get the quota report for a specific user, you can get userid by calling 'Get /panel-users'. "
            },
            {
              "name": "serverRole",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give serverRole to get the quota for a specific server role, you can get the sever role by calling 'Get /server-roles'."
            },
            {
              "name": "isComposite",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "IsComposite is the bool value, mark it true to get only composite resources."
            },
            {
              "name": "resourcesNames",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give resourcesNames to get the quota for the specific resources, comma separated resource name will be passed, you can get the resource name by calling 'GET /resources'."
            },
            {
              "name": "providerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give providerName to get the quota for a specific provider, you can get the providers by calling 'GET /providers'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/QuotaReportDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/reports/quota/consumed": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Consumed Resources",
          "description": "Get consumed resources report, method will return you resources consumption report.",
          "operationId": "Report_GetConsumedResources",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ConsumedQuotaReportDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/reports/quota/daily-consumed": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Daily Resource Usage",
          "description": "Get daily consumed report, method will return you consumption report for last 15 days.",
          "operationId": "Report_GetDailyResourcesUsage",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DailyResUsageReportDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/reports/quota/monthly-consumed": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Monthly Resource Usage",
          "description": "Get monthly consumed report, method will return you consumption report for last 12 months.",
          "operationId": "Report_GetMonthlyResourcesUsage",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DailyResUsageReportDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/reports/panel-summary": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Panel Summary",
          "description": "Get panel summary, method will return you panel summary.",
          "operationId": "Report_GetPanelStats",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/PanelStatsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/reports/disk-usage-report": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Disk Usage Users List",
          "description": "Get disk usage users list, method will return you list of users consuming disk space.",
          "operationId": "Report_DiskUsageUsersList",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "months",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give number of months to get details according to it."
            },
            {
              "name": "userName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give userName to retrieve disk usage for a specific user, you can get username by calling 'Get /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Reterived",
              "schema": {
                "$ref": "#/definitions/UsersUsageReportDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/reports/disk-usage-report/monthly": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Monthly Disk Usage",
          "description": "Get monthly disk usage report, method will return you monthly disk usage report.",
          "operationId": "Report_DiskUsageReport_Monthly",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give ownerid to get report. Use '0' to get own details."
            },
            {
              "name": "months",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give number of months to get report."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Reterived",
              "schema": {
                "$ref": "#/definitions/DiskUsageReportDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/reports/disk-usage-report/total": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Total Disk Usage",
          "description": "Get overall disk usage report, method will return you overall disk usage report.",
          "operationId": "Report_DiskUsageReport_Total",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give ownerid to get report. Use '0' to get own details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Reterived",
              "schema": {
                "$ref": "#/definitions/DiskUsageReportDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/reports/bandwidth-usage-report/monthly": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Monthly Bandwidth Usage",
          "description": "Get monthly bandwidth usage report, method will return you monthly bandwidth usage report.",
          "operationId": "Report_BandwidthUsageReport_Monthly",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give ownerid to get report. Use '0' to get own details."
            },
            {
              "name": "months",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give number of months to get report."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Reterived",
              "schema": {
                "$ref": "#/definitions/BandwidthUsageReportDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/reports/bandwidth-usage-report/total": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Total Bandwidth Usage",
          "description": "Get overall bandwidth usage report, method will return you overall bandwidth usage report.",
          "operationId": "Report_BandwidthUsageReport_Total",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give ownerid to get report. Use '0' to get own details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Reterived",
              "schema": {
                "$ref": "#/definitions/BandwidthUsageReportDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/reports/bandwidth-usage-report": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Bandwidth Usage Users List",
          "description": "Get bandwidth usage users list, method will return you list of users consuming bandwidth.",
          "operationId": "Configurations_BandwidthUsageUsersList",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "the ownerId to get all its children."
            },
            {
              "name": "months",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give number of months to get details according to it."
            },
            {
              "name": "userName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give username to get bandwidth usage for a specific user, you can get username by calling 'Get /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Reterived",
              "schema": {
                "$ref": "#/definitions/UsersUsageReportDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/states/{countryId}": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get all States",
          "description": "Get all states, method will return you all states of a country.",
          "operationId": "Settings_GetAllStates",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "countryId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give a countryId to get its states, You can get it by calling 'Get /system-entities/countries'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/StatesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/system-entities/countries": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get all Countries",
          "description": "Get all countries, method will return you all countries.",
          "operationId": "Settings_GetAllCountries",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "countryId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give a countryId to get its details, pass 0 to get all countries."
            },
            {
              "name": "countryName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give a countryName to get its details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/CountriesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/languages": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get all Languages",
          "description": "Get all languages, method will return you all languages.",
          "operationId": "Settings_GetAllLanguages",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/LanguagesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/languages/{langName}": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Language Details",
          "description": "Get language details, method will return you language details.",
          "operationId": "Settings_GetAllLanguages_ByLangName",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "langName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give a langName to get details, You can get it by calling 'Get /system-entities/languages'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/LanguagesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/resource-quota-types": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Quota Types",
          "description": "Get resource quota types, method will return you resource quota types.",
          "operationId": "Settings_GetAllResourceQuotaTypes",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/resource-provisioning-types": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Resource Provisioning Types",
          "description": "Get resource provisioning types, method will return you resource provisioning types.",
          "operationId": "Settings_GetAllResourceProvisioningTypes",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/vm-status-types": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Virtual Machine Status Types",
          "description": "Get virtual machine types, method will return you virtual machine types.",
          "operationId": "Settings_GetVmStatusTypes",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/ticket-statuses": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Ticket Status",
          "description": "Get trouble ticket status types, method will return you list of trouble ticket status types.",
          "operationId": "Settings_GetTicketStatus",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/exchange/mailbox-types": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Exchange Mailbox Types",
          "description": "Get exchange mailbox types, method will return you list of exchange mailbox types.",
          "operationId": "Settings_GetExchangeMailboxTypes",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/exchange/resource-mailbox-types": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Resource Mailbox Types",
          "description": "Get exchange resource mailbox types, method will return you list of exchange resource mailbox types.",
          "operationId": "Settings_GetResourceMailboxTypes",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/exchange/mail-domain-types": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Exchange Mail Domain Types",
          "description": "Get exchange mail domain types, method will return you list of exchange mail domain types.",
          "operationId": "Settings_GetExchangeMailDomainTypes",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/exchange/recipient-types": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Exchange Recpients Types",
          "description": "Get exchange recipients types, method will return you list of exchange recipients types.",
          "operationId": "Settings_GetExchangeRecpientsTypes",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/exchange/recipient-locations": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Exchange Blocked Domain Rule Recipient Location",
          "description": "Get exchange blocked domain rule recipient location, method will return you list of exchange blocked domain rule recipient locations.",
          "operationId": "Settings_GetExchangeBlockedDomainRuleRecipientLocation",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/exchange/public-folder-types": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Public Folder Types",
          "description": "Get public folder types, method will return you list of public folder types.",
          "operationId": "Settings_GetPublicFolderTypes",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/skype/telephony-options": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Telephony Option Types",
          "description": "Get telephony options, method will return you list of telephony option types.",
          "operationId": "Settings_GetTelephonyOptions",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/skype/routing-methods": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Routing Method Types",
          "description": "Get routing methods, method will return you list of routing method types.",
          "operationId": "Settings_GetRoutingMethods",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/skype/participation-policy-types": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Participation Policy Types",
          "description": "Get participation policy, method will return you list of participation policy types.",
          "operationId": "Settings_GetParticipationPolicy",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/skype/response-group-call-actions": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Response Group Call Actions",
          "description": "Get response group call actions, method will return you list of response group call actions.",
          "operationId": "Settings_GetResponseGroupCallActions",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/skype/workflow-call-actions": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Workflow Call Action Types",
          "description": "Get workflow call actions, method will return you list of workflow call action types.",
          "operationId": "Settings_GetWorkflowCallActions",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/system-entities/skype/workflow-languages": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Get Workflow Languages",
          "description": "Get workflow languages, method will return you list of workflow languages.",
          "operationId": "Settings_GetWorkflowLanguages",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TypesItemsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/message-center": {
        "post": {
          "tags": [
            "Message Center"
          ],
          "summary": "Create a new Message",
          "description": "Add new message, method will return you recently added message details.",
          "operationId": "MessageCenter_AddNewMessage",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/MessageDto:Request"
              },
              "description": "Complete details of message to be added."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MessageDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/message-center/{messageId}": {
        "get": {
          "tags": [
            "Message Center"
          ],
          "summary": "Get Message Details",
          "description": "Get message details, method will return you complete message details.",
          "operationId": "MessageCenter_GetMessageDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give message id to get its details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MessageDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Message Center"
          ],
          "summary": "Update Message Status",
          "description": "Update message status, method will return you updated message details.",
          "operationId": "MessageCenter_UpdateMessageStatus",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give message id to update message."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/MessageDto:Request"
              },
              "description": "Message details to be updated."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MessageDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Message Center"
          ],
          "summary": "Delete Message",
          "description": "Delete message, method will return you operation status.",
          "operationId": "MessageCenter_DeleteMessage",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give message id to delete it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/message-center/sent-messages": {
        "get": {
          "tags": [
            "Message Center"
          ],
          "summary": "Get Sent Messages",
          "description": "Get sent message, method will return you list of sent messages.",
          "operationId": "MessageCenter_GetSentMessages",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MessagesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/message-center/received-messages": {
        "get": {
          "tags": [
            "Message Center"
          ],
          "summary": "Get Received Messages",
          "description": "Get received message, method will return you list of received messages.",
          "operationId": "MessageCenter_GetReceivedMessages",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MessagesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/message-center/{messageId}/message-replies": {
        "get": {
          "tags": [
            "Message Center"
          ],
          "summary": "Get Message Replies",
          "description": "Get message replies, method will return you list of message replies.",
          "operationId": "MessageCenter_MessageReplies",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give message id to get all its replies."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MessageRepliesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Message Center"
          ],
          "summary": "Add Message Reply",
          "description": "Add message reply, method will return you complete messages details with replies.",
          "operationId": "MessageCenter_AddMessageReply",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/MessageReplyDto:Request"
              },
              "description": "Complete details of message reply to add."
            },
            {
              "name": "messageId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Message id to reply."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MessageReplyDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "412": {
              "description": "Pre Condition Failed"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/tickets/summary": {
        "get": {
          "tags": [
            "Tickets"
          ],
          "summary": "Get Tickets Summary",
          "description": "Get all summary, method will return you complete ticket summary.",
          "operationId": "Tickets_GetAllStats",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TroubleTicketsStatsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/tickets": {
        "get": {
          "tags": [
            "Tickets"
          ],
          "summary": "Get all Tickets",
          "description": "Get all tickets, method will return you list of tickets.",
          "operationId": "Tickets_GetAllTickets",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ticketNumber",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give ticket number if you want to search by number."
            },
            {
              "name": "subject",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give subject if you want to search by ticket subject."
            },
            {
              "name": "ticketStatus",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give ticketstatus if you want to search by ticket status. You can get list of ticket status by calling 'GET /system-entities/ticket-statuses'."
            },
            {
              "name": "category",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give category if you want to search by category. You can get list of categories by calling 'GET /tickets/categories'."
            },
            {
              "name": "flag",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "If flag is empty then this method will return all of service providers tickets if set to 'CLIENT' then it will return all your customer's tickets."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TicketsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Tickets"
          ],
          "summary": "Create a new Ticket",
          "description": "Add new ticket, method will return you complete details of newly added ticket.",
          "operationId": "Tickets_AddTicket",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TicketDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/TicketDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/tickets/{ticketId}": {
        "get": {
          "tags": [
            "Tickets"
          ],
          "summary": "Get Ticket Details",
          "description": "Get ticket details, method will return you ticket details.",
          "operationId": "Tickets_GetTicketDetail",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give the id of the ticket whose details are to be retrieved."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TicketDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Tickets"
          ],
          "summary": "Update Ticket Details",
          "description": "Update ticket details, method will return you updated ticket details.",
          "operationId": "Tickets_UpdateTicket",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TicketDto:Update"
              },
              "description": "Complete details of a ticket to update."
            },
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The ticket id of the updated ticket."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TicketDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Tickets"
          ],
          "summary": "Delete Ticket",
          "description": "Delete ticket, method will return you operation status.",
          "operationId": "Tickets_DeleteTicket",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give ticket id of the ticket to be deleted."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/tickets/{ticketId}/replies": {
        "get": {
          "tags": [
            "Tickets"
          ],
          "summary": "Get Ticket Replies",
          "description": "Get ticket replies, method will return you list of ticket replies.",
          "operationId": "Tickets_GetTicketReply",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give the id of the ticket to get all of its replies."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/TicketResponsesDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Tickets"
          ],
          "summary": "Add Ticket Reply",
          "description": "Reply ticket, method will return you complete details of a ticket with all its replies.",
          "operationId": "Tickets_ReplyTicket",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of the ticket to reply."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TicketResponseDto:Request"
              },
              "description": "complete details of a ticket reply."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/TicketResponseDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/tickets/{TicketId}/attachments": {
        "post": {
          "tags": [
            "Tickets"
          ],
          "summary": "Add Ticket Attachment",
          "description": "Add ticket attachment, method will return complete list of attachments.",
          "operationId": "Tickets_AddTicketAttachment",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AttachmentsDto:Request"
              },
              "description": "List of files to attach, file size should not increase to 5MB each."
            },
            {
              "name": "TicketId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The id of the ticket to add file attachment."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/AttachmentsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/tickets/{ticketId}/attachments": {
        "get": {
          "tags": [
            "Tickets"
          ],
          "summary": "Get all Attachments",
          "description": "Get all ticket attachments, method will return complete list of attachment files.",
          "operationId": "Tickets_GetAllAttachments",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of the ticket to get file attachments."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/AttachmentsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/tickets/{ticketId}/attachments/{attachmentId}": {
        "get": {
          "tags": [
            "Tickets"
          ],
          "summary": "Get Attachment Details",
          "description": "Get ticket attachment details, method will return complete attachment file details.",
          "operationId": "Tickets_GetAttachmentDetail",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ticketId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of the ticket to get file attachment."
            },
            {
              "name": "attachmentId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of the attachment to get it's details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/AttachmentDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/addons": {
        "get": {
          "tags": [
            "AddOns"
          ],
          "summary": "Get all Add-ons",
          "description": "Get all addons, method will return you list of addons.",
          "operationId": "AddOns_GetAllResources",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "hostingService",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give hosting service if you want to filter according to it."
            },
            {
              "name": "resourceName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give resourceName if you want to filter according to it."
            },
            {
              "name": "providerType",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give providerType if you want to filter according to it. You can get provider types by calling 'GET /providers'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ResourcesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "AddOns"
          ],
          "summary": "Add a new Add-on",
          "description": "Add addons, method will return you complete detials of recently added addon.",
          "operationId": "AddOns_AddResource",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddUpdateResourceDto:Request"
              },
              "description": "Complete detials to add addon."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/AddUpdateResourceDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/addons/{addonId}": {
        "get": {
          "tags": [
            "AddOns"
          ],
          "summary": "Get Add-on Details",
          "description": "Get addon details, method will return you complete details of addon.",
          "operationId": "AddOns_GetResourceDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "addonId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give the id of addon whose details are to be retrieved."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ResourceDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "AddOns"
          ],
          "summary": "Update Add-on Details",
          "description": "Update addon, method will return you operation status.",
          "operationId": "AddOns_UpdateResource",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "addonId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of addon to update."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddUpdateResourceDto:UpdateRequest"
              },
              "description": "Complete detials to update addon."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "AddOns"
          ],
          "summary": "Delete Add-on",
          "description": "Delete addon, method will return you operation status.",
          "operationId": "AddOns_DeleteResource",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "addonId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give the id of addon to be deleted."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/addons/components/{componentName}/properties": {
        "get": {
          "tags": [
            "AddOns"
          ],
          "summary": "Get Base OS Types",
          "description": "Get base operating system types, method will return you list of base operating system types.",
          "operationId": "AddOns_GetBaseOsTypes",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "componentName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give component name to filter according to it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ResourceComponentDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sold-addons": {
        "get": {
          "tags": [
            "AddOns"
          ],
          "summary": "Get all Sold Add-ons",
          "description": "Get all sold addons, method will return you list of sold addons.",
          "operationId": "SoldAddOns_GetAllSoldAddOns",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "planId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give plan id to get its sold addons, you can get plan id by calling 'GET /plans'."
            },
            {
              "name": "soldPlanId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give sold plan id to get its sold addons, you can get sold plan id by calling 'GET /sold-plans'."
            },
            {
              "name": "soldAddOnId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "soldAddOnName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give sold addon name to get its matching sold addons."
            },
            {
              "name": "soldPlanName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give sold plan name to filter sold addons according to it."
            },
            {
              "name": "userName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give user name to filter sold addons according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/SellAddonsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "AddOns"
          ],
          "summary": "Sell Add-on",
          "description": "Sell addon, method will return you operation status with recently sold addon details.",
          "operationId": "SoldAddOns_SellAddOn",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SellAddonDto:Request"
              },
              "description": "Complete details of addon to sell."
            }
          ],
          "responses": {
            "200": {
              "description": "Addon Successfully Sold",
              "schema": {
                "$ref": "#/definitions/SellAddonDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sold-addons/{soldAddOnId}": {
        "get": {
          "tags": [
            "AddOns"
          ],
          "summary": "Get Sold Add-on Details",
          "description": "Get sold addon details, method will return you sold addon details.",
          "operationId": "SoldAddOns_GetSoldAddonDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "soldAddOnId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of sold addon to get details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/SoldAddOnDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "AddOns"
          ],
          "summary": "Delete Sold Add-on",
          "description": "Delete sold addon, method will return you operation status.",
          "operationId": "SoldAddOns_DeleteSoldAddon",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "soldAddOnId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of sold addon to delete."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/composite-resources": {
        "get": {
          "tags": [
            "Composite Resources"
          ],
          "summary": "Get all Composite Resources",
          "description": "Get all composite resources, method will return you list of all composite resources.",
          "operationId": "CompositeResource_GetAllCResources",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "displayName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give display name to filter composite resource according to it."
            },
            {
              "name": "exactMatch",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set exactmatch to true if want to match display name exactly."
            },
            {
              "name": "categoryName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give category name to filter composite resource according to it."
            },
            {
              "name": "resourceComponent",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give resource component to filter composite resource according to it."
            },
            {
              "name": "includePurchased",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set includepurchased true if want to include purchased composite resources in result."
            },
            {
              "name": "includeProperties",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set includeproperties true if want to include properties of composite resources in result."
            },
            {
              "name": "providerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give provider name to filter composite resource according to it."
            },
            {
              "name": "resourceName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give resource name to filter composite resource according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/CResourcesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Composite Resources"
          ],
          "summary": "Add a new Composite Resource",
          "description": "Add composite resource, method will return you complete details of recently added composite resource.",
          "operationId": "CompositeResource_AddCResource",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CResourceDto:Request"
              },
              "description": "Complete details of composite resources to add."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/CResourceDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/composite-resources/{cResourceId}": {
        "get": {
          "tags": [
            "Composite Resources"
          ],
          "summary": "Get Composite Resource Details",
          "description": "Get composite resource details, method will return you complete details of composite resource.",
          "operationId": "CompositeResource_GetCResourceDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "cResourceId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of composite resource to get details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/CResourceDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Composite Resources"
          ],
          "summary": "Update Composite Resource Details",
          "description": "Update composite resource, method will return you updated details of composite resource.",
          "operationId": "CompositeResource_UpdateCResource",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "cResourceId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of composite resource to update."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCResourceDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UpdateCResourceDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Composite Resources"
          ],
          "summary": "Delete Composite Resource",
          "description": "Delete composite resource, method will return you operation status.",
          "operationId": "CompositeResource_DeleteCResource",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "cResourceId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The id of composite resource to delete."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/composite-resources/categories": {
        "get": {
          "tags": [
            "Composite Resources"
          ],
          "summary": "Get all Hosting Services",
          "description": "Get all hosting services, method will return you list of hosting services.",
          "operationId": "HostingServices_GetAllHostingServices",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/HostingServicesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/providers": {
        "get": {
          "tags": [
            "Providers"
          ],
          "summary": "Get Provider Types",
          "description": "Get provider types, method will return you list of provider types.",
          "operationId": "Providers_GetProviderTypes",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "configuredOnly",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set it true to get only configured providers."
            },
            {
              "name": "roleName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give rolename to filter provider types according to it, you can get role name by calling 'GET /Server-Roles'."
            },
            {
              "name": "providerType",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give providertype to filter provider types according to it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ProvidersDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sold-plans": {
        "get": {
          "tags": [
            "Sold Plan"
          ],
          "summary": "Get all Sold Plans",
          "description": "Get all sold plans, method will return you list of sold plans.",
          "operationId": "SoldPlan_GetAllSoldPlans",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "The user id to get filtered sold plans according to it, you can get user id by calling 'GET /panel-users'"
            },
            {
              "name": "planId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "The plan id to get filtered sold plans according to it, you can get user id by calling 'GET /plans'"
            },
            {
              "name": "userName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "The user name to get filtered sold plans according to it, you can get user id by calling 'GET /panel-users'"
            },
            {
              "name": "planName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "The plan name to get filtered sold plans according to it, you can get user id by calling 'GET /plans'"
            },
            {
              "name": "recurringDurationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give recurringdurationid if want to filter sold plans according to it, you can get recurring duration by calling 'GET /addons/recurring-durations' ."
            },
            {
              "name": "searchOperator",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Search operator is flag of integer type to search with date, it has three possible values,'1'(Equal to), '-1'(Less then) and '2'(Greater then)."
            },
            {
              "name": "searchDate",
              "in": "query",
              "required": false,
              "type": "string",
              "format": "date-time",
              "description": "Give search date to filter sold plans according to it and one it will match according to value set in 'searchoperator'."
            },
            {
              "name": "searchCriteria",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give searchcriteria if want to filter sold plans according to it."
            },
            {
              "name": "dueSince",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give duesince if want to filter sold plans according to it."
            },
            {
              "name": "paidStatus",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give paidstatus if want to filter sold plans according to it."
            },
            {
              "name": "nextInvoiceDate",
              "in": "query",
              "required": false,
              "type": "string",
              "format": "date-time",
              "description": "Give nextinvoicedate if want to filter sold plans according to it."
            },
            {
              "name": "paidTillDate",
              "in": "query",
              "required": false,
              "type": "string",
              "format": "date-time",
              "description": "Give searchcriteria if want to filter sold plans according to it."
            },
            {
              "name": "dateAdded",
              "in": "query",
              "required": false,
              "type": "string",
              "format": "date-time",
              "description": "Give dateadded if want to filter sold plans according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/SoldPlansDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Sold Plan"
          ],
          "summary": "Sell Plan",
          "description": "Add sold plan, method will return you complete details of recently sold plan.",
          "operationId": "SoldPlan_AddSoldPlan",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SellPlanDto:Request"
              },
              "description": "Complete details of a plan to sell."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/SoldPlanDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sold-plans/{soldPlanId}": {
        "get": {
          "tags": [
            "Sold Plan"
          ],
          "summary": "Get Sold Plan Details",
          "description": "Get sold plan details, method will return you complete details of a sold plan.",
          "operationId": "SoldPlan_GetSoldPlanDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "soldPlanId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The sold plan id to get details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/SoldPlanDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Sold Plan"
          ],
          "summary": "Update Sold Plan Details",
          "description": "Update sold plan, method will return you operation status.",
          "operationId": "SoldPlan_UpDateSoldPlans",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "soldPlanId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Sold plan id to update."
            },
            {
              "name": "detailDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SoldPlansIsDisabled:Request"
              },
              "description": "Complete details of plan to update."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Sold Plan"
          ],
          "summary": "Delete Sold Plan",
          "description": "Delete sold plan, method will return you operation status.",
          "operationId": "SoldPlan_DeleteSoldPlan",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "soldPlanId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The sold plan id to delete."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/purchased-plans/{soldPlanId}": {
        "get": {
          "tags": [
            "Subscriptions"
          ],
          "summary": "Get Subscription Details",
          "description": "Get subscription details, method will return you subscription details.",
          "operationId": "Subscriptions_GetPurchasedPlanDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "soldPlanId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The sold plan id to get details, you can get sold plan id by calling 'GET /purchased-plans'"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/SoldPlanDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/purchased-plans": {
        "get": {
          "tags": [
            "Subscriptions"
          ],
          "summary": "Get all Subscriptions",
          "description": "Get all subscriptions, method will return you list of subscription.",
          "operationId": "Subscriptions_GetAllPurchasedPlans",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "The user id to get filtered subscriptions according to it, you can get user id by calling 'GET /panel-users'"
            },
            {
              "name": "planName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "The plan name to get filtered subscriptions according to it, you can get user id by calling 'GET /plans'"
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/SoldPlansDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/panel-conf/custom-fields": {
        "get": {
          "tags": [
            "Panel Conf"
          ],
          "summary": "Get all Custom Fields",
          "description": "List all custom fields, method will return you list of custom fields.",
          "operationId": "CustomFields_ListAllCustomFields",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give userid to get the custom fields for a specific user, you can get userid by calling 'Get /panel-users'."
            },
            {
              "name": "profileFlag",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "The custom field profileFlag, profileFlag have multiple values 'general' to get general profile fields and 'billing' to get billing profile fields."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/CustomFieldsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/panel-conf/tickets/categories": {
        "get": {
          "tags": [
            "Panel Conf"
          ],
          "summary": "Get all Ticket Categories",
          "description": "Get all categories, method will return you list of ticket categories.",
          "operationId": "Tickets_GetAllCategory",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/CategoriesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/dns-zones": {
        "get": {
          "tags": [
            "DNS Zones"
          ],
          "summary": "Get all DNS Zones",
          "description": "List all dns zones, method will return you list of dns zones.",
          "operationId": "Dns_ListAllDnsZones",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of zones according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "dnsZoneName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give DNS zone name to get filtered list of zones according to it."
            },
            {
              "name": "ownerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give owner name to get filtered list of zones according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DnsZonesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "DNS Zones"
          ],
          "summary": "Add a new DNS Zone",
          "description": "Add dns zone, method will return you complete details of recently added dns zone.",
          "operationId": "Dns_AddDnsZone",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DnsZoneDto:Request"
              },
              "description": "Complete details of dns zone to add."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/DnsZoneDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/dns-zones/{dnsZoneId}": {
        "get": {
          "tags": [
            "DNS Zones"
          ],
          "summary": "Get DNS Zone Details",
          "description": "Get dns zone details, method will return you complete details of dns zone.",
          "operationId": "Dns_GetDnsZoneDetail",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "dnsZoneId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give dns zone id to update its details, You can get dns zone id by calling 'GET /dns-zones'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DnsZoneDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "DNS Zones"
          ],
          "summary": "Update DNS Zone Details",
          "description": "Update dns zone, method will return you updated details of dns zone.",
          "operationId": "Dns_UpdateDnsZone",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "dnsZoneId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give dns zone id to update its details, You can get dns zone id by calling 'GET /dns-zones'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateDnsZoneDto:Request"
              },
              "description": "Complete details of dns zone to update."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/DnsZoneDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "DNS Zones"
          ],
          "summary": "Delete DNS Zone",
          "description": "Delete dns zone, method will return you operation status.",
          "operationId": "Dns_DeleteDnsZone",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "dnsZoneId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give dns zone id to update its details, You can get dns zone id by calling 'GET /dns-zones'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases": {
        "get": {
          "tags": [
            "Databases"
          ],
          "summary": "Get all Databases",
          "description": "List all databases, method will return you list of databases.",
          "operationId": "Databases_ListAllDatabases",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of databases according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "databaseName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give database name to get filtered list of databases according to it."
            },
            {
              "name": "provider",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give provider name to get filtered list of databases according to it."
            },
            {
              "name": "databaseUserName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give database user name to get filtered list of databases according to it."
            },
            {
              "name": "websiteName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give website name to get filtered list of databases according to it."
            },
            {
              "name": "websiteId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get filtered list of databases according to it, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "serverRoleId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of databases according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "instanceName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give instance name to get filtered list of databases according to it."
            },
            {
              "name": "flag",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "flag is optional, set the flag value to 'PERMISSIONS' get permission of a user on databases."
            },
            {
              "name": "databaseUserId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give database user id to get filtered list of databases according to it, you can get database user id by calling 'GET /databases/users'."
            },
            {
              "name": "ownerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give owner name to get filtered list of databases according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DatabasesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Databases"
          ],
          "summary": "Add a new Database",
          "description": "Add database, method will return you recently added database.",
          "operationId": "Databases_AddDatabase",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DatabaseDto:Request"
              },
              "description": "Complete details to add database."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/DatabaseDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/{databaseId}/action-history": {
        "get": {
          "tags": [
            "Databases"
          ],
          "summary": "Get all Database Actions History",
          "description": "List all database action history, method will return you list of database action history.",
          "operationId": "Databases_ListAllDatabaseTasks",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to get filtered database task according to it, you can get database id by calling 'GET /databases'."
            },
            {
              "name": "flag",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Flag have multiple values to get filtered tasks according to it 'backup' for backup type tasks, 'shrink' for shrink type tasks and 'restore' for restore type tasks."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DatabaseTasksDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/{databaseId}/backup": {
        "post": {
          "tags": [
            "Databases"
          ],
          "summary": "Backup Database",
          "description": "Backup database, method will return you operation entry in queued operations.",
          "operationId": "Databases_BackupDatabase",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to backup, you can get database id by calling 'GET /databases'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Queued",
              "schema": {
                "$ref": "#/definitions/DatabaseTaskDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/{databaseId}/shrink": {
        "post": {
          "tags": [
            "Databases"
          ],
          "summary": "Shrink Database",
          "description": "Shrink database, method will return you operation status.",
          "operationId": "Databases_ShrinkDatabase",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to shrink, you can get database id by calling 'GET /databases'."
            }
          ],
          "responses": {
            "200": {
              "description": "Shrink Successfully",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/{databaseId}/restore": {
        "post": {
          "tags": [
            "Databases"
          ],
          "summary": "Restore Database",
          "description": "Restore database, method will return you operation entry in queued operations.",
          "operationId": "Databases_RestoreDatabase",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to restore, you can get database id by calling 'GET /databases'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RestoreDatabaseDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Queued",
              "schema": {
                "$ref": "#/definitions/DatabaseTaskDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/{databaseId}": {
        "get": {
          "tags": [
            "Databases"
          ],
          "summary": "Get Database Details",
          "description": "Get database details, method will return you complete details of a database.",
          "operationId": "Databases_GetDatabaseDetail",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to get its details, you can get database id by calling 'GET /databases'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DatabaseDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Databases"
          ],
          "summary": "Update Database Details",
          "description": "Update database details, method will return you updated details of a database.",
          "operationId": "Databases_UpdateDatabase",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to update its details, you can get database id by calling 'GET /databases'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateDatabaseDto:Request"
              },
              "description": "Complete details of database to update."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/DatabaseDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Databases"
          ],
          "summary": "Delete Database",
          "description": "Delete database, method will return you operation status.",
          "operationId": "Databases_DeleteDatabase",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to delete, you can get database id by calling 'GET /databases'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/{databaseId}/assign": {
        "put": {
          "tags": [
            "Databases"
          ],
          "summary": "Assign Users to Database",
          "description": "Assign users to database, method will return you recently assigned users to a database.",
          "operationId": "Databases_AssignUserstoDatabase",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to assign databases, you can get database id by calling 'GET /databases'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AssignUserstoDatabaseDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Assigned",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/{databaseId}/connectivity": {
        "post": {
          "tags": [
            "Databases"
          ],
          "summary": "Test Database Connectivity",
          "description": "Test database connectivity, method will return you operation status.",
          "operationId": "Databases_TestDatabaseConnectivity",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to test database connectivity, you can get database id by calling 'GET /databases'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DatabaseConnectivityDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Connected",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/users": {
        "get": {
          "tags": [
            "Databases"
          ],
          "summary": "Get all Database Users",
          "description": "List all database users, method will return you list of database users.",
          "operationId": "Databases_ListAllDatabaseUsers",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of database users according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "databaseUserName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give database user name to get filtered list of database users according to it."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of database users according to it, you can get owner id by calling '/GET panel-users'."
            },
            {
              "name": "flag",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "flag is optional, set the flag value to 'PERMISSIONS' get permission of database on users."
            },
            {
              "name": "ownerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give owner name to get filtered list of database users according to it."
            },
            {
              "name": "provider",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give provider name to get filtered list of database users according to it."
            },
            {
              "name": "serverRoleId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of database users according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "instanceName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give instance name to get filtered list of database users according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DatabaseUsersDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Databases"
          ],
          "summary": "Add a new Database User",
          "description": "Add database users, method will return you operation status.",
          "operationId": "Databases_AddDatabaseUser",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DatabaseUserDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/{databaseId}/users/assigned-users": {
        "get": {
          "tags": [
            "Databases"
          ],
          "summary": "Get Database Assigned Users",
          "description": "Get database assigned users, method will return you list of assigned database users.",
          "operationId": "Databases_GetDatabasesAssignedUser",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database id to get all its assigned database users."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DatabaseUsersDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/users/{databaseUserId}/assigned-databases": {
        "get": {
          "tags": [
            "Databases"
          ],
          "summary": "Get User Assigned Databases",
          "description": "Get user assigned databases, method will return you list of databases.",
          "operationId": "Databases_GetUsersAssignedDatabase",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database user id to get filtered list of assigned databases according to it, you can get database user id by calling 'GET /databases/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DatabasesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/users/{databaseUserId}": {
        "get": {
          "tags": [
            "Databases"
          ],
          "summary": "Get Database User Details",
          "description": "Get database user details, method will return you database user details.",
          "operationId": "Databases_GetDatabaseUserDetail",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database user id to get its details, you can get database user id by calling 'GET /databases/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DatabaseUserDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Databases"
          ],
          "summary": "Delete Database User",
          "description": "Delete database user, method will return you operation status.",
          "operationId": "Databases_DeleteDatabaseUser",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database user id to delete database user, you can get database user id by calling 'GET /databases/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/users/{databaseUserId}/change-password": {
        "put": {
          "tags": [
            "Databases"
          ],
          "summary": "Change Password",
          "description": "Change password, method will return you operation status.",
          "operationId": "Databases_ChangePassword",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database user id to change its password, you can get database user id by calling 'GET /databases/users'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateDatabaseUserDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Password Successfully Changed",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/databases/users/{databaseUserId}/assign": {
        "put": {
          "tags": [
            "Databases"
          ],
          "summary": "Assign Databases to User",
          "description": "Assign databases to user, method will return you operation status.",
          "operationId": "Databases_AssignDatabasestoUser",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "databaseUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give database user id to assign databases, you can get database user id by calling 'GET /databases/users'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AssignDatabasestoUserDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Assigned",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/mail-domains": {
        "get": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Get all Mail Domains",
          "description": "List all mail domains, method will return you list of mail domains.",
          "operationId": "MailDomains_ListAllMailDomains",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of mail domains according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "mailDomainName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mail domain name to get filtered mail domains according to it."
            },
            {
              "name": "websiteid",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get filtered list of mail domains according to it, you can get user id by calling 'GET /websites'."
            },
            {
              "name": "providerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give provider name to get filtered list of mail domains according to it."
            },
            {
              "name": "ownerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give owner name to get filtered list of mail domains according to it."
            },
            {
              "name": "websiteName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give website name to get filtered list of mail domains according to it."
            },
            {
              "name": "mailOnly",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set it true to get mailonly mail domains."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MailDomainsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Add a new Mail Domain",
          "description": "Add mail domain, method will return you recently added mail domain.",
          "operationId": "MailDomains_AddMailDomain",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/MailDomainDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/MailDomainDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/mail-domains/{mailDomainId}": {
        "get": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Get Mail Domain Details",
          "description": "Get mail domain details, method will return you complete details of a mail domain.",
          "operationId": "MailDomains_GetMailDomainDetail",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to get its details, you can get mail domain id by calling 'GET /mail-domains'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MailDomainDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Delete Mail Domain",
          "description": "Delete mail domain, method will return you operation status.",
          "operationId": "MailDomains_DeleteMailDomain",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to delete, you can get mail domain id by calling 'GET /mail-domains'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/mail-domains/{mailDomainId}/mailboxes": {
        "get": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Get all Mailboxes",
          "description": "List all mailboxes, method will return you list of mailboxes.",
          "operationId": "MailDomains_ListAllMailBoxes",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to get its mailboxes, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "mailBoxName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mailbox name to get filtered mailboxes according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MailBoxesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Add a new Mailbox",
          "description": "Add mailboxes, method will return you recently added mailbox.",
          "operationId": "MailDomains_AddMailBox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to add mailbox, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/MailBoxDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/MailBoxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/mail-domains/{mailDomainId}/mailboxes/{mailBoxId}": {
        "get": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Get Mailbox Details",
          "description": "Get mailbox details, method will return you complete mailbox details.",
          "operationId": "MailDomains_GetMailBoxDetail",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to get mailbox details, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "mailBoxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox details, you can get mailbox id by calling 'GET /mail-domains/{mailDomainId}/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MailBoxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Update Mailbox Details",
          "description": "Update mailbox, method will return you complete updated mailbox details.",
          "operationId": "MailDomains_UpdateMailBox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to update mailbox, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "mailBoxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update mailbox, you can get mailbox id by calling 'GET /mail-domains/{mailDomainId}/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateMailBoxDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/MailBoxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Delete Mailbox",
          "description": "Delete mailbox, method will return you operation status.",
          "operationId": "MailDomains_DeleteMailBox",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to delete mailbox, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "mailBoxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to delete mailbox, you can get mailbox id by calling 'GET /mail-domains/{mailDomainId}/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/mail-domains/{mailDomainId}/mailboxes/{mailBoxId}/email-aliases": {
        "get": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Get all Email Aliases",
          "description": "List all email aliases, method will return you list of email aliases.",
          "operationId": "MailDomains_ListAllEmailAddresses",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to get list of email aliases, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "mailBoxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get list of email aliases, you can get mailbox id by calling 'GET /mail-domains/{mailDomainId}/mailboxes'."
            },
            {
              "name": "mailBoxName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mailbox name to get filtered list of email aliases according to it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MailboxAliasesDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Add a new Email Alias",
          "description": "Add email alias, method will return you operation status.",
          "operationId": "MailDomains_AddEmailAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to add email alias, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "mailBoxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add email alias, you can get mailbox id by calling 'GET /mail-domains/{mailDomainId}/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/MailboxAliasDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/mail-domains/{mailDomainId}/mailboxes/{mailBoxId}/email-aliases/{emailAddress}": {
        "delete": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Delete Email Alias",
          "description": "Delete email alias, method will return you operation status.",
          "operationId": "MailDomains_DeleteEmailAddress",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to delete email alias, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "mailBoxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to delete email alias, you can get mailbox id by calling 'GET /mail-domains/{mailDomainId}/mailboxes'."
            },
            {
              "name": "emailAddress",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give email address to delete."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/mail-domains/{mailDomainId}/distribution-lists": {
        "get": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Get all Distribution Lists",
          "description": "Get all distribution list, method will return you all distribution list.",
          "operationId": "MailDomains_ListAllDistributionList",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to get all distribution list, you can get mail domain id by calling 'GET /mail-domains'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DistributionListsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Add a new Distribution List",
          "description": "Add distribution list, method will return you recently added distribution list.",
          "operationId": "MailDomains_AddDistributionList",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to add distribution list, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DistributionListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/DistributionListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/mail-domains/{mailDomainId}/distribution-lists/{listName}": {
        "get": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Get Distribution List Details",
          "description": "Get distribution list details, method will return you complete details of a distribution list.",
          "operationId": "MailDomains_GetDistributionListDetail",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to get distribution list details, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "listName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give list name to get distribution list details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DistributionListMembersDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Update Distribution List Details",
          "description": "Update distribution list, method will return you operation status.",
          "operationId": "MailDomains_UpdateDistributionList",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to update distribution list, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "listName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give list name to update its details."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DistributionListDto:Update"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Mail Domains"
          ],
          "summary": "Delete Distribution List",
          "description": "Delete distribution list, method will return you operation status.",
          "operationId": "MailDomains_DeleteDistributionList",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail domain id to delete distribution list, you can get mail domain id by calling 'GET /mail-domains'."
            },
            {
              "name": "listName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give list name to delete."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/io": {
        "get": {
          "tags": [
            "Website IO"
          ],
          "summary": "Get all Files and Folders",
          "description": "Get all files and folders, method will return you list of files and folders.",
          "operationId": "WebsiteIO_GetAllFilesAndFolders",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get filtered files and folders according to it, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "basePath",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give base path to get filtered files and folders according to it."
            },
            {
              "name": "skipFiles",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set it true to skip files in response."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/FileFoldersDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Website IO"
          ],
          "summary": "Upload",
          "description": "Upload, method will return you operation status.",
          "operationId": "WebsiteIO_Upload",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to upload file, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "inputDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WebsiteFileUploadDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Uploaded",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Website IO"
          ],
          "summary": "Delete",
          "description": "Delete, method will return you operation status.",
          "operationId": "WebsiteIO_Delete",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to delete, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "objectName",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "basePath",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give base path to delete files and folders according to it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/io/new": {
        "post": {
          "tags": [
            "Website IO"
          ],
          "summary": "Create",
          "description": "Create, method will return you operation status.",
          "operationId": "WebsiteIO_Create",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to create, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "inputDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WebsiteIoDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Created",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/io/content": {
        "get": {
          "tags": [
            "Website IO"
          ],
          "summary": "Download",
          "description": "Download, method will return you file content.",
          "operationId": "WebsiteIO_Download",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to download, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "binary",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Give binary to download files and folders according to it."
            },
            {
              "name": "objectName",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Give object name to download files and folders according to it."
            },
            {
              "name": "basePath",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give base path to download filtered files and folders according to it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Downloaded",
              "schema": {
                "$ref": "#/definitions/FileContentOutDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Website IO"
          ],
          "summary": "Update",
          "description": "Update, method will return you operation status.",
          "operationId": "WebsiteIO_Update",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to update, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "inputDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WebsiteFileContentDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/io/rename": {
        "put": {
          "tags": [
            "Website IO"
          ],
          "summary": "Rename",
          "description": "Rename, method will return you operation status.",
          "operationId": "WebsiteIO_Rename",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to rename, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "inputDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WebsiteObjectRenameDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/io/zip": {
        "put": {
          "tags": [
            "Website IO"
          ],
          "summary": "Zip",
          "description": "Zip, method will return you operation status.",
          "operationId": "WebsiteIO_Zip",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to zip, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "inputDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WebsiteFilesZipDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Zipped",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/io/unzip": {
        "put": {
          "tags": [
            "Website IO"
          ],
          "summary": "Unzip",
          "description": "Unzip, method will return you operation status.",
          "operationId": "WebsiteIO_Unzip",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to unzip, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "inputDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WebsiteIoDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Unzipped",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/io/permissions": {
        "get": {
          "tags": [
            "Website IO"
          ],
          "summary": "Get ACL Permissions",
          "description": "Get acl permission, method will return you list of permissions.",
          "operationId": "WebsiteIO_GetAclPermission",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get acl permissions, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "folderPath",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Folder path is the complete address of folder"
            },
            {
              "name": "trustee",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "inheritence",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "finalPermission",
              "in": "query",
              "required": false,
              "type": "string"
            },
            {
              "name": "operation",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "users",
              "in": "query",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of users to assign permissions, you can get users by calling 'GET /panel-users'."
            },
            {
              "name": "fullControl",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Fullcontrol is a permission type."
            },
            {
              "name": "modify",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Modify is a permission type."
            },
            {
              "name": "read",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Read is a permission type."
            },
            {
              "name": "write",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Write is a permission type."
            },
            {
              "name": "execute",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Execute is a permission type."
            },
            {
              "name": "delete",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Delete is a permission type."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UserPermissionsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Website IO"
          ],
          "summary": "Set ACL Permissions",
          "description": "Set acl permission, method will return you operation status.",
          "operationId": "WebsiteIO_SetAclPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to set acl permission, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "inputDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PermissionsDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ReturnPermissionsStatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get all Websites",
          "description": "Get all websites, method will return you list of websites.",
          "operationId": "Websites_GetAllWebsites",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give website name to get filtered websites according to it."
            },
            {
              "name": "ownerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give owner name to get filtered websites according to it."
            },
            {
              "name": "isSubDomainSites",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Set isSubDomainSites to 1 to get filtered websites according to it."
            },
            {
              "name": "isNameBasedSites",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Set isNameBasedSites to 1 to get filtered websites according to it."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered websites according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "serverId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server id to get the filtered websites list according to it, you can get server id by calling 'GET /servers'."
            },
            {
              "name": "searchOperator",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Search operator is flag of type integer to search with date, it has three possible values,'1'(on), '-1'(Before) and '2'(After)."
            },
            {
              "name": "searchDate",
              "in": "query",
              "required": false,
              "type": "string",
              "format": "date-time",
              "description": "Give search date to filter sold plans according to it and one it will match according to value set in 'searchoperator'."
            },
            {
              "name": "exactNameMatch",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set true if want to match the provided website name exactly."
            },
            {
              "name": "ownerOnlyWebsites",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set true if want to get owner only websites."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/WebsitesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Websites"
          ],
          "summary": "Add a new Website",
          "description": "Add website, method will return you complete details of recently added website.",
          "operationId": "Websites_AddWebsite",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WebsiteDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/WebsiteDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get Website Details",
          "description": "Get website details, method will return you complete details of a website.",
          "operationId": "Websites_GetWebsiteDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get details, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/WebsiteDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Update Website Details",
          "description": "Update website details, method will return you updated details of a website.",
          "operationId": "Websites_EditWebsite",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get details, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WebsiteUpdateDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/WebsiteDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Websites"
          ],
          "summary": "Delete Website",
          "description": "Delete website, method will return you operation status.",
          "operationId": "Websites_DeleteWebsite",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to delete, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/start": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Start Website",
          "description": "Start site, method will return you operation status.",
          "operationId": "Websites_StartSite",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to start site, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Started",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "412": {
              "description": "Pre Condition Failed"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/stop": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Stop Website",
          "description": "Stop site, method will return you operation status.",
          "operationId": "Websites_StopSite",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to stop, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Stopped",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/stats/enable": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Enable Web Stats",
          "description": "Enable stats, method will return you operation status.",
          "operationId": "Websites_EnableStats",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to enable summary, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Enabled",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/stats/disable": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Disable Web Stats",
          "description": "Disable stats, method will return you operation status.",
          "operationId": "Websites_DisableStats",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to disable summary, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Disabled",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/stats/view": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "View Web Stats",
          "description": "View summary, method will return you website summary.",
          "operationId": "Websites_ViewStats",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to view summary, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ViewStatsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/shared-ssl": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get all Shared SSLs",
          "description": "Get all shared ssls, method will return you list of shared ssl.",
          "operationId": "Websites_GetAllSharedSsls",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get all shared ssl, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/SslsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Websites"
          ],
          "summary": "Add a new Shared SSL",
          "description": "Add shared ssl, method will return you operation status.",
          "operationId": "Websites_AddSharedSsl",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to add shared ssl, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SslDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/shared-ssl/{sslId}": {
        "delete": {
          "tags": [
            "Websites"
          ],
          "summary": "Delete Shared SSL",
          "description": "Delete shared ssl, method will return you operation status.",
          "operationId": "Websites_DeleteSharedSsl",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to delete shared ssl, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "sslId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give ssl id to delete, you can get ssl id by calling 'GET /websites/{websiteId}/shared-ssl'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/ipaddress": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Update IP Address Details",
          "description": "Update IP address, method will return you operation status.",
          "operationId": "Websites_UpdateIPAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to update IP address, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/IPAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/parked-domains": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get all Parked Domains",
          "description": "Get all parked daomains, method will return you list of parked domains.",
          "operationId": "Websites_GetAllParkedDomains",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get list of parked domains, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ParkedDomainsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Websites"
          ],
          "summary": "Add a new Parked Domain",
          "description": "Add parked domain, method will return you details of recently added parked domain.",
          "operationId": "Websites_AddParkedDomain",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to add parked domain, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ParkedDomainDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ParkedDomainDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/parked-domains/{parkedDomainId}": {
        "delete": {
          "tags": [
            "Websites"
          ],
          "summary": "Delete Parked Domain",
          "description": "Delete parked domain, method will return you operation status.",
          "operationId": "Websites_DeleteParkedDomain",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to delete parked domain, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "parkedDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give parked domain id to delete parked domain, you can get parked domain id by calling 'GET /websites/{websiteId}/parked-domains'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/host-headers": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get all Host Headers",
          "description": "Get all host headers, method will return you list of host headers.",
          "operationId": "Websites_GetAllHostHeaders",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get list of host headers, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/HostHeadersDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Websites"
          ],
          "summary": "Add a new Host Header",
          "description": "Add host header, method will return you operation status.",
          "operationId": "Websites_AddHostHeader",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to add host header, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/HostHeaderDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/host-headers/{hostHeaderName}": {
        "delete": {
          "tags": [
            "Websites"
          ],
          "summary": "Delete Host Header",
          "description": "Delete host header, method will return you operation status.",
          "operationId": "Websites_DeleteHostHeader",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to delete host header, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "hostHeaderName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give host header name to delete host header."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/virtual-directories": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get all Virtual Directories",
          "description": "Get all virtual directories, method will return you list of virtual directories.",
          "operationId": "Websites_GetAllVirtualDirectories",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get list of virtual directories, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/VirtualDirectoriesDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Update Virtual Directory Details",
          "description": "Update virtual directory, method will return you operation status.",
          "operationId": "Websites_UpdateVirtualDirectory",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to update virtual directory, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/VirtualDirectoryDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Websites"
          ],
          "summary": "Add a new Virtual Directory",
          "description": "Add virtual directory, method will return you operation status.",
          "operationId": "Websites_AddVirtualDirectory",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to add virtual directory, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/VirtualDirectoryDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/virtual-directories/vdName/{virtualDirectoryName}": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get Virtual Directory Details",
          "description": "Get virtual directory details, method will return you virtual directory details.",
          "operationId": "Websites_GetVirtualDirectoryDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get virtual directory details, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "virtualDirectoryName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give virtual directory name to get details."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/VirtualDirectoryDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Websites"
          ],
          "summary": "Delete Virtual Directory",
          "description": "Delete virtual directory, method will return you operation status.",
          "operationId": "Websites_DeleteVirtualDirectory",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to delete virtual directory, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "virtualDirectoryName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give virtual directory name to delete."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/virtual-directories/change-password": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Change System User Password",
          "description": "Change system user password, method will return you operation status.",
          "operationId": "Websites_ChangeSysUserPassword",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to change virtual directory user password, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SysUserChangePasswordDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/app-pools/{appPoolName}/process-info": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get Application Pool Process Information",
          "description": "Get application pool process information, method will return you application pool process informaion.",
          "operationId": "Websites_GetApplicationPoolProcessInfo",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get application pool process informaion, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "appPoolName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give application pool name to get its process information."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ApplicationPoolProcessInfoDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/url-redirection": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get URL Redirection Settings",
          "description": "Get url redirection settings, method will return you complete url redirection settings.",
          "operationId": "Websites_GetUrlRedirectionSettings",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get url redirection settings, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UrlRedirectionDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Websites"
          ],
          "summary": "Save URL Redirection Settings",
          "description": "Save url redirection settings, method will return you operation status.",
          "operationId": "Websites_SaveUrlRedirectionSettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to save url redirection settings, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UrlRedirectionDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Saved",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/access-permissions": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get Access Permissions Settings",
          "description": "Get access permissions settings, method will return you complete access permission settings.",
          "operationId": "Websites_GetAccessPermissionsSettings",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get access permissions settings, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/AccessPermissionDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Websites"
          ],
          "summary": "Save Access Permissions Settings",
          "description": "Save access permissions settings, method will return you operation status.",
          "operationId": "Websites_SaveAccessPermissionsSettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to save access permissions settings, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AccessPermissionDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Saved",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/custom-errors": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get Custom Errors List",
          "description": "Get custom errors list, method will return you list of custom errors.",
          "operationId": "Websites_GetCustomErrorsList",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get list of custom errors, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/CustomErrorsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Websites"
          ],
          "summary": "Update Custom Error Details",
          "description": "Update custom errors, method will return you operation status.",
          "operationId": "Websites_UpdateCustomErrors",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to update custom errors, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CustomErrorDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/ftp-users": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get all FTP Users",
          "description": "List all FTP users, method will return you list of FTP users.",
          "operationId": "Websites_ListAllFtpUsers",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get list of FTP users, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "permittedPath",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give permitted path to get filtered list of FTP users according to it."
            },
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of FTP users according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "serverId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server id to get filtered list of FTP users according to it, you can get server id by calling 'GET /servers'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/FtpUsersDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Websites"
          ],
          "summary": "Add a new FTP User",
          "description": "Add FTP user, method will return you complete details of recently added FTP user.",
          "operationId": "Websites_AddFtpUser",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to add FTP user, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/FtpUserDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/FtpUserDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "409": {
              "description": "Already Exists"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/ftp-users/{ftpUserId}": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get FTP User Details",
          "description": "Get FTP user details, method will return you complete details of FTP user.",
          "operationId": "Websites_GetFtpUserDetail",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get FTP user details, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "ftpUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give FTP user id to get its details, you can get FTP user id by calling 'GET /websites/{websiteId}/ftp-users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/FtpUserDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Update FTP User Password",
          "description": "Update FTP user password, method will return you operation status.",
          "operationId": "Websites_UpdateFtpUserPassword",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to update FTP user password, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "ftpUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give FTP user id to update FTP user password, you can get FTP user id by calling 'GET /websites/{websiteId}/ftp-users'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateFtpUserPasswordDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Websites"
          ],
          "summary": "Delete FTP User",
          "description": "Delete FTP user, method will return you operation status.",
          "operationId": "Websites_DeleteFtpUser",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ftpUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give FTP user id to delete, you can get FTP user id by calling 'GET /websites/{websiteId}/ftp-users'."
            },
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give website id to delete FTP user, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/ftp-users/{ftpUserId}/status": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Update FTP User Status",
          "description": "Update FTP user status, method will return you operation status.",
          "operationId": "Websites_UpdateFtpUserStatus",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to update FTP user status, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "ftpUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give FTP user id to update FTP user status, you can get FTP user id by calling 'GET /websites/{websiteId}/ftp-users'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateFtpUserStatusDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/ftp-users/{ftpUserId}/permissions": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Update FTP User Permissions",
          "description": "Update FTP user permission, method will return you operation status.",
          "operationId": "Websites_UpdateFtpUserPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to update FTP user permissions, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "ftpUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give FTP user id to update FTP user permissions, you can get FTP user id by calling 'GET /websites/{websiteId}/ftp-users'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateFtpUserPermissionDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/dotnetversions": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get Dot Net Installed Version",
          "description": "Get dot net installed version, method will return you operation status.",
          "operationId": "Websites_GetDotNetInstalledVersions",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get dot net installed version, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "vdirName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give virtual directory name to get dot net installed version."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/DotNetInstalledVersionsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/scripting/{scriptingType}": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Scripting",
          "description": "Update script, method will return you operation status.",
          "operationId": "Websites_Scripting",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to update scripting, you can get website id by calling 'GET /websites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ScriptingInputModel"
              }
            },
            {
              "name": "scriptingType",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Scripting type is a flag, its possible values are 'dotnet','php','perl' and 'coldfusion'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/app-pools-recycle": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Recycle Website Application Pool",
          "description": "Recycle website application pool, method will return you operation status.",
          "operationId": "Websites_RecycleWebsiteApplicationPool",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to recycle application pool, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Recycled",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/restore-default": {
        "put": {
          "tags": [
            "Websites"
          ],
          "summary": "Restore Default",
          "description": "Restore default, method will return you operation status.",
          "operationId": "Websites_RestoreDefault",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to restore default, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Restored",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/websites/{websiteId}/system-users": {
        "get": {
          "tags": [
            "Websites"
          ],
          "summary": "Get System Users",
          "description": "Get system users, method will return you list of system users.",
          "operationId": "Websites_GetSystemUsers",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "websiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give website id to get system users, you can get website id by calling 'GET /websites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/SystemUsersDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/Server-Roles": {
        "get": {
          "tags": [
            "Servers"
          ],
          "summary": "Get Roles",
          "description": "Get roles, method will return you list of roles.",
          "operationId": "Roles_GetRoles",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "clusterEnabled",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set clusterEnabled to true to get list of enabled roles only."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/RolesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/servers/{serverId}/roles": {
        "get": {
          "tags": [
            "Servers"
          ],
          "summary": "Get Server Roles",
          "description": "Get server roles, method will return you list of server roles.",
          "operationId": "Roles_GetServerRoles",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server id to get filtered list of server roles according to it, you can get server id by calling 'GET /servers'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ServerRolesDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/servers": {
        "get": {
          "tags": [
            "Servers"
          ],
          "summary": "Get all Servers",
          "description": "Get all servers, method will return you list of servers.",
          "operationId": "Roles_GetAllServers",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "systemName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give system name to get filtered list of servers according to it."
            },
            {
              "name": "serverRole",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give server role name to get filtered list of servers according to it."
            },
            {
              "name": "configuredOnly",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set configuredOnly to true to get list of configured servers only."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ServersDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/plans": {
        "get": {
          "tags": [
            "Service Plans"
          ],
          "summary": "Get all Service Plans",
          "description": "Get all service plans, method will return you a  list of service plans.",
          "operationId": "Plan_GetAllPlans",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "displayName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give display name to filter service plan according to it."
            },
            {
              "name": "exactMatch",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set it true to match display name exactly."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/PlansDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Service Plans"
          ],
          "summary": "Add a new Service Plan",
          "description": "Add service plan, method will return you details of recently added service plan.",
          "operationId": "Plan_AddPlan",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PlanDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/PlanDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "409": {
              "description": "Already Exists"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/plans/{planId}": {
        "get": {
          "tags": [
            "Service Plans"
          ],
          "summary": "Get Service Plan Details",
          "description": "Get service plan details, method will return you service plan details.",
          "operationId": "Plan_GetPlanDetails",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "planId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give plan id to get its details, you can get plan id by calling 'GET /plans'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/PlanDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Service Plans"
          ],
          "summary": "Update Service Plan Details",
          "description": "Update service plan, method will return you updated service plan details.",
          "operationId": "Plan_UpdatePlan",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "planId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give plan id to update its details according to it, you can get plan id by calling 'GET /plans'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PlanDto:Request"
              }
            },
            {
              "name": "updateType",
              "in": "query",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/PlanDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "409": {
              "description": "Already Exists"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Service Plans"
          ],
          "summary": "Delete Service Plan",
          "description": "Delete service plan, method will return you operation status.",
          "operationId": "Plan_DeletePlan",
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "planId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give plan id of the service plan to be deleted, you can get plan id by calling 'GET /plans'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/organizations": {
        "get": {
          "tags": [
            "Organizations"
          ],
          "summary": "Get All Organizations",
          "description": "Get all organizations, method will return you list of organizations.",
          "operationId": "Organizations_GetAllOrganizations",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of organizations according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "systemName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give organization system name to get filtered list of organizations according to it."
            },
            {
              "name": "ownerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give owner name to get filtered list of organizations according to it."
            },
            {
              "name": "mailServerType",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mail server type to get filtered list of organizations according to it."
            },
            {
              "name": "serverRoleId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of organizations according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "flag",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Flag is optional it can be null, its possible value is 'UserOnly' with this value it will return direct children only."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/OrganizationsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/organizations/{organizationId}": {
        "get": {
          "tags": [
            "Organizations"
          ],
          "summary": "Get Organization Details",
          "description": "Get organization details, method will return you complete organization details.",
          "operationId": "Organizations_GetOrganizationDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get its details, you can get organization id by calling 'GET /organizations/exchange'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/OrganizationDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/organizations/exchange": {
        "get": {
          "tags": [
            "Organizations"
          ],
          "summary": "Get All Exchange Organizations",
          "description": "Get all exchange organizations, method will return you list of exchange organizations.",
          "operationId": "Organizations_GetAllExchangeOrganizations",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of exchange organizations according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "systemName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give organization system name to get filtered list of exchange organizations according to it."
            },
            {
              "name": "ownerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give owner name to get filtered list of exchange organizations according to it."
            },
            {
              "name": "mailServerType",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mail server type to get filtered list of exchange organizations according to it, its possible values 'exchange2013' and 'exchange2016'."
            },
            {
              "name": "serverRoleId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of exchange organizations according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "flag",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Flag is optional it can be null, its possible value is 'UserOnly' with this value it will return direct children only."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/OrganizationsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Organizations"
          ],
          "summary": "Add Exchange Organization",
          "description": "Add exchange organizations, method will return you complete details of recently added organization.",
          "operationId": "Organizations_AddExchangeOrganization",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/OrganizationDto:Add"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/OrganizationDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/organizations/{organizationId}/exchange": {
        "delete": {
          "tags": [
            "Organizations"
          ],
          "summary": "Delete Exchange Organization",
          "description": "Delete exchange organization, method will return you operation status.",
          "operationId": "Organizations_DeleteExchangeOrganization",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to delete, you can get organization id by calling 'GET /organizations/exchange'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/organizations/sharepoint": {
        "get": {
          "tags": [
            "Organizations"
          ],
          "summary": "Get All SharePoint Organizations",
          "description": "Get all sharePoint organizations, method will return you list of sharePoint organizations.",
          "operationId": "Organizations_GetAllSharePointOrganizations",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of sharePoint organizations according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "systemName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give organization system name to get filtered list of sharePoint organizations according to it."
            },
            {
              "name": "ownerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give owner name to get filtered list of sharePoint organizations according to it."
            },
            {
              "name": "mailServerType",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mail server type to get filtered list of sharePoint organizations according to it."
            },
            {
              "name": "serverRoleId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of sharePoint organizations according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "flag",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Flag is optional it can be null, its possible value is 'UserOnly' with this value it will return direct children only."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Organizations"
          ],
          "summary": "Add SharePoint Organization",
          "description": "Add sharePoint organizations, method will return you recently added sharePoint organization details.",
          "operationId": "Organizations_AddSharePointOrganization",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointOrganizationDto:Add"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/SharePointOrganizationDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/organizations/{organizationId}/sharepoint": {
        "delete": {
          "tags": [
            "Organizations"
          ],
          "summary": "Delete SharePoint Organization",
          "description": "Delete sharePoint organizations, method will return you operation status.",
          "operationId": "Organizations_DeleteSharePointOrganization",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to delete, you can get organization id by calling 'GET /organizations/exchange'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/organizations/skype": {
        "get": {
          "tags": [
            "Organizations"
          ],
          "summary": "Get All Skype Organizations",
          "description": "Get all skype organizations, method will return you list of skype organizations.",
          "operationId": "Organizations_GetAllSkypeOrganizations",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of skype organizations according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "systemName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give organization system name to get filtered list of skype organizations according to it."
            },
            {
              "name": "ownerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give owner name to get filtered list of skype organizations according to it."
            },
            {
              "name": "mailServerType",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mail server type to get filtered list of skype organizations according to it."
            },
            {
              "name": "serverRoleId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of skype organizations according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "flag",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Flag is optional it can be null, its possible value is 'UserOnly' with this value it will return direct children only."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/OrganizationsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Organizations"
          ],
          "summary": "Add Skype Organization",
          "description": "Add skype organization, method will return you details of recently added skype organizations.",
          "operationId": "Organizations_AddSkypeOrganization",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeOrganizationDto:Add"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/SkypeOrganizationDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/organizations/{organizationId}/skype": {
        "delete": {
          "tags": [
            "Organizations"
          ],
          "summary": "Delete Skype Organization",
          "description": "Delete skype organizations, method will return you operation status.",
          "operationId": "Organizations_DeleteSkypeOrganization",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of trusted active directories according to it, you can get organization id by calling 'GET /organizations/exchange'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/organizations/active-directory": {
        "get": {
          "tags": [ "Organizations" ],
          "summary": "Get Active Directory Organizations",
          "description": "The method retrieves list of active directory organizations.",
          "operationId": "Organizations_GetAllActiveDirectoryOrganizations",
          "consumes": [],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32"
            },
            {
              "name": "systemName",
              "description": "Enter organization name to get list of organizations that containss specific name.",
              "in": "query",
              "required": false,
              "type": "string"
            },
            {
              "name": "ownerName",
              "description": "Enter owner name to get all organizations of a specific owner.",
              "in": "query",
              "required": false,
              "type": "string"
            },
            {
              "name": "organizationId",
              "description": "Get organization by id.",
              "in": "query",
              "required": false,
              "type": "string"
            },
            {
              "name": "serverRoleId",
              "description": "Enter serverRoleId to get all organizations of a specific server.",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32"
            }
  
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": { "$ref": "#/definitions/ADOrganizationsDto" }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "post": {
          "tags": [ "Organizations" ],
          "summary": "Add Active Directory Organization",
          "description": "The method creates new active directory organization.",
          "operationId": "Organizations_AddActiveDirectoryOrganization",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "ActiveDirectoryOrganizationDto",
              "description": "Enter details of organization to be added.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/ActiveDirectoryOrganizationDto:Request" }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": { "$ref": "#/definitions/ActiveDirectoryOrganizationDto" }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/organizations/active-directory/sub-ou": {
        "post": {
          "tags": [ "Organizations" ],
          "summary": "Add Active Directory Sub Organization",
          "description": "The method will add sub organization.",
          "operationId": "Organizations_AddActiveDirectorySubOrganization",
          "consumes": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "ActiveDirectorySubOrganizationDto",
              "description": "Enter name of sub-organization to be added and parentOUPath is the path under which sub-organization will be added like TestOrg/org2 in that case new subou will be added under org2.",
              "in": "body",
              "required": true,
              "schema": { "$ref": "#/definitions/ActiveDirectorySubOrganizationDto:Request" }
            }
  
          ],
          "responses": {
            "200": {
              "description": "Successfully added",
              "schema": { "$ref": "#/definitions/ActiveDirectorySubOrganizationDto" }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
  
      "/organizations/{organizationId}/active-directory": {
        "delete": {
          "tags": [ "Organizations" ],
          "summary": "Delete Active Directory Organization",
          "description": "THe method will delete the organization.",
          "operationId": "Organizations_DeleteActiveDirectoryOrganization",
          "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": { "$ref": "#/definitions/StatusDto" }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/exchange/mail-domains": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Exchange Mail Domains",
          "description": "Get all exchange mail domains, method will return you list of exchange mail domains.",
          "operationId": "ExchangeMailDomains_GetAllExchangeMailDomains",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of exchange mail domains according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of exchange mail domains according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "mailDomain",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mail domain name to get filtered list of exchange mail domains according to it."
            },
            {
              "name": "exactMatch",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set it true to get exactly matching exchange mail domains according to mail domain name."
            },
            {
              "name": "isVerified",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set it true to get only verified exchange mail domains."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailDomainsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add a new Exchange Mail Domain",
          "description": "Add exchange mail domain, method will return you recently added exchange mail domain details.",
          "operationId": "ExchangeMailDomains_AddExchangeMailDomain",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailDomainDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeMailDomainDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-domains/{exgMaildomainId}": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Exchange Mail Domain Details",
          "description": "Get exchange mail domain details, method will return you exchange mail domain details.",
          "operationId": "ExchangeMailDomains_GetExchangemailDomainDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMaildomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mail domain id to get exchange mail domain details, you can get exchange mail domain id by calling 'GET /exchange/mail-domains'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailDomainDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Exchange Mail Domain",
          "description": "Update exchange mail domain details, method will return you operations status.",
          "operationId": "ExchangeMailDomains_EditExchangeMailDomain",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMaildomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mail domain id to update exchange mail domain details, you can get exchange mail domain id by calling 'GET /exchange/mail-domains'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateMailDomainDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Exchange Mail Domain",
          "description": "Delete exchange mail domain, method will return you operations status.",
          "operationId": "ExchangeMailDomains_DeleteExchangeMailDomain",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMaildomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mail domain id to delete, you can get exchange mail domain id by calling 'GET /exchange/mail-domains'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-domains/{exgMaildomainId}/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Enable Disable Exchange Mail Domain",
          "description": "Enable disable exchange mail domain, method will return you operations status.",
          "operationId": "ExchangeMailDomains_EnableDisableExchangeMailDomain",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMaildomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mail domain id to change exchange mail domain status, you can get exchange mail domain id by calling 'GET /exchange/mail-domains'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateMailDomainDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Mailboxes",
          "description": "Get all mailboxes, method will return you list of mailboxes.",
          "operationId": "ExgMailbox_GetAllExgMailboxs",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "displayName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give display name to get filtered list of mailboxes according to it."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of mailboxes according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "mailDomainName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mail domain name to get filtered list of mailboxes according to it."
            },
            {
              "name": "includeResourceMailbox",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "includeResourceMailbox is a type of flag set it '1' to get only resource mailbox, set it '2' to get all mailboxes, any other value besides these will result in exclusion of resource mailboxes."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExgMailboxesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add a new Mailbox",
          "description": "Add mailbox, method will return you details of recently added mailbox.",
          "operationId": "ExgMailbox_AddExgMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExgAddMailboxDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExgMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{exgMailboxId}/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Mailbox Details",
          "description": "Update mailbox, method will return you updated details of mailbox.",
          "operationId": "ExgMailbox_UpdateExgMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mailbox id to update its details, you can get exchange mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExgMailboxEnableDisableDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExgMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{exgMailboxId}": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Details",
          "description": "Get mailbox details, method will return you mailbox details.",
          "operationId": "ExgMailbox_GetExgMailboxDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mailbox id to get its details, you can get exchange mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExgMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Mailbox",
          "description": "Delete mailbox, method will return you operation status.",
          "operationId": "ExgMailbox_DeleteExgMailbox",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mailbox id to delete it, you can get exchange mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{exgMailboxId}/async-policies": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox ASync Policy",
          "description": "Get mailbox active sync policy, method will return you mailbox active sync policy settings.",
          "operationId": "ExgMailbox_GetExgMailboxASyncPolicy",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mailbox id to get mailbox active sync policy settings, you can get exchange mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/MailboxActiveSyncSettingsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Mailbox ASync Policy",
          "description": "Update mailbox active sync policy, method will return you operation status.",
          "operationId": "ExgMailbox_UpdateExgMailboxASyncPolicy",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mailbox id to update active sync policy settings, you can get exchange mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateMailboxASyncDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/general-properties": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get User Mailbox General Properties",
          "description": "Get user mailbox general properties, method will return you list of user mailbox general properties.",
          "operationId": "ExgMailbox_GetUserMailboxGeneralProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get user mailbox general properties, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UpdateUserGeneralPropertiesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Mailbox General Properties",
          "description": "Update mailbox general properties, method will return you operation status.",
          "operationId": "ExgMailbox_UpdateExgMailboxGeneralProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update mailbox general properties, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateUserGeneralPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/change-password": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Change Mailbox Password",
          "description": "Change mailbox password, method will return you operation status.",
          "operationId": "ExgMailbox_ChangeUserMailboxPassword",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to change mailbox password, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserMailboxPasswordDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/email-addresses": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get User Mailbox Email Addresses",
          "description": "Get user mailbox email addresses, method will return you list of user mailbox email addresses.",
          "operationId": "ExgMailbox_GetUserMailboxEmailAddresses",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get filtered list of user mailbox email addresses according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UserMailboxEmailAddressesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Set Primary Email Addresses",
          "description": "Set primary email addresses, method will return you operation status.",
          "operationId": "ExgMailbox_SetPrimaryEmailAddresses",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to set primary email addresses, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SetPrimaryEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mailbox Email Addresses",
          "description": "Add mailbox email addresses, method will return you operation status.",
          "operationId": "ExgMailbox_AddUserMailboxEmailAddresses",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add mailbox email addresses, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddUserMailboxEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Mailbox Email Address",
          "description": "Delete mailbox email address, method will return you operation status.",
          "operationId": "ExgMailbox_DeleteUserMailboxEmailAddresses",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to delete mailbox email address, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "emailAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give email address to delete it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/send-on-behalf": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Send On Behalf Users",
          "description": "Get mailbox send on behalf users, method will return you list of mailbox send on behalf users.",
          "operationId": "ExgMailbox_GetUserSendOnBehalfUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox send on behalf users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add User Send On Behalf Users",
          "description": "Add mailbox send on behalf users, method will return you operation status.",
          "operationId": "ExgMailbox_AddUserSendOnBehalfUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add mailbox send on behalf users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Mailbox Send On Behalf Users",
          "description": "Remove mailbox send on behalf users, method will return you operation status.",
          "operationId": "ExgMailbox_RemoveUserSendOnBehalfUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove mailbox send on behalf users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/advanced-properties": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Advanced Properties",
          "description": "Get mailbox advanced properties, method will return you mailbox advanced properties.",
          "operationId": "ExgMailbox_GetUserMailboxAdvancedProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox advanced properties, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UserMailboxAdvancedPropertiesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update User Mailbox Advanced Properties",
          "description": "Update mailbox advanced properties, method will return you updated mailbox advanced properties.",
          "operationId": "ExgMailbox_UpdateUserMailboxAdvancedProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update mailbox advanced properties, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserMailboxAdvancedPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/UserMailboxAdvancedPropertiesDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/accepted-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Accepted Senders",
          "description": "Get mailbox accepted senders, method will return you list of mailbox accepted senders.",
          "operationId": "ExgMailbox_GetUserAcceptedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox accepted senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mailbox Accepted Senders",
          "description": "Add mailbox accepted senders, method will return you operation status.",
          "operationId": "ExgMailbox_AddUserAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add mailbox accepted senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Mailbox Accepted Senders",
          "description": "Remove mailbox accepted senders, method will return you operation status.",
          "operationId": "ExgMailbox_RemoveUserAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove mailbox accepted senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/rejected-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Rejected Senders",
          "description": "Get mailbox rejected senders, method will return you list of mailbox rejected senders.",
          "operationId": "ExgMailbox_GetUserRejectedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox rejected senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mailbox Rejected Senders",
          "description": "Add mailbox rejected senders, method will return you operation status.",
          "operationId": "ExgMailbox_AddUserRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add mailbox rejected senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Mailbox Rejected Senders",
          "description": "Remove mailbox rejected senders, method will return you operation status.",
          "operationId": "ExgMailbox_RemoveUserRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove mailbox rejected senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/full-access-permissions": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Full Access Permission",
          "description": "Get mailbox full access permission, method will return you list of mailbox full access permissions.",
          "operationId": "ExgMailbox_GetUserFullAccessPermission",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get list of mailbox full access permissions, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mailbox Full Access Permission",
          "description": "Add mailbox full access permission, method will return you operation status.",
          "operationId": "ExgMailbox_AddUserFullAccessPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add mailbox full access permission, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Mailbox Full Access Permissions",
          "description": "Remove mailbox full access permissions, method will return you operation status.",
          "operationId": "ExgMailbox_RemoveUserFullAccessPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove mailbox full access permissions, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/send-as-permissions": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Send As Permission",
          "description": "Get mailbox send as permission, method will return you list of permissions.",
          "operationId": "ExgMailbox_GetUserSendAsPermission",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox send as permission, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mailbox Send As Permission",
          "description": "Add mailbox send as permission, method will return you operations status.",
          "operationId": "ExgMailbox_AddUserSendAsPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add mailbox send as permission, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Mailbox Send As Permission",
          "description": "Remove mailbox send as permission, method will return you operations status.",
          "operationId": "ExgMailbox_RemoveUserSendAsPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove mailbox send as permission, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/forwarding-address": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Forwarding Address",
          "description": "Get mailbox forwarding address, method will return you mailbox forwarding address.",
          "operationId": "ExgMailbox_GetUserForwardingAddress",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox forwarding address, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailboxForwardingDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Mailbox Forwarding Address",
          "description": "Update mailbox forwarding address, method will return you mailbox forwarding address.",
          "operationId": "ExgMailbox_UpdateUserForwardingAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update mailbox forwarding address, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailboxForwardingDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/stats": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Stats",
          "description": "Get mailbox stats, method will return you mailbox stats.",
          "operationId": "ExgMailbox_GetUserStatistics",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox summary, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailboxStatsDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/litigation-hold": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Litigation Hold Settings",
          "description": "Get mailbox litigation hold settings, method will return you mailbox litigation hold settings.",
          "operationId": "ExgMailbox_GetMailboxLitigationHoldSettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox litigation hold settings, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/LitigationHoldSettingsDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Mailbox Litigation Hold Settings",
          "description": "Update mailbox litigation hold settings, method will return you updated mailbox litigation hold settings.",
          "operationId": "ExgMailbox_UpdateMailboxLitigationHoldSettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update mailbox litigation hold settings, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxLitigationHoldSettingsDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/LitigationHoldSettingsDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/LitigationHoldSettingsDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/memberships": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get All Distribution Lists Of User Mailbox",
          "description": "Get all distribution lists of user mailbox, method will return you distribution lists of user mailbox.",
          "operationId": "ExgMailbox_GetAllListsOfUserMailbox",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get all distribution lists of user mailbox, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add User Mailbox To Distrbution List",
          "description": "Add user mailbox to distrbution list, method will return you updated details of distribution list.",
          "operationId": "ExgMailbox_AddUserMailboxToList",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add user mailbox to distrbution list, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove User Mailbox From List",
          "description": "Remove user mailbox to distrbution list, method will return you updated details of distribution list.",
          "operationId": "ExgMailbox_RemoveUserMailboxFromList",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove user mailbox to distrbution list, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:MailboxRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/archive-mailbox": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Archive Mailbox Settings",
          "description": "Get archive mailbox settings, method will return you list of archive mailbox settings.",
          "operationId": "ExgMailbox_GetArchiveMailboxSettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get archive mailbox settings, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeArchiveMailboxListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Archive Mailbox Details",
          "description": "Update archive mailbox, method will return you updated details of archive mailbox.",
          "operationId": "ExgMailbox_UpdateArchiveMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to Update archive mailbox according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "arcMbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateArchiveMailboxDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExchangeArchiveMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add a new Archive Mailbox",
          "description": "Add archive mailbox, method will return you details of recently added archive mailbox.",
          "operationId": "ExgMailbox_AddArchiveMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add archive mailbox, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "arcMbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateArchiveMailboxDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeArchiveMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/archive-mailbox/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Archive Mailbox Status",
          "description": "Update archive mailbox status, method will return you operation status.",
          "operationId": "ExgMailbox_UpdateArchiveMailboxStatus",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update archive mailbox status, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "arcMbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateArchiveMailboxStatusDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{organizationId}/bulk/feasibility": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Check Bulk Mailbox Feasibility",
          "description": "Check bulk mailbox feasibility, method will return you bulk mailbox list.",
          "operationId": "ExgMailbox_CheckBulkMailboxFeasibility",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to check bulk mailbox feasibility according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "inputDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExchangeBulkUserListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/bulk": {
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Bulk Mailbox",
          "description": "Add bulk mailbox, method will return you details of recently added bulk mailbox.",
          "operationId": "ExgMailbox_AddExgBulkMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExgBulkMailboxesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExgBulkMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{organizationId}/bulk": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Bulk Mailbox",
          "description": "Update bulk mailbox, method will return you updated details of bulk mailbox.",
          "operationId": "ExgMailbox_UpdateExgBulkMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to update bulk mailbox according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "inputDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExgEditBulkMailboxDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExgBulkMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mailboxes/{mailboxId}/auto-reply": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Auto Reply Configuration",
          "description": "Get mailbox auto reply configuration, method will return you updated details of bulk mailbox.",
          "operationId": "ExgMailbox_GetMailboxAutoReplyConfiguration",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get auto reply configuration, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailboxOutOfOfficeDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Set User Auto Reply Configuration",
          "description": "Set mailbox auto reply configuration, method will return you operation status.",
          "operationId": "ExgMailbox_SetUserAutoReplyConfiguration",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to set mailbox auto reply configuration, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailboxOutOfOfficeDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get All Exchange Distribution Lists",
          "description": "Get all exchange distribution lists, method will return you list of distribution list.",
          "operationId": "ExchangeDistributionList_GetAllExchangeDistributionLists",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of exchange distribution lists according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of exchange distribution lists according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "displayName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give display name to get filtered list of exchange distribution lists according to it."
            },
            {
              "name": "emailAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give email address to get filtered list of exchange distribution lists according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Exchange Distribution List",
          "description": "Add exchange distribution list, method will return you recently added distribution list details.",
          "operationId": "ExchangeDistributionList_AddExchangeDistributionList",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/{distributionlistsId}/administrator": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Exchange Distribution List Administrator",
          "description": "Update exchange distribution list, method will return you operation status.",
          "operationId": "ExchangeDistributionList_UpdateExchangeDLAdministrator",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to update exchange distribution list details, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateExchangeDLAdminDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/{distributionlistId}": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Exchange Distribution List Details",
          "description": "Get exchange distribution list details, method will return you exchange distribution list details.",
          "operationId": "ExchangeDistributionList_GetExchangeDLDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to get exchange distribution list details, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Exchange Distribution List",
          "description": "Delete exchange distribution list, method will return you operation status.",
          "operationId": "ExchangeDistributionList_DeleteExchangeDistributionList",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to delete, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/{distributionlistsId}/members": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Exchange Distribution List Members",
          "description": "Get exchange distribution list members, method will return you list of exchange distribution list members.",
          "operationId": "ExchangeDistributionList_GetExchangeListMembers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to get filtered list of exchange distribution list members according to it, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListMembersDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Exchange Distribution List  Members",
          "description": "Update exchange distribution list members, method will return you operation status.",
          "operationId": "ExchangeDistributionList_UpdateExchangeListMembers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to update exchange distribution list members, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "membersDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListMembersDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Exchange Distribution List Members",
          "description": "Remove exchange distribution list members, method will return you operation status.",
          "operationId": "ExchangeDistributionList_RemoveListExchangeListMembers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to remove exchange distribution list members, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/{distributionlistsId}/accepted-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Distribution List Accepted Senders",
          "description": "Get exchange distribution list accepted senders, method will return you list of exchange distribution list accepted senders.",
          "operationId": "ExchangeDistributionList_GetListAcceptedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to get filtered list of exchange distribution list accepted senders, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Distribution List Accepted Senders",
          "description": "Add exchange distribution list accepted sender, method will return you operation status.",
          "operationId": "ExchangeDistributionList_AddListAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to add exchange distribution list accepted sender, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Distribution List Accepted Senders",
          "description": "Remove exchange distribution list accepted sender, method will return you operation status.",
          "operationId": "ExchangeDistributionList_RemoveListAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to update exchange distribution list details, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/{distributionlistsId}/rejected-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Distribution List Rejected Senders",
          "description": "Get exchange distribution list rejected senders, method will return you list of exchange distribution list rejected senders.",
          "operationId": "ExchangeDistributionList_GetListRejectedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to get filtered list of exchange distribution list rejected senders according to it, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Distribution List Rejected Senders",
          "description": "Add exchange distribution list rejected senders, method will return you operation status.",
          "operationId": "ExchangeDistributionList_AddListRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to add exchange distribution list rejected senders, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Distribution List Rejected Senders",
          "description": "Remove exchange distribution list rejected senders, method will return you operation status.",
          "operationId": "ExchangeDistributionList_RemoveListRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to update exchange distribution list rejected senders, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/{distributionlistsId}/send-on-behalf": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Distribution List Send On Behalf Users",
          "description": "Get exchange distribution list send on behalf users, method will return you list of exchange distribution list send on behalf users.",
          "operationId": "ExchangeDistributionList_GetListSendOnBehalfUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to get filtered exchange distribution list send on behalf users according to it, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Distribution List Send On Behalf Users",
          "description": "Add exchange distribution list send on behalf user, method will return you operation status.",
          "operationId": "ExchangeDistributionList_AddListSendOnBehalfUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to add  exchange distribution list send on behalf user, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Distribution List Send On Behalf Users",
          "description": "Remove exchange distribution list send on behalf user, method will return you operation status.",
          "operationId": "ExchangeDistributionList_RemoveListSendOnBehalfUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to update exchange distribution list send on behalf users, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/{distributionlistsId}/email-addresses": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Distribution List Email Addresses",
          "description": "Get exchange distribution list email addresses, method will return you list of exchange distribution list email addresses.",
          "operationId": "ExchangeDistributionList_GetListEmailAddresses",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to get filtered exchange distribution list email addresses according to it, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/RecipientEmailAddressesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Set Distribution List Primary Email Address",
          "description": "Set exchange distribution list email address, method will return you operation status.",
          "operationId": "ExchangeDistributionList_SetListPrimaryEmailAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to set exchange distribution list email address, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SetRecipientPrimaryEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Distribution List Email Address",
          "description": "Add exchange distribution list email address, method will return you operation status.",
          "operationId": "ExchangeDistributionList_AddListEmailAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to add exchange distribution list email address, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddRecipientEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Distribution List Email Address",
          "description": "Delete exchange distribution list email address, method will return you operation status.",
          "operationId": "ExchangeDistributionList_DeleteListEmailAddress",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to delete exchange distribution list email address, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "emailAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give email address to delete exchange distribution list email address."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/{distributionlistsId}/properties": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Distribution List Properties",
          "description": "Get exchange distribution list properties, method will return you exchange distribution list properties.",
          "operationId": "ExchangeDistributionList_GetListProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to get exchange distribution list properties according to it, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListAdvancePropertiesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Distribution List Settings",
          "description": "Update exchange distribution list settings, method will return you updated exchange distribution list settings.",
          "operationId": "ExchangeDistributionList_UpdateListSettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to update exchange distribution list details, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "listDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListAdvancePropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListAdvancePropertiesDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Exchange Mail Contacts",
          "description": "Get all exchange mail contacts, method will return you list of mail contacts.",
          "operationId": "ExchangeMailContact_GetAllExchangeMailContacts",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "contactName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give contact name to get filtered list of mail contacts according to it."
            },
            {
              "name": "displayName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give display name to get filtered list of exchange mail contacts according to it."
            },
            {
              "name": "primaryEmailAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give primary email address to get filtered list of exchange mail contacts according to it."
            },
            {
              "name": "distinguishedName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give distinguished name to get filtered list of exchange mail contacts according to it."
            },
            {
              "name": "externalEmailAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give external email address to get filtered list of exchange mail contacts according to it."
            },
            {
              "name": "internalEmailAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give internal email address to get filtered list of exchange mail contacts according to it."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of exchange mail contacts according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of exchange mail contacts according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Exchange Mail Contact",
          "description": "Add exchange mail contact, method will return you recently added mail contact details.",
          "operationId": "ExchangeMailContact_AddExchangeMailContact",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts/{mailContactId}": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Exchange Mail Contact Details",
          "description": "Get exchange mail contact details, method will return you complete details of mail contact.",
          "operationId": "ExchangeMailContact_GetExchangeMailContactDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to get its details, you can get owner id by calling 'GET /exchange/mail-contacts'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Mail Contact",
          "description": "Delete exchange mail contact, method will return you operation status.",
          "operationId": "ExchangeMailContact_DeleteMailContact",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to delete, you can get owner id by calling 'GET /exchange/mail-contacts'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts/{mailContactId}/accepted-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mail Contact Accepted Senders",
          "description": "Get exchange mail contact accepted senders, method will return you list of mail contact accepted senders.",
          "operationId": "ExchangeMailContact_GetMailContactAcceptedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to get filtered list of mail contact accepted senders according to it, you can get owner id by calling 'GET /exchange/mail-contacts'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mail Contact Accepted Senders",
          "description": "Add exchange mail contact accepted senders, method will return you operation status.",
          "operationId": "ExchangeMailContact_AddMailContactAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to add exchange mail contact accepted senders according to it, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "contactDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Mail Contact Accepted Senders",
          "description": "Remove exchange mail contact accepted senders, method will return you operation status.",
          "operationId": "ExchangeMailContact_RemoveMailContactAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to update exchange mail contact accepted senders, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "contactDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts/{mailContactId}/rejected-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mail Contact Rejected Senders",
          "description": "Get exchange mail contact rejected senders, method will return you list of exchange mail contact rejected senders.",
          "operationId": "ExchangeMailContact_GetMailContactRejectedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to get filtered list of exchange mail contact rejected senders according to it, you can get owner id by calling 'GET /exchange/mail-contacts'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mail Contact Rejected Senders",
          "description": "Add exchange mail contact rejected senders, method will return you operation status.",
          "operationId": "ExchangeMailContact_AddMailContactRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to add exchange mail contact rejected senders, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "contactDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Mail Contact Rejected Senders",
          "description": "Remove exchange mail contact rejected senders, method will return you operation status.",
          "operationId": "ExchangeMailContact_RemoveMailContactRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to update exchange mail contact rejected senders, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "contactDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts/{mailContactId}/email-addresses": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mail Contact Email Addresses",
          "description": "Get exchange mail contact email addresses, method will return you list of mail contact email addresses.",
          "operationId": "ExchangeMailContact_GetMailContactEmailAddresses",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to get filtered list of mail contact email addresses according to it, you can get owner id by calling 'GET /exchange/mail-contacts'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/RecipientEmailAddressesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mail Contact Email Address",
          "description": "Add exchange mail contact email address, method will return you operation status.",
          "operationId": "ExchangeMailContact_AddMailContactEmailAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to add exchange mail contact email addresses, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "contactDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddRecipientEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Mail Contact Email Address",
          "description": "Delete exchange mail contact email address, method will return you operation status.",
          "operationId": "ExchangeMailContact_DeleteMailContactEmailAddress",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to delete, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "emailAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give email address to delete."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts/{mailContactId}/email-addresses/primary": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Set Mail Contact Primary Email Address",
          "description": "Set exchange mail contact primary email address, method will return you operation status.",
          "operationId": "ExchangeMailContact_SetMailContactPrimaryEmailAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to update exchange mail contact primary email address, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "contactDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SetRecipientPrimaryEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts/{mailContactId}/email-addresses/external": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Set Mail Contact External Email Address",
          "description": "Set exchange mail contact external email address, method will return you operation status.",
          "operationId": "ExchangeMailContact_SetMailContactExternalEmailAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to update exchange mail contact external email address, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "contactDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SetRecipientPrimaryEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts/{mailContactId}/general-properties": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mail Contact General Settings",
          "description": "Get exchange mail contact general settings, method will return you complete exchange mail contact general settings.",
          "operationId": "ExchangeMailContact_GetMailContactGeneralSettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to get mail contact general settings according to it, you can get owner id by calling 'GET /exchange/mail-contacts'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactGeneralPropertiesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Mail Contact General Settings",
          "description": "Update exchange mail contact general settings, method will return you operation status.",
          "operationId": "ExchangeMailContact_UpdateMailContactGeneralSettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to update exchange mail contact general settings, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "contactDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactGeneralPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts/{mailContactId}/advanced-properties": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mail Contact Advanced Settings",
          "description": "Get exchange mail contact advanced settings, method will return you exchange mail contact advanced settings.",
          "operationId": "ExchangeMailContact_GetMailContactAdvancedSettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to get exchange mail contact advanced settings according to it, you can get owner id by calling 'GET /exchange/mail-contacts'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactAdvancedPropertiesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Mail Contact Advanced Settings",
          "description": "Update exchange mail contact advanced settings, method will return you operation status.",
          "operationId": "ExchangeMailContact_UpdateMailContactAdvancedSettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to update exchange mail contact advanced settings according to it, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "contactDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactAdvancedPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/mail-contacts/{mailContactId}/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Mail Contact",
          "description": "Update exchange mail contact, method will return you updated details of mail contact.",
          "operationId": "ExchangeMailContact_UpdateMailContact",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailContactId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mail contact id to update mail contact according to it, you can get owner id by calling 'GET /exchange/mail-contacts'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExchangeMailContactDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Resource Mailboxes",
          "description": "Get all resource mailboxes, method will return you list of resource mailboxes.",
          "operationId": "ExchangeResourceMailbox_GetAllExchangeResourceMailboxs",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "displayName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give display name to get filtered list of resource mailboxes according to it."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of resource mailboxes according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "mailDomainName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give mail domain name to get filtered list of resource mailboxes according to it."
            },
            {
              "name": "includeResourceMailbox",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "includeResourceMailbox is a type of flag set it '1' to get only resource mailbox, set it '2' to get all mailboxes, otherwise it will exclude resource mailboxes."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeResourceMailboxesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add a new Resource Mailbox",
          "description": "Add resource mailbox, method will return you details of recently added resource mailbox.",
          "operationId": "ExchangeResourceMailbox_AddExchangeResourceMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeResourceMailboxDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeResourceMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{exgMailboxId}": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Details",
          "description": "Get resource mailbox details, method will return you resource mailbox details.",
          "operationId": "ExchangeResourceMailbox_GetResourceMailboxDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mailbox id to get resource mailbox details, you can get exchange mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeResourceMailboxDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Resource Mailbox",
          "description": "Delete resource mailbox, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_DeleteExchangeResourceMailbox",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mailbox id to delete resource mailbox, you can get exchange mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{exgMailboxId}/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Resource Mailbox",
          "description": "Update resource mailbox, method will return you updated details of resource mailbox.",
          "operationId": "ExchangeResourceMailbox_UpdateExchangeResourceMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "exgMailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give exchange mailbox id to update resource mailbox, you can get exchange mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExgMailboxEnableDisableDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExgMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/archive-mailbox": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Archive Resource Mailbox Settings",
          "description": "Get archive resource mailbox settings, method will return you list of archive resource mailbox settings.",
          "operationId": "ExchangeResourceMailbox_GetArchiveResourceMailboxSettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get archive resource mailbox settings, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeArchiveMailboxListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Archive Resource Mailbox",
          "description": "Update archive resource mailbox, method will return you updated details of archive resource mailbox.",
          "operationId": "ExchangeResourceMailbox_UpdateArchiveResourceMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update archive resource mailbox, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "arcMbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateArchiveMailboxDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExchangeArchiveMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add a new Archive Resource Mailbox",
          "description": "Add archive resource mailbox, method will return you details of recently added archive resource mailbox.",
          "operationId": "ExchangeResourceMailbox_AddArchiveResourceMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add archive resource mailbox, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "arcMbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateArchiveMailboxDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeArchiveMailboxDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/archive-mailbox/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Archive Resource Mailbox Status",
          "description": "Update archive resource mailbox status, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_UpdateArchiveResourceMailboxStatus",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to set mailbox auto reply configuration, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "arcMbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateArchiveMailboxStatusDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/general-properties": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox General Properties",
          "description": "Get resource mailbox general properties, method will return you list of resource mailbox general properties.",
          "operationId": "ExchangeResourceMailbox_GetExchangeResourceMailboxGeneralProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to set mailbox auto reply configuration, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UpdateUserGeneralPropertiesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Resource Mailbox General Properties",
          "description": "Update resource mailbox general properties, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_UpdateExchangeResourceMailboxGeneralProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update resource mailbox general properties, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateUserGeneralPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/advanced-properties": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Advanced Properties",
          "description": "Get resource mailbox advanced properties, method will return you list of resource mailbox advanced properties.",
          "operationId": "ExchangeResourceMailbox_GetExchangeResourceMailboxAdvancedProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to set mailbox auto reply configuration, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UserMailboxAdvancedPropertiesDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Resource Mailbox Advanced Properties",
          "description": "Update resource mailbox advanced properties, method will return you updated resource mailbox advanced properties.",
          "operationId": "ExchangeResourceMailbox_UpdateExchangeResourceMailboxAdvancedProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update resource mailbox advanced properties, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserMailboxAdvancedPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/UserMailboxAdvancedPropertiesDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/email-addresses": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Email Addresses",
          "description": "Get resource mailbox email addresses, method will return you list of resource mailbox email addresses.",
          "operationId": "ExchangeResourceMailbox_GetResourceMailboxEmailAddresses",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get filtered list of resource mailbox email addresses according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/UserMailboxEmailAddressesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Set Primary Email Address",
          "description": "Set primary email address, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_SetPrimaryEmailAddresses",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to set primary email address, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SetPrimaryEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Resource Mailbox Email Address",
          "description": "Add resource mailbox email address, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddResourceMailboxEmailAddresses",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add resource mailbox email address, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddUserMailboxEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Resource Mailbox Email Address",
          "description": "Delete resource mailbox email address, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_DeleteResourceMailboxEmailAddresses",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to delete resource mailbox email address according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "emailAddress",
              "in": "query",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/send-on-behalf": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Send On Behalf Users",
          "description": "Get resource mailbox send on behalf users, method will return you list of resource mailbox send on behalf users.",
          "operationId": "ExchangeResourceMailbox_GetResourceMailboxSendOnBehalfUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get filtered list of resource mailbox send on behalf users according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Resource Mailbox Send On Behalf Users",
          "description": "Add resource mailbox send on behalf users, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddResourceMailboxSendOnBehalfUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add resource mailbox send on behalf users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Resource Mailbox Send On Behalf Users",
          "description": "Remove resource mailbox send on behalf users, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_RemoveResourceMailboxSendOnBehalfUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove resource mailbox send on behalf users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/accepted-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Accepted Senders",
          "description": "Get resource mailbox accepted senders, method will return you list of resource mailbox accepted senders.",
          "operationId": "ExchangeResourceMailbox_GetResourceMailboxAcceptedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get resource mailbox accepted senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Resource Mailbox Accepted Senders",
          "description": "Add resource mailbox accepted senders, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddResourceMailboxAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add resource mailbox accepted senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Resource Mailbox Accepted Senders",
          "description": "Remove resource mailbox accepted senders, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_RemoveResourceMailboxAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove resource mailbox accepted senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/rejected-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Rejected Senders",
          "description": "Get resource mailbox rejected senders, method will return you list of resource mailbox rejected senders.",
          "operationId": "ExchangeResourceMailbox_GetResourceMailboxRejectedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get resource mailbox rejected senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Resource Mailbox Rejected Senders",
          "description": "Add resource mailbox rejected senders, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddResourceMailboxRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add resource mailbox rejected senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Resource Mailbox Rejected Senders",
          "description": "Remove resource mailbox rejected senders, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_RemoveResourceMailboxRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove resource mailbox rejected senders, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/full-access-permissions": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Full Access Permissions",
          "description": "Get mailbox full access permissions, method will return you list of mailbox full access permissions.",
          "operationId": "ExchangeResourceMailbox_GetUserFullAccessPermission",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox full access permissions, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mailbox Full Access Permission",
          "description": "Add mailbox full access permission, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddUserFullAccessPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add mailbox full access permission, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Mailbox Full Access Permission",
          "description": "Remove mailbox full access permission, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_RemoveUserFullAccessPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove mailbox full access permissions according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/send-as-permissions": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Send As Permissions",
          "description": "Get mailbox send as permissions, method will return you list of mailbox send as permissions.",
          "operationId": "ExchangeResourceMailbox_GetUserSendAsPermission",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox send as permissions according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Mailbox Send As Permission",
          "description": "Add mailbox send as permission, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddUserSendAsPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add mailbox send as permission according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Mailbox Send As Permission",
          "description": "Remove mailbox send as permission, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_RemoveUserSendAsPermission",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove mailbox send as permission, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/forwarding-address": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Mailbox Forwarding Address",
          "description": "Get mailbox forwarding Address, method will return you mailbox forwarding address.",
          "operationId": "ExchangeResourceMailbox_GetUserForwardingAddress",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get mailbox forwarding Address, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailboxForwardingDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Mailbox Forwarding Address",
          "description": "Update mailbox forwarding address, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_UpdateUserForwardingAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update mailbox forwarding address according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailboxForwardingDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/stats": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Stats",
          "description": "Get resource mailbox stats, method will return you resource mailbox stats.",
          "operationId": "ExchangeResourceMailbox_GetResourceMailboxStatistics",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get resource mailbox statistics according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailboxStatsDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/memberships": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get All Distribution Lists Of User Mailbox",
          "description": "Get all distribution lists of user mailbox, method will return you list of all distribution lists of user mailbox.",
          "operationId": "ExchangeResourceMailbox_GetAllListsOfUserMailbox",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get all distribution lists of user mailbox according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add User Mailbox To Distribution List",
          "description": "Add user mailbox to distribution list, method will return you recently added user mailbox to distribution list.",
          "operationId": "ExchangeResourceMailbox_AddUserMailboxToList",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add user mailbox to distribution list according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove User Mailbox From Distribution List",
          "description": "Remove user mailbox from distribution list, method will return you updated user mailbox distribution list.",
          "operationId": "ExchangeResourceMailbox_RemoveUserMailboxFromList",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove user mailbox from distribution list, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/delegates": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Delegates For Resource Mailbox",
          "description": "Get delegates for resource mailbox, method will return you a list of delegates for resource mailbox.",
          "operationId": "ExchangeResourceMailbox_GetDelegatesForResourceMailbox",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get filtered list of delegates for resource mailbox according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ResourceDelegateListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Delegates For Resource Mailbox",
          "description": "Add delegates for resource mailbox, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddDelegatesForResourceMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add delegates for resource mailbox, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Delegates For Resource Mailbox",
          "description": "Remove delegates for resource mailbox, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_RemoveDelegatesForResourceMailbox",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove delegates for resource mailbox according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/book-in-policy-users": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Book In Policy Users",
          "description": "Get resource mailbox book in policy users, method will return you list of resource mailbox book in policy users.",
          "operationId": "ExchangeResourceMailbox_GetResourceMailboxBookInPolicyUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get resource mailbox book in policy users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/PolicyUserListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Resource Mailbox Book In Policy Request",
          "description": "Add resource mailbox book in policy request, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddResourceMailboxBookInPolicyRequest",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add resource mailbox book in policy request, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Resource Mailbox Book In Policy Users",
          "description": "Remove resource mailbox book in policy, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_RemoveResourceMailboxBookInPolicyUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove resource mailbox book in policy, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/request-in-policy-users": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Request In Policy Users",
          "description": "Get resource mailbox request in policy users, method will return you list of resource mailbox request in policy users.",
          "operationId": "ExchangeResourceMailbox_GetResourceMailboxRequestInPolicyUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get resource mailbox request in policy users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/PolicyUserListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Resource Mailbox Request In Policy Users",
          "description": "Add resource mailbox request in policy users, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddResourceMailboxRequestInPolicyUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add resource mailbox request in policy users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Resource Mailbox Request In Policy Users",
          "description": "Remove resource mailbox request in policy users, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_RemoveResourceMailboxRequestInPolicyUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to remove resource mailbox request in policy users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/request-out-policy-users": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Mailbox Out Policy Users",
          "description": "Get resource mailbox out policy users, method will return you list of resource mailbox out policy users.",
          "operationId": "ExchangeResourceMailbox_GetResourceMailboxOutPolicyUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get filtered list of resource mailbox out policy users according to it, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/PolicyUserListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Resource Mailbox Out Policy Users",
          "description": "Add resource mailbox out policy users, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_AddResourceMailboxOutPolicyUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to add resource mailbox out policy users, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Resource Mailbox Out Policy Users",
          "description": "Remove resource mailbox out policy users, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_RemoveResourceMailboxOutPolicyUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to set mailbox auto reply configuration, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/resource-mailboxes/{mailboxId}/resource-mailbox-policy-settings": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Resource Maibox Policy Settings",
          "description": "Get resource mailbox policy settings, method will return you resource mailbox policy settings.",
          "operationId": "ExchangeResourceMailbox_GetResourceMaiboxPolicySettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to get resource mailbox policy settings, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ResourceMailboxPropertiesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Resource Maibox Policy Settings",
          "description": "Update resource mailbox policy settings, method will return you operation status.",
          "operationId": "ExchangeResourceMailbox_UpdateResourceMaiboxPolicySettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "mailboxId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give mailbox id to update resource mailbox policy settings, you can get mailbox id by calling 'GET /exchange/mailboxes'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ResourceMailboxPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get All Exchange Public Folders",
          "description": "Get all exchange public folders, method will return you list of exchange public folders.",
          "operationId": "ExchangePublicFolder_GetAllExchangePublicFolders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "pFName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give public folder name to get filtered list of exchange public folders according to it."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of exchange public folders according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of exchange public folders according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "emailID",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give email address to get filtered list of exchange public folders according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangePublicFoldersDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Exchange Public Folder",
          "description": "Add exchange public folder, method will return you complete details of recently added public folder.",
          "operationId": "ExchangePublicFolder_AddExchangePublicFolder",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders/{publicFolderId}": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Exchange Public Folder Details",
          "description": "Get exchange public folder details, method will return you complete details of public folder.",
          "operationId": "ExchangePublicFolder_GetExchangePublicFolderDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to get exchange public folder details according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Exchange Public Folder",
          "description": "Delete exchange public folder, method will return you operation status.",
          "operationId": "ExchangePublicFolder_DeleteExchangePublicFolder",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to delete, you can get public folder id by calling 'GET /exchange/public-folders'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders/{publicFolderId}/general-properties": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Exchange Public Folder General Properties",
          "description": "Get exchange public folder general properties, method will return you exchange public folder general properties.",
          "operationId": "ExchangePublicFolder_GetExchangePublicFolderGeneralProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to get exchange public folder details according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderGeneralPropertiesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Exchange Public Folder General Properties",
          "description": "Update exchange public folder general properties, method will return you operation status.",
          "operationId": "ExchangePublicFolder_UpdateExchangePublicFolderGeneralProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to update exchange public folder details according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderGeneralPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders/{publicFolderId}/advanced-properties": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Exchange Public Folder Advanced Properties",
          "description": "Get exchange public folder advanced properties, method will return you exchange public folder advanced properties.",
          "operationId": "ExchangePublicFolder_GetExchangePublicFolderAdvancedProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to get exchange public folder advanced properties according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderAdvancedPropertiesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Exchange Public Folder Advanced Properties",
          "description": "Update exchange public folder advanced properties, method will return you operation status.",
          "operationId": "ExchangePublicFolder_UpdateExchangePublicFolderAdvancedProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to update exchange public folder advanced properties according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderAdvancedPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders/{publicFolderId}/permissions": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Exchange Public Folder Permissions",
          "description": "Get exchange public folder permissions, method will return you list of exchange public folder permissions.",
          "operationId": "ExchangePublicFolder_GetExchangePublicFolderPermissions",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to get exchange public folder permissions according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangePFUsersListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Exchange Public Folder Permissions",
          "description": "Update exchange public folder permissions, method will return you operation status.",
          "operationId": "ExchangePublicFolder_UpdateExchangePublicFolderPermissions",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to update exchange public folder permissions according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdatePFClientPermission:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders/{publicFolderId}/accepted-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Public Folder Accepted Senders",
          "description": "Get exchange public folder accepted senders, method will return you list of exchange public folder accepted senders.",
          "operationId": "ExchangePublicFolder_GetPublicFolderAcceptedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to get exchange public folder details according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Public Folder Accepted Senders",
          "description": "Add exchange public folder accepted senders, method will return you operation status.",
          "operationId": "ExchangePublicFolder_AddPublicFolderAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to add exchange public folder accepted senders according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Public Folder Accepted Senders",
          "description": "Remove exchange public folder accepted senders, method will return you operation status.",
          "operationId": "ExchangePublicFolder_RemovePublicFolderAcceptedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to remove exchange public folder accepted senders according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders/{publicFolderId}/rejected-senders": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Public Folder Rejected Senders",
          "description": "Get exchange public folder rejected senders, method will return you list of exchange public folder rejected senders.",
          "operationId": "ExchangePublicFolder_GetPublicFolderRejectedSenders",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to get exchange public folder rejected senders according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Public Folder Rejected Senders",
          "description": "Add exchange public folder rejected senders, method will return you operation status.",
          "operationId": "ExchangePublicFolder_AddPublicFolderRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to add exchange public folder rejected senders, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Remove Public Folder Rejected Senders",
          "description": "Remove exchange public folder rejected senders, method will return you operation status.",
          "operationId": "ExchangePublicFolder_RemovePublicFolderRejectedSenders",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to remove exchange public folder rejected senders according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "mbxDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeRecipientListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders/{publicFolderId}/email-addresses": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Public Folder Email Addresses",
          "description": "Get exchange public folder email addresses, method will return you list of exchange public folder email addresses.",
          "operationId": "ExchangePublicFolder_GetPublicFolderEmailAddresses",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to get filtered exchange public folder email addresses according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/RecipientEmailAddressesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Public Folder Email Addresses",
          "description": "Add exchange public folder email addresses, method will return you operation status.",
          "operationId": "ExchangePublicFolder_AddPublicFolderEmailAddresses",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to add exchange public folder email addresses, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddRecipientEmailAddressDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Public Folder Email Addresses",
          "description": "Delete exchange public folder email addresses, method will return you operation status.",
          "operationId": "ExchangePublicFolder_DeletePublicFolderEmailAddresses",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to delete exchange public folder email addresses according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "emailAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give email address to delete exchange public folder email addresses according to it"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders/{publicFolderId}/forwarding-address": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Public Folder Forwarding Address",
          "description": "Get exchange public folder Forwarding address, method will return you exchange public folder Forwarding address details.",
          "operationId": "ExchangePublicFolder_GetPublicFolderForwardingAddress",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to get exchange public folder Forwarding address details according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderForwardingDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Public Folder Forwarding Address",
          "description": "Update exchange public folder forwarding address, method will return you operation status.",
          "operationId": "ExchangePublicFolder_UpdatePublicFolderForwardingAddress",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to update exchange public folder forwarding address according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderForwardingDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/public-folders/{publicFolderId}/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Enable Disable Public Folder",
          "description": "Enable disable public folder, method will return you operation status.",
          "operationId": "ExchangePublicFolder_EnableDisablePublicFolder",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "publicFolderId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give public folder id to enable disable public folder according to it, you can get public folder id by calling 'GET /exchange/public-folders'."
            },
            {
              "name": "pfDet",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangePublicFolderEnableDisableDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/organizations/{organizationId}/journal-rules": {
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Exchange Journal Rule",
          "description": "Add exchange journal rule, method will return you complete details of recently added journal rule.",
          "operationId": "ExchangeJournalRule_AddExchangeJournalRule",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to add journal rule, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeJournalRuleDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeJournalRuleDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Exchange Journal Rule",
          "description": "Delete exchange journal rule, method will return you operation status.",
          "operationId": "ExchangeJournalRule_DeleteExchangeJournalRule",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to delete exchange journal rule, you can get organiation id by calling 'GET /organizations/exchange'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/organizations/journal-rules": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Exchange Journal Rules",
          "description": "Get all exchange journal rule, method will return you list of journal rules.",
          "operationId": "ExchangeJournalRule_GetAllExchangeJournalRules",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of journal rule according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of journal rule according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeJournalRulesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/organizations/{organizationId}/journal-rules/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Enable Disable Exchange Blocked Domain Rule",
          "description": "Enable disable exchange blocked domain rule, method will return you operation status.",
          "operationId": "ExchangeJournalRule_EnableDisableExchangeJournalRule",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to update exchange blocked domain rule status, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeJournalRuleEnableDisableDto:Update"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/organizations/{organizationId}/blocked-domain-rules": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Blocked Domain Rule Details",
          "description": "Get blocked domain rule details, method will return you blocked domain rule details.",
          "operationId": "ExchangeBlockedDomainRule_GetBlockedDomainRuleDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get blocked domain rule details, you can get organiation id by calling 'GET /organizations/exchange'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeBlockedDomainRuleDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Exchange Blocked Domain Rule",
          "description": "Update exchange blocked domain rule, method will return you updated blocked domain rule details.",
          "operationId": "ExchangeBlockedDomainRule_UpdateExchangeBlockedDomainRule",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give organization id to update blocked domain rule details, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeBlockedDomainRuleDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/ExchangeBlockedDomainRuleDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Exchange Blocked Domain Rule",
          "description": "Add exchange blocked domain rule, method will return you recently added blocked domain rule details.",
          "operationId": "ExchangeBlockedDomainRule_AddExchangeBlockedDomainRule",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give organization id to add blocked domain rule, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeBlockedDomainRuleDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeBlockedDomainRuleDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Exchange Blocked Domain Rule",
          "description": "Delete exchange blocked domain rule, method will return you operation status.",
          "operationId": "ExchangeBlockedDomainRule_DeleteExchangeBlockedDomainRule",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to delete blocked domain rule details, you can get organiation id by calling 'GET /organizations/exchange'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/organizations/blocked-domain-rules": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Exchange Blocked Domain Rules",
          "description": "Get exchange blocked domain rules, method will return you list of exchange blocked domain rules.",
          "operationId": "ExchangeBlockedDomainRule_GetExchangeBlockedDomainRules",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of blocked domain rule according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of blocked domain rule according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeBlockedDomainRulesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/organizations/{organizationId}/blocked-domain-rules/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Enable Disable Exchange Blocked Domain Rule",
          "description": "Enable disable exchange blocked domain rule, method will return you operation status.",
          "operationId": "ExchangeBlockedDomainRule_EnableDisableExchangeBlockedDomainRule",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to update blocked domain rule status, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeBlockedDomainEnableDisableDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/organizations/{organizationId}/mail-disclaimers": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get All Exchange Mail Disclaimers",
          "description": "Get all exchange mail disclaimer, method will return you list of exchange mail disclaimers.",
          "operationId": "ExchangeMailDisclaimer_GetAllExchangeMailDisclaimers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get list of exchange mail disclaimers, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of exchange mail disclaimers according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeMailDisclaimersDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Update Exchange Mail Disclaimer",
          "description": "Update exchange mail disclaimer, method will return you operation status.",
          "operationId": "ExchangeMailDisclaimer_UpdateExchangeMailDisclaimer",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to update exchange mail disclaimer, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailDisclaimerDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Exchange"
          ],
          "summary": "Add Exchange Mail Disclaimer",
          "description": "Add exchange mail disclaimer, method will return you recently added mail disclaimer details.",
          "operationId": "ExchangeMailDisclaimer_AddExchangeMailDisclaimer",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to add exchange mail disclaimer, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailDisclaimerDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/ExchangeMailDisclaimerDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Exchange"
          ],
          "summary": "Delete Exchange Mail Disclaimer",
          "description": "Delete exchange mail disclaimer, method will return you operation status.",
          "operationId": "ExchangeMailDisclaimer_DeleteExchangeMailDisclaimer",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to delete exchange mail disclaimer, you can get organiation id by calling 'GET /organizations/exchange'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/organizations/{organizationId}/mail-disclaimers/enable-disable": {
        "put": {
          "tags": [
            "Exchange"
          ],
          "summary": "Enable Disable Exchange Mail Disclaimer",
          "description": "Enable disable exchange mail disclaimer, method will return you operation status.",
          "operationId": "ExchangeMailDisclaimer_EnableDisableExchangeMailDisclaimer",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to update status of exchange mail disclaimer, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ExchangeMailDisclaimerEnableDisableDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/{serverRoleId}/mailbox-databases": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Exchange Mailboxes Database",
          "description": "Get all exchange mailboxes database, method will return you list of exchange mailbox database.",
          "operationId": "ExgConfs_GetAllExgMailBoxesDB",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of exchange mailboxes database according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExgMailboxDatabasesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/{serverRoleId}/mailbox-databases/{userId}": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Assigned Exchange Mailboxes Database",
          "description": "Get all exchange mailboxes database, method will return you list of exchange mailbox database.",
          "operationId": "ExgConfs_GetAllExgMailBoxesDB_ByUserId",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of exchange mailboxes database according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of exchange mailboxes database according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "userName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give user name to get filtered list of exchange mailboxes database according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExgMailboxDatabasesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/{serverRoleId}/public-folder-mailboxes": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Exchange Public Folder Mailboxes",
          "description": "Get all exchange public folder mailboxes, method will return you list of exchange public folder mailboxes.",
          "operationId": "ExgConfs_GetAllExgPfMailBoxes",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of exchange public folder mailboxes according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangePfMailboxesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/{serverRoleId}/public-folder-mailboxes/{userId}": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get all Assigned Exchange Public Folder Mailboxes",
          "description": "Get all exchange public folder mailboxes, method will return you operation status.",
          "operationId": "ExgConfs_GetAllExgPfMailBoxes_ByUserId",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of exchange public folder mailboxes according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of exchange public folder mailboxes according to it, you can get user id by calling 'GET /panel-users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangePfMailboxesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/{serverRoleId}/activesync-policies": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Active Sync Policies",
          "description": "Active sync policies, method will return you list of policies.",
          "operationId": "ExgConfs_ActiveSyncPolicies",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "query",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of exchange servers according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give server role id to get filtered list of exchange servers according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ActiveSyncPoliciesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/by-administrator": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Get Exchange Lists By Administrator.",
          "description": "Get exchange lists by administrator, method will return you list of exchange distribution list.",
          "operationId": "Exchange_GetExchangeListsByAdministrator",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "query",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of distribution list according to it, you can get organiation id by calling 'GET /organizations/exchange'."
            },
            {
              "name": "administrator",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Give user email address to get filtered list of distribution list according to it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/ExchangeDistributionListsDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/exchange/distribution-lists/{distributionlistsId}/is-member": {
        "get": {
          "tags": [
            "Exchange"
          ],
          "summary": "Is User Distribution List Member",
          "description": "Is user distribution list member, method will return you boolean status of user existance.",
          "operationId": "Exchange_IsUserDistributionListMember",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "distributionlistsId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give distribution list id to update exchange distribution list details, you can get distribution list id by calling 'GET /exchange/distribution-lists'."
            },
            {
              "name": "userEmailAddress",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Give user email address to check its existance in distribution list."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get all SharePoint Sites",
          "description": "Get all SharePoint sites, method will return you list of SharePoint sites.",
          "operationId": "SharePointSite_GetAllSharePointSites",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of SharePoint sites according to it, you can get organiation id by calling 'GET /organizations/sharepoint'."
            },
            {
              "name": "siteName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give site name to get filtered list of SharePoint sites according to it."
            },
            {
              "name": "sPHostHeader",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give SharePoint host header to get filtered list of SharePoint sites according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointSiteListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Add a new SharePoint Site",
          "description": "Add SharePoint site, method will return you details of recently added SharePoint site.",
          "operationId": "SharePointSite_AddSharePointSite",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointSiteDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/SharePointSiteDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "412": {
              "description": "Pre Condition Failed"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{sharePointSiteId}": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint Site Details",
          "description": "Get SharePoint site details, method will return you complete details of SharePoint site.",
          "operationId": "SharePointSite_GetSharePointSiteDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sharePointSiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint site id to get its details, you can get SharePoint site id by calling 'GET /sharepoint/sites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointSiteDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Delete SharePoint Site",
          "description": "Delete SharePoint site, method will return you operation status.",
          "operationId": "SharePointSite_DeleteSharePointSite",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sharePointSiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint site id to delete it, you can get site id by calling 'GET /sharepoint/sites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{sharePointSiteId}/subsites": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get all SharePoint Subsites",
          "description": "Get all SharePoint subsites, method will return you list of SharePoint subsites.",
          "operationId": "SharePointSite_GetAllSharePointSubSites",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sharePointSiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to get filtered list of SharePoint subsites according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of SharePoint sites according to it, you can get organiation id by calling 'GET /organizations/sharepoint'."
            },
            {
              "name": "siteName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give site name to get filtered list of SharePoint subsites according to it."
            },
            {
              "name": "sPHostHeader",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give SharePoint host header to get filtered list of SharePoint subsites according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointSiteListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Add a new SharePoint Subsite",
          "description": "Add SharePoint subsite, method will return you complete details of recently added SharePoint subsite.",
          "operationId": "SharePointSite_AddSharePointSubSite",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointSubSiteDto:Request"
              }
            },
            {
              "name": "sharePointSiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint site id to add SharePoint subsite according to it, you can get site id by calling 'GET /sharepoint/sites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/SharePointSubSiteDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{sharePointSiteId}/roles": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get all SharePoint Site Roles",
          "description": "Get all SharePoint site roles, method will return you list of SharePoint site roles.",
          "operationId": "SharePointSite_GetAllSharePointSiteRoles",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sharePointSiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint site id to get filtered list of SharePoint site roles according to it, you can get site id by calling 'GET /sharepoint/sites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointRoleListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{sharePointSubSiteId}/subsites": {
        "delete": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Delete SharePoint Subsite",
          "description": "Delete SharePoint subsite, method will return you operation status.",
          "operationId": "SharePointSite_DeleteSharePointSubSite",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sharePointSubSiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint subsite id to delete it, you can get user id by calling 'GET /sharepoint/sites/{sharePointSiteId}/subsites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{sharePointSiteId}/stats": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint Site Stats",
          "description": "Get SharePoint site summary, method will return you SharePoint site summary.",
          "operationId": "SharePointSite_GetSharePointSiteStats",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sharePointSiteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint site id to get SharePoint site summary according to it, you can get site id by calling 'GET /sharepoint/sites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointSiteDetailDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/users": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint Users",
          "description": "Get SharePoint users, method will return you list of SharePoint users.",
          "operationId": "SharePointUser_GetSharePointUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to get filtered list of SharePoint users according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of SharePoint users according to it, you can get organiation id by calling 'GET /organizations/sharepoint'."
            },
            {
              "name": "userName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give user name to get filtered list of SharePoint users according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointUserListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Add a new SharePoint User",
          "description": "Add SharePoint user, method will return you operation status.",
          "operationId": "SharePointUser_AddSharePointUser",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to add SharePoint user, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointUserDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/users/{sharePointUserId}": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint User Details",
          "description": "Get SharePoint user details, method will return you complete details of SharePoint user.",
          "operationId": "SharePointUser_GetSharePointUserDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sharePointUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint user id to get its details, you can get user id by calling 'GET /sharepoint/sites/{siteId}/users'."
            },
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to get SharePoint user details according to it, you can get site id by calling 'GET /sharepoint/sites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointUserDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/users/{userId}": {
        "delete": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Delete SharePoint Site User",
          "description": "Delete SharePoint site user, method will return you operation status.",
          "operationId": "SharePointUser_DeleteSharePointSiteUser",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to delete SharePoint site user according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint user id to delete it, you can get user id by calling 'GET /sharepoint/sites/{siteId}/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/users/{userId}/roles": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint User Roles",
          "description": "Get SharePoint user roles, method will return you list of SharePoint user Roles.",
          "operationId": "SharePointUser_GetSharePointUserRoles",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to get SharePoint user roles according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give sharePoint user id to get SharePoint user roles according to it, you can get user id by calling 'GET /sharepoint/sites/{siteId}/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointRoleListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Update SharePoint User Roles",
          "description": "Update SharePoint user roles, method will return you operation status.",
          "operationId": "SharePointUser_UpdateSharePointUserRoles",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to update SharePoint user roles according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint user id to Update SharePoint user roles according to it, you can get user id by calling 'GET /sharepoint/sites/{siteId}/users'."
            },
            {
              "name": "roleList",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointRoleListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/users/{userId}/change-password": {
        "put": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Change SharePoint User Password",
          "description": "Change SharePoint user password, method will return you operation status.",
          "operationId": "SharePointUser_ChangeSharePointUserPassword",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to change SharePoint user password according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint user id to change its password, you can get user id by calling 'GET /sharepoint/sites/{siteId}/users'."
            },
            {
              "name": "passwordDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointUserChangePasswordDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/users/{userId}/general-profile": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint User Properties",
          "description": "Get SharePoint user properties, method will return you list of SharePoint user properties.",
          "operationId": "SharePointUser_GetSharePointUserProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to get filtered list of SharePoint user properties according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint user id to get filtered list of SharePoint user properties according to it, you can get user id by calling 'GET /sharepoint/sites/{siteId}/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointGeneralProfileDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Update SharePoint User Properties",
          "description": "Update SharePoint user properties, method will return you operation status.",
          "operationId": "SharePointUser_UpdateSharePointUserProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to update SharePoint user properties according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SharePoint user id to update its properties, you can get user id by calling 'GET /sharepoint/sites/{siteId}/users'."
            },
            {
              "name": "userProfileDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointGeneralProfileDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/users/existing": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get Existing SharePoint Users",
          "description": "Get existing SharePoint user, method will return you list of existing SharePoint users.",
          "operationId": "SharePointUser_GetExistingSharePointUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to get filtered list of SharePoint groups according to it, you can get site id by calling 'GET /sharepoint/sites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/ActiveDirectoryUsersListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/groups": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint Groups",
          "description": "Get SharePoint groups, method will return you list of SharePoint groups.",
          "operationId": "SharePointGroup_GetSharePointGroups",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to get filtered list of SharePoint groups according to it, you can get site id by calling 'GET /sharepoint/sites'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointGroupListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Add a new SharePoint Group",
          "description": "Add SharePoint group, method will return you operation status.",
          "operationId": "SharePointGroup_AddSharePointGroup",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to add SharePoint group, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointGroupDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/groups/{groupName}": {
        "delete": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Delete SharePoint Group",
          "description": "Delete SharePoint group, method will return you operation status.",
          "operationId": "SharePointGroup_DeleteSharePointGroups",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to delete SharePoint group according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "groupName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give group name to delete."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/groups/{groupName}/roles": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint Group Roles",
          "description": "Get SharePoint group roles, method will return you list of group roles.",
          "operationId": "SharePointGroup_GetSharePointGroupRoles",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to get filtered list of SharePoint group roles according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "groupName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give group name to get filtered list of SharePoint group roles according to it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointRoleListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Update SharePoint Group Roles",
          "description": "Update SharePoint group roles, method will return you operation status.",
          "operationId": "SharePointGroup_UpdateSharePointGroupRoles",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to update SharePoint group roles according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "groupName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give group name to update its roles."
            },
            {
              "name": "roleList",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointRoleListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/sites/{siteId}/groups/{groupName}/group-members": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint Group Members",
          "description": "Get SharePoint group members, method will return you list of SharePoint group members.",
          "operationId": "SharePointGroup_GetSharePointGroupUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to get filtered list of SharePoint group members according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "groupName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give group name to get filtered list of SharePoint group members according to it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointUserListDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Add SharePoint Group Members",
          "description": "Add SharePoint group members, method will return you operation status.",
          "operationId": "SharePointGroup_AddSharePointGroupUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to add SharePoint group members according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "groupName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give group name to add members in it."
            },
            {
              "name": "userList",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointGroupMemberListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Remove SharePoint Group Members",
          "description": "Remove SharePoint group members, method will return you operation status.",
          "operationId": "SharePointGroup_RemoveSharePointGroupUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give site id to remove SharePoint group members according to it, you can get site id by calling 'GET /sharepoint/sites'."
            },
            {
              "name": "groupName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give group name to remove members from it."
            },
            {
              "name": "userList",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SharePointGroupMemberListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint/{serverRoleId}/web-applications/{userId}": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get User SharePoint Web Applications",
          "description": "Get user SharePoint web applications, method will return you list of user SharePoint web applications.",
          "operationId": "SharePointConf_GetUserSPWebApplications",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of user SharePoint web applications according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of user SharePoint web applications according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointUserWebApplicationListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint-server/{serverRoleId}/web-applications": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint Server Web Applications",
          "description": "Get SharePoint server web applications, method will return you list of SharePoint server web applications.",
          "operationId": "SharePointServer_GetSharePointServerWebApplications",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of SharePoint server web applications according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointWebApplicationListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint-server/{serverRoleId}/locales": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint Server Locales",
          "description": "Get SharePoint server locales, method will return you list of SharePoint server locales.",
          "operationId": "SharePointServer_GetSharePointServerLocales",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of SharePoint server locales according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointLocaleListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/sharepoint-server/{serverRoleId}/locales/{localeId}/web-templates": {
        "get": {
          "tags": [
            "SharePoint"
          ],
          "summary": "Get SharePoint Server Web Templates",
          "description": "Get SharePoint server web templates, method will return you list of SharePoint server web templates.",
          "operationId": "SharePointServer_GetSharePointServerWebTemplates",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of SharePoint server web templates according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "localeId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give locale id to get filtered list of SharePoint server web templates according to it, you can get locale id by calling 'GET /sharepoint-server/{serverRoleId}/locales'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SharePointWebTemplateListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "List Skype Users",
          "description": "List skype users, method will return you list of skype users.",
          "operationId": "SkypeUser_ListSkypeUsers",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeUserName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give skype user name to get filtered list of skype users according to it."
            },
            {
              "name": "sIPAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give SIP address to get filtered list of skype users according to it."
            },
            {
              "name": "sIPDomainId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give SIP domain id to get filtered list of skype users according to it, you can get SIP domain id by calling 'GET /skype/sip-domains'."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of skype users according to it, you can get organiation id by calling 'GET /organizations/skype'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of skype users according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "enterpriseVoiceEnabled",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set enterpriseVoiceEnabled to true to get filtered list of skype users according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeUserListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Add a new Skype User",
          "description": "Add skype user, method will return you operation status.",
          "operationId": "SkypeUser_AddSkypeUser",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeUserDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/{skypeUserId}": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype User Details",
          "description": "Get skype user details, method will return you complete details of skype user.",
          "operationId": "SkypeUser_GetSkypeUserDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give skype user id to get its details, you can get owner id by calling 'GET /skype/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeUserDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Delete Skype User",
          "description": "Get skype user details, method will return you operation status.",
          "operationId": "SkypeUser_DeleteSkypeUser",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeUserId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give skype user id to get its details, you can get owner id by calling 'GET /skype/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/{userId}/change-password": {
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Change Skype User Password",
          "description": "Change skype user password, method will return you operation status.",
          "operationId": "SkypeUser_ChangeSkypeUserPassword",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to update its password, you can get user id by calling 'GET /skype/users'."
            },
            {
              "name": "passwordDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeUserChangePasswordDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/{userId}/general-profile": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype User Properties",
          "description": "Get skype user properties, method will return you skype user properties.",
          "operationId": "SkypeUser_GetSkypeUserProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get its properties, you can get user id by calling 'GET /skype/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeUserGeneralProfileDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Skype User Properties",
          "description": "Update skype user properties, method will return you operation status.",
          "operationId": "SkypeUser_UpdateSkypeUserProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to update its properties, you can get user id by calling 'GET /skype/users'."
            },
            {
              "name": "userProfileDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeUserGeneralProfileDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/{userId}/advanced-properties": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype User Advanced Settings",
          "description": "Get skype user advanced settings, method will return you user advanced settings.",
          "operationId": "SkypeUser_GetSkypeUserAdvancedSettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get its advanced settings, you can get user id by calling 'GET /skype/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeUserAdvancedPropertiesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Skype User Advanced Properties",
          "description": "Update skype user advanced properties, method will return you operations status.",
          "operationId": "SkypeUser_UpdateSkypeUserAdvancedProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to update its advanced settings, you can get user id by calling 'GET /skype/users'."
            },
            {
              "name": "userPropDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeUserAdvancedPropertiesDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/{userId}/status": {
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Skype User Status",
          "description": "Update skype user status, method will return you operations status.",
          "operationId": "SkypeUser_UpdateSkypeUserStatus",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to update its status, you can get user id by calling 'GET /skype/users'."
            },
            {
              "name": "userStatusDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeUserStatusDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/{userId}/forwarding": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype User Forwarding Settings",
          "description": "Get skype user forwarding settings, method will return you user forwarding settings.",
          "operationId": "SkypeUser_GetSkypeUserForwardingSettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get its forwarding settings, you can get user id by calling 'GET /skype/users'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeUserForwardingSettingsDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Skype User Forwarding Settings",
          "description": "Update skype user forwarding settings, method will return you operation status.",
          "operationId": "SkypeUser_UpdateSkypeUserForwardingSettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to update its forwarding settings, you can get user id by calling 'GET /skype/users'."
            },
            {
              "name": "userForwardingDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeUserForwardingSettingsDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/bulk/feasibility": {
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Check Bulk Skype Users Feasibility",
          "description": "Check bulk skype users feasibility, method will return you updated bulk user feasibility settings.",
          "operationId": "SkypeUser_CheckBulkSkypeUsersFeasibility",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeBulkUsersFeasibilityDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/SkypeBulkUsersListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/bulk": {
        "post": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Add Bulk Skype Users",
          "description": "Add bulk skype users, method will return you list of recenlty added bulk users.",
          "operationId": "SkypeUser_AddBulkSkypeUsers",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeBulkUsersListDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/SkypeBulkUsersListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/{userId}/telephony-settings": {
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Skype User Telephony Settings",
          "description": "Update skype user telephony settings, method will return you operations status.",
          "operationId": "SkypeUser_UpdateSkypeUserTelephonySettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to update its telephony settings, you can get user id by calling 'GET /skype/users'."
            },
            {
              "name": "userTelephonySettingsDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeUserTelephonySettingsDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/users/{userId}/policy-settings": {
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Skype User Policy Settings",
          "description": "Update skype users policy settings, method will return you operations status.",
          "operationId": "SkypeUser_UpdateSkypeUserPolicySettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to update its policy settings, you can get user id by calling 'GET /skype/users'."
            },
            {
              "name": "userPolicySettingsDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeUserPolicySettingsDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/sip-domains": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "List SIP Domains",
          "description": "Get SIP domains, method will return you list of SIP domains.",
          "operationId": "SkypeSipDomain_ListSipDomains",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sIPDomainName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give SIP domain name to get filtered list of SIP domains according to it."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of SIP domains according to it, you can get organiation id by calling 'GET /organizations/skype'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeSipDomainListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Add a new Skype SIP Domain",
          "description": "Add SIP domain, method will return you complete details of recently added SIP domain.",
          "operationId": "SkypeSipDomain_AddSkypeSipDomain",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeSipDomainDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/SkypeSipDomainDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "409": {
              "description": "Already Exists"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/sip-domains/{sipDomainId}": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get SIP Domain Details",
          "description": "Get SIP domain details, method will return you complete details of SIP domain.",
          "operationId": "SkypeSipDomain_GetSipDomainDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sipDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SIP domain id to get its details, you can get SIP domain id by calling 'GET /skype/sip-domains'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeSipDomainDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Delete SIP Domain",
          "description": "Delete SIP domain, method will return you operation status.",
          "operationId": "SkypeSipDomain_DeleteSipDomain",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "sipDomainId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give SIP domain id to delete it, you can get SIP domain id by calling 'GET /skype/sip-domains'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/response-groups": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "List Skype Groups",
          "description": "List skype groups, method will return you list of skype groups.",
          "operationId": "SkypeGroup_ListSkypeGroups",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "responseGroupName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give response group name to get filtered list of skype groups according to it."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of skype groups according to it, you can get organiation id by calling 'GET /organizations/skype'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of skype groups according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeGroupListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Add a new Skype Response Group",
          "description": "Add skype resource group, method will return you complete details of recently added skype resource group.",
          "operationId": "SkypeGroup_AddSkypeResponseGroup",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeGroupDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/SkypeGroupDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/response-groups/{skypeResponseGroupId}": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype Group Details",
          "description": "Get skype group details, method will return you complete details of skype resource group.",
          "operationId": "SkypeGroup_GetSkypeGroupDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeResponseGroupId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give response group id to get its details, you can get response group id by calling 'GET /skype/response-groups'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeGroupDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Delete Skype Group",
          "description": "Delete skype group, method will return you operation status.",
          "operationId": "SkypeGroup_DeleteSkypeGroup",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeResponseGroupId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give response group id to delete it, you can get response group id by calling 'GET /skype/response-groups'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/response-groups/{skypeResponseGroupId}/properties": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype Group Properties",
          "description": "Get skype group properties, method will return you skype group properties.",
          "operationId": "SkypeGroup_GetSkypeGroupProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeResponseGroupId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give response group id to get skype group properties according to it, you can get response group id by calling 'GET /skype/response-groups'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeGroupDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Skype Group Properties",
          "description": "Update skype group properties, method will return you operation status.",
          "operationId": "SkypeGroup_UpdateSkypeGroupProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeResponseGroupId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give response group id to get its properties, you can get response group id by calling 'GET /skype/response-groups'."
            },
            {
              "name": "skypeGroupDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeGroupDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/queues": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "List Skype Queues",
          "description": "List skype queues, method will return you list of skype queues.",
          "operationId": "SkypeQueue_ListSkypeQueues",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "responseQueueName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give response queue name to get filtered list of skype queues according to it."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of skype queues according to it, you can get organiation id by calling 'GET /organizations/skype'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of skype queues according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeQueueListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Add a new Skype Response Queue",
          "description": "Add skype response queue, method will return you complete details of recently added skype response queue.",
          "operationId": "SkypeQueue_AddSkypeResponseQueue",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeQueueDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/SkypeQueueDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/queues/{skypeResponseQueueId}": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype Queue Details",
          "description": "Get skype response queue details, method will return you complete details of skype response queue.",
          "operationId": "SkypeQueue_GetSkypeQueueDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeResponseQueueId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give skype response queue id to get its details, you can get queue id by calling 'GET /skype/queues'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeQueueDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Delete Skype Queue",
          "description": "Delete skype response queue, method will return you operation status.",
          "operationId": "SkypeQueue_DeleteSkypeQueue",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeResponseQueueId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give skype response queue id to delete it, you can get queue id by calling 'GET /skype/queues'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/queues/{skypeResponseQueueId}/properties": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype Queue Properties",
          "description": "Get skype queue properties, method will return you skype queue properties.",
          "operationId": "SkypeQueue_GetSkypeQueueProperties",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeResponseQueueId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give skype response queue id to get skype queue properties according to it, you can get queue id by calling 'GET /skype/queues'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeQueueDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Skype Queue Properties",
          "description": "Update skype queue properties, method will return you operation status.",
          "operationId": "SkypeQueue_UpdateSkypeQueueProperties",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "skypeResponseQueueId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give skype response queue id to update its properties, you can get queue id by calling 'GET /skype/queues'."
            },
            {
              "name": "skypeQueueDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeQueueDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/workflows": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "List Skype Workflows",
          "description": "Get all skype workflows, method will return you list of workflows.",
          "operationId": "SkypeWorkflow_ListSkypeWorkflows",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "workflowName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give workflow name to get filtered list of workflows according to it."
            },
            {
              "name": "sIPAddress",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give SIP address to get filtered list of workflows according to it."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of workflows according to it, you can get organiation id by calling 'GET /organizations/skype'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of workflows according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Add a new Skype Workflow",
          "description": "Add skype workflow, method will return you complete details of recently added workflow.",
          "operationId": "SkypeWorkflow_AddSkypeWorkflow",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/workflows/{workflowId}": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype Workflow Details",
          "description": "Get skype workflow details, method will return you complete details of workflow.",
          "operationId": "SkypeWorkflow_GetSkypeWorkflowDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "workflowId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give workflow id to get its details, you can get workflow id by calling 'GET /skype/workflows'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Delete Skype Workflow",
          "description": "Delete skype workflow, method will return you operation status.",
          "operationId": "SkypeWorkflow_DeleteSkypeWorkflow",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "workflowId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give workflow id to delete it, you can get workflow id by calling 'GET /skype/workflows'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/workflows/{workflowId}/settings": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype Workflow Settings",
          "description": "Get skype workflow settings, method will return you workflow settings.",
          "operationId": "SkypeWorkflow_GetSkypeWorkflowSettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "workflowId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give workflow id to get its settings, you can get workflow id by calling 'GET /skype/workflows'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Skype Workflow Settings",
          "description": "Update skype workflow settings, method will return you operation status.",
          "operationId": "SkypeWorkflow_UpdateSkypeWorkflowSettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "workflowId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give workflow id to update its settings, you can get workflow id by calling 'GET /skype/workflows'."
            },
            {
              "name": "skypeWorkflowSettingsDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowGeneralSettingsDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/workflows/{workflowId}/activation": {
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Workflow Activation Status",
          "description": "Update workflow activation status, method will return you operation status.",
          "operationId": "SkypeWorkflow_UpdateWorkflowActivationStatus",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "workflowId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give workflow id to update its activation status, you can get workflow id by calling 'GET /skype/workflows'."
            },
            {
              "name": "workflowStatusDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowStatusDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/workflows/{workflowId}/federation": {
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Workflow Federation Status",
          "description": "Update workflow federation status, method will return you operation status.",
          "operationId": "SkypeWorkflow_UpdateWorkflowFederationStatus",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "workflowId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give workflow id to update its federation status, you can get workflow id by calling 'GET /skype/workflows'."
            },
            {
              "name": "workflowStatusDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowStatusDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/workflows/{workflowId}/anonymity": {
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Workflow Anonymity Status",
          "description": "Update workflow anonymity status, method will return you operation status.",
          "operationId": "SkypeWorkflow_UpdateWorkflowAnonymityStatus",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "workflowId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give workflow id to update its anonymity status, you can get workflow id by calling 'GET /skype/workflows'."
            },
            {
              "name": "workflowStatusDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowStatusDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype/workflows/{workflowId}/ivr": {
        "put": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Update Workflow IVR Settings",
          "description": "Update workflow IVR settings, method will return you operation status.",
          "operationId": "SkypeWorkflow_UpdateWorkflowIvrSettings",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "workflowId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give workflow id to update its IVR settings, you can get workflow id by calling 'GET /skype/workflows'."
            },
            {
              "name": "skypeWorkflowIvrDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SkypeWorkflowIvrSettingsDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype-server/{serverRoleId}/registrar-pools": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Server Registrar Pools",
          "description": "Get server registrar pools, method will return you server registrar pools.",
          "operationId": "SkypeServer_GetServerRegistrarPools",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered server registrar pools according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeRegistrarPoolListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype-server/{serverRoleId}/registrar-pools/{userId}": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get User Assigned Server Pools",
          "description": "Get user assigned server pools, method will return you user assigned server pools.",
          "operationId": "SkypeServer_GetUserAssignedServerPools",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of user assigned server pools according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of assigned server pools according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeRegistrarPoolListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype-server/{serverRoleId}/time-zones": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Server Time Zones",
          "description": "Get server time zones, method will return you list of server time zones.",
          "operationId": "SkypeServer_GetServerTimeZones",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of server time zones according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeTimeZoneListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype-server/line-uris": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "List User Line URIs",
          "description": "Get all user line URIs, method will return you list of user line URIs.",
          "operationId": "SkypeServer_ListUserLineUris",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of user line URIs according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "organizationId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give organization id to get filtered list of user line URIs according to it, you can get organiation id by calling 'GET /organizations/skype'."
            },
            {
              "name": "userId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of user line URIs according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "lineURI",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give line URI to get filtered list of user line URIs according to it."
            },
            {
              "name": "userOnly",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set userOnly to true to get only used line URIs."
            },
            {
              "name": "notUsed",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set notUsed to true to get only free line URIs."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/LineUriListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype-server/line-uris/{lineUriId}": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Line URI Details",
          "description": "Get line URI details, method will return you line URI details.",
          "operationId": "SkypeServer_GetLineUriDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "lineUriId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give line URI id to get its details, you can get line URI id by calling 'GET /skype-server/line-uris'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/LineUriDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype-server/{serverRoleId}/federated-domains": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Federated Domains",
          "description": "Get federated domains, method will return you list of federated domains.",
          "operationId": "SkypeServer_GetFederatedDomains",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of federated domains according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeFederatedDomainListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype-server/{serverRoleId}/user-policies": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Skype User Policies",
          "description": "Get skype user policies, method will return you list of user policies.",
          "operationId": "SkypeServer_GetSkypeUserPolicies",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of user policies according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeUserPoliciesListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype-server/{serverRoleId}/application-services": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get Server Application Services",
          "description": "Get server application services, method will return you list of server application services.",
          "operationId": "SkypeServer_GetServerApplicationServices",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of server application services according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeApplicationServicesListDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/skype-server/{serverRoleId}/application-services/{userId}": {
        "get": {
          "tags": [
            "Skype for Business"
          ],
          "summary": "Get User Assigned Application Services",
          "description": "Get user assigned application services, method will return you list of user assigned application services.",
          "operationId": "SkypeServer_GetUserAssignedApplicationServices",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverRoleId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server role id to get filtered list of user assigned application services according to it, you can get server role id by calling 'GET /servers/{serverId}/roles'."
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give user id to get filtered list of assigned application services according to it, you can get user id by calling 'GET /panel-users'."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SkypeApplicationServicesListDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "List Virtual Machines",
          "description": "List virtual machines, method will return you list of virtual machines.",
          "operationId": "VirtualMachine_ListVirtualMachines",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "displayName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give display name to get filtered list of virtual machines according to it."
            },
            {
              "name": "serverId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server id to get filtered list of virtual machines according to it, you can get server id by calling 'GET /servers'."
            },
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of virtual machines according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "exactNameMatch",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set true if want to match the display name exactly."
            },
            {
              "name": "providerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give provider name to get filtered list of virtual machines according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/VirtualMachinesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Add a new Virtual Machine",
          "description": "Add virtual machine, method will return you complete details of recently added virtual machine.",
          "operationId": "VirtualMachine_AddVirtualMachine",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddVmDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/AddVmDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "412": {
              "description": "Pre Condition Failed"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Get Virtual Machine Details",
          "description": "Get virtual machine details, method will return you complete details of virtual machine.",
          "operationId": "VirtualMachine_GetVirtualMachineDetails",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to get its details, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "thumbnail",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "Set thumbnail true to get the snapshot of the screen."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/VirtualMachineDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Update Virtual Machine",
          "description": "Update virtual machine details, method will return you complete details of virtual machine.",
          "operationId": "VirtualMachine_UpdateVirtualMachine",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to update its details, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateVmDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/VmAddUpdateResultDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Delete Virtual Machine",
          "description": "Delete virtual machine, method will return you operations status.",
          "operationId": "VirtualMachine_DeleteVirtualMachine",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to delete it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/vlan": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Update VLAN",
          "description": "Update VLAN, method will return you operations status.",
          "operationId": "VirtualMachine_UpdateVLan",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to update its VLAN, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "vLanDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateVLanDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization-server/{serverId}/virtual-machines": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "System Virtual Machines List",
          "description": "Get system virtual machines, method will return you list of system virtual machines.",
          "operationId": "VirtualMachine_SystemVirtualMachinesList",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server id to get filtered list of system virtual machines according to it, you can get server id by calling 'GET /servers'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SystemVirtualMachinesDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization-server/{serverId}/virtual-machines/{virtualMachineGuid}": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Get System Virtual Machine Settings",
          "description": "Get system virtual machine settings, method will return you system virtual machine settings.",
          "operationId": "VirtualMachine_GetSystemVirtualMachineSettings",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "serverId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give server id to get virtual machine settings according to it, you can get server id by calling 'GET /servers'."
            },
            {
              "name": "virtualMachineGuid",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "Give virtual machine GUid to get its settings."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/VirtualMachineDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/ip-addresses": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Get Virtual Machine IP Addresses",
          "description": "Get virtual machine IP addresses, method will return you list of virtual machine IP addresses.",
          "operationId": "VirtualMachine_GetVirtualMachineIpAddresses",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to get virtual machine IP addresses according to it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/VmIpAddressesDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Assign Virtual Machine IP Addresses",
          "description": "Assign virtual machine IP addresses, method will return you operation status.",
          "operationId": "VirtualMachine_AssignVmIpAddresses",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to assign IP address to it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "assignVmIpAddressesDto",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AssignVmIpAddressesDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/ip-addresses/{ipAddressId}": {
        "delete": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Delete Virtual Machine Assigned IP Address",
          "description": "Delete virtual machine assigned IP address, method will return you operation status.",
          "operationId": "VirtualMachine_DeleteVmAssignedIpAddress",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to delete its assigned IP address, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "ipAddressId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give IP address id to unassign it."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/snapshots": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Get all Snapshots",
          "description": "Get all snapshots, method will return you list of snapshots.",
          "operationId": "VirtualMachine_GetAllSnapShots",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to filtered list of snapshots according to it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SnapShotsDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Take Snapshot",
          "description": "Take snapshot, method will return you complete details of recently taken snapshot.",
          "operationId": "VirtualMachine_TakeSnapShot",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to take its snapshot, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "snapshot",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SnapShotDetailDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Added",
              "schema": {
                "$ref": "#/definitions/SnapShotDetailDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/snapshots/{snapShotId}": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Apply Snapshot",
          "description": "Apply snapshot, method will return you operation status.",
          "operationId": "VirtualMachine_ApplySnapShot",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to apply snapshot on it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "snapshot",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SnapShotDetailDto:ApplyRequest"
              }
            },
            {
              "name": "snapShotId",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/snapshots/{snapShotId}": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Get Snapshot Details",
          "description": "Get snapshot details, method will return you snapshot details.",
          "operationId": "VirtualMachine_GetSnapShotDetail",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "snapShotId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give snapshot id to get its details, you can get snapshot id by calling 'GET /virtualization/virtual-machines/{virtualMachineId}/snapshots'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/SnapShotDetailDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/snapshots/{snapshotId}": {
        "delete": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Delete Snapshot",
          "description": "Delete snapshot, method will return you operation status.",
          "operationId": "VirtualMachine_DeleteSnapShot",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to delete snapshot according to it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "snapshotId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give snapshot id to delete it, you can get snapshot id by calling 'GET /virtualization/virtual-machines/{virtualMachineId}/snapshots'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Deleted",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/password": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Change Password",
          "description": "Change password, method will return you operation status.",
          "operationId": "VirtualMachine_ChangePassword",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to change its password, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "changeVmPassword",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ChangeVmPasswordDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/start": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Start Virtual Machine",
          "description": "Start virtual machine, method will return you operation status.",
          "operationId": "VirtualMachine_StartVirtualMachine",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to start it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "412": {
              "description": "Pre Condition Failed"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/pause": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Pause Virtual Machine",
          "description": "Pause virtual machine, method will return you operation status.",
          "operationId": "VirtualMachine_PauseVirtualMachine",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to pause it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/resume": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Resume Virtual Machine",
          "description": "Resume virtual machine, method will return you operation status.",
          "operationId": "VirtualMachine_ResumeVirtualMachine",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to resume it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/reboot": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Reboot Virtual Machine",
          "description": "Reboot virtual machine, method will return you operation status.",
          "operationId": "VirtualMachine_RebootVirtualMachine",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to reboot it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/shutdown": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Shut Down Virtual Machine",
          "description": "Shut down virtual machine, method will return you operation status.",
          "operationId": "VirtualMachine_ShutdownVirtualMachine",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to shut down it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/StatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/importvm": {
        "post": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Import Virtual Machine",
          "description": "Import virtual machine, method will return you complete details of recently imported virtual machine.",
          "operationId": "VirtualMachine_ImportVirtualMachine",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ImportVmDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/VmAddUpdateResultDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/transfer": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Transfer Virtual Machine",
          "description": "Transfer virtual machine, method will return you complete details of recently transfered virtual machine.",
          "operationId": "VirtualMachine_TransferVirtualMachine",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to tranfer it, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TransferVmDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Updated",
              "schema": {
                "$ref": "#/definitions/VirtualMachineDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "412": {
              "description": "Pre Condition Failed"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/state": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Get Virtual Machine Current State",
          "description": "Get virtual machine current state, method will return you virtual machine current state.",
          "operationId": "VirtualMachine_GetVirtualMachineCurrentState",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to get its current state, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/VirtualMachineStatusDto"
              }
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/virtual-machines/{virtualMachineId}/fetchpassword": {
        "put": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Fetch Machine Password",
          "description": "Fetch virtual machine password, method will return you operation status.",
          "operationId": "VirtualMachine_FetchMachinePassword",
          "consumes": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "virtualMachineId",
              "in": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "Give virtual machine id to fetch its password, you can get virtual machine id by calling 'GET /virtualization/virtual-machines'."
            },
            {
              "name": "input",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/FetchMachinePasswordDto:Request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/FetchMachinePasswordDto"
              }
            },
            "400": {
              "description": "Invalid Input Data"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/base-os-types": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Get all Base OS Types",
          "description": "Get all base OS types, method will return you list of base OS types.",
          "operationId": "Resource_GetAllBaseOsTypes",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/BaseOsTypesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
  
      "/virtualization/vlans": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Get all VLANs",
          "description": "Get all VLANs, method will return you list of VLANs.",
          "operationId": "VLANs_GetAllVLANs",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "vLANName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give VLAN name to get filtered list according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/VLANsDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      },
      "/virtualization/os-templates": {
        "get": {
          "tags": [
            "Virtual Machines"
          ],
          "summary": "Get all OS Templates",
          "description": "Get all OS templates, method will return you list of OS templates.",
          "operationId": "OsTemplates_GetAllOsTemplates",
          "consumes": [],
          "produces": [
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
          ],
          "parameters": [
            {
              "name": "ownerId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give owner id to get filtered list of OS templates according to it, you can get owner id by calling 'GET /panel-users'."
            },
            {
              "name": "serverId",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "description": "Give server id to get filtered list of OS templates according to it, you can get server id by calling 'GET /servers'."
            },
            {
              "name": "displayName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give display name to get filtered list of OS templates according to it."
            },
            {
              "name": "baseOsSystemName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give base OS system name to get filtered list of OS templates according to it, you can get base OS system name by calling 'GET /virtualization/base-os-types'."
            },
            {
              "name": "providerName",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Give provider name to get filtered list of OS templates according to it."
            },
            {
              "name": "currentPage",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "1",
              "description": "For paginated results. Default is 1."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": false,
              "type": "integer",
              "format": "int32",
              "default": "10",
              "description": "For page size. Default is 10."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Retrieved",
              "schema": {
                "$ref": "#/definitions/VmOsTemplatesDto"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          },
          "deprecated": false
        }
      }
    },
    "definitions": {
      "ADMoveObjectListDto:Request": {
        "type": "object",
        "properties": {
          "Objects": {
            "type": "array",
            "items": { "$ref": "#/definitions/AdObjectGroupMemberDto:Request" }
          },
          "DestinationOUPath": { "type": "string" }
        }
      },
      "AdObjectMemberofDto:Request": {
        "type": "object",
        "properties": {
          "ObjectDn": { "type": "string" }
        }
      },
      "AdObjectsMemberofListDto:Request": {
        "type": "object",
        "properties": {
          "Objects": {
            "type": "array",
            "items": { "$ref": "#/definitions/AdObjectMemberofDto:Request" }
          },
          "ObjectDn": { "type": "string" }
        }
      },
      "AdObjectMemberofDto": {
        "type": "object",
        "properties": {
          "UserDn": { "type": "string" },
          "ObjectName": { "type": "string" }
  
        }
      },
      "AdObjectsMemberofListDto": {
        "type": "object",
        "properties": {
          "Objects": {
            "type": "array",
            "items": { "$ref": "#/definitions/AdObjectMemberofDto" }
          },
          "ErrorCode": { "type": "string" },
          "ErrorDesc": { "type": "string" }
        }
      },
      "GroupMangaedByDto:Request": {
        "type": "object",
        "properties": {
          "ObjectDn": { "type": "string" },
          "ManagedBy": { "type": "string" }
        }
      },
      "GroupMangaedByDto": {
        "type": "object",
        "properties": {
          "ManagedBy": { "type": "string" },
          "ObjectName": { "type": "string" },
          "ErrorCode": { "type": "string" },
          "ErrorDesc": { "type": "string" }
        }
      },
      "AdObjectDetailsDto": {
        "type": "object",
        "properties": {
          "ObjectDn": { "type": "string" },
          "Protection": { "type": "boolean" }
        }
      },
      "AdObjectGroupMemberDto": {
        "type": "object",
        "properties": {
          "UserDn": { "type": "string" },
          "Protection": { "type": "boolean" },
          "ObjectName": { "type": "string" }
  
        }
      },
      "AdObjectGroupMemberDto:Request": {
        "type": "object",
        "properties": {
          "ObjectDn": { "type": "string" }
        }
      },
      "AdObjectsGroupMemberListDto": {
        "type": "object",
        "properties": {
          "Objects": {
            "type": "array",
            "items": { "$ref": "#/definitions/AdObjectGroupMemberDto" }
          },
          "ErrorCode": { "type": "string" },
          "ErrorDesc": { "type": "string" }
        }
      },
      "AdObjectsGroupMemberListDto:Request": {
        "type": "object",
        "properties": {
          "Objects": {
            "type": "array",
            "items": { "$ref": "#/definitions/AdObjectGroupMemberDto:Request" }
          },
          "ObjectDn": { "type": "string" }
        }
      },
      "ADUserAccountSettingDto:Request": {
        "type": "object",
        "properties": {
          "UserDn": { "type": "string" },
          "SetToNeverExpire": { "type": "boolean" },
          "ExpiryDateTime": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "ADUserAccountSettingDto": {
        "type": "object",
        "properties": {
          "ExpiryDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "SetToNeverExpire": { "type": "boolean" },
          "RequirePasswordOnNextLogon": { "type": "boolean" },
          "ErrorCode": { "type": "string" },
          "ErrorDesc": { "type": "string" }
        }
      },
  
      "AdUsersDto:Request": {
        "type": "object",
        "properties": {
          "AdUsers": {
            "type": "array",
            "items": { "$ref": "#/definitions/AdUserDto:Request" }
          }
        }
      },
      "AdUserDto:Request": {
        "type": "object",
        "properties": {
          "UserDn": { "type": "string" }
        }
      },
      "AdUserPasswordDto": {
        "required": [ "Password" ],
        "type": "object",
        "properties": {
          "Password": { "type": "string" },
          "RequirePasswordOnNextLogon": { "type": "boolean" },
          "UserDn": { "type": "string" }
        }
      },
      "ActiveDirectoryObjectDto": {
        "type": "object",
        "properties": {
          "UpnSuffix": { "type": "string" },
          "SystemName": { "type": "string" },
          "DisplayName": { "type": "string" },
          "Password": { "type": "string" },
          "RequirePasswordOnNextLogon": { "type": "boolean" },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": { "type": "string" },
          "OuPath": { "type": "string" },
          "ErrorCode": { "type": "string" },
          "ErrorDesc": { "type": "string" }
        }
      },
      "ActiveDirectoryObjectDto:Request": {
        "required": [
          "SystemName",
          "DisplayName",
          "OrganizationId",
          "OwnerId"
  
        ],
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": { "type": "string" },
          "SystemName": { "type": "string" },
          "Password": { "type": "string" },
          "UpnSuffix": { "type": "string" }
        }
      },
      "AdObjectsDto": {
        "type": "object",
        "properties": {
          "AdObjects": {
            "type": "array",
            "items": { "$ref": "#/definitions/AdObjectDto:Request" }
          }
        }
      },
      "AdObjectDto:Request": {
        "type": "object",
        "properties": {
          "ObjectDn": { "type": "string" },
          "ObjectType": { "type": "string" }
        }
      },
      "OrganizationObjectsDto": {
        "type": "object",
        "properties": {
          "OrganizationObjects": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrganizationObjectDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "OrganizationObjectDto:List": {
        "type": "object",
        "properties": {
          "Name": { "type": "string" },
          "DistinguishedName": { "type": "string" },
          "Enabled": { "type": "boolean" },
          "ObjectType": { "type": "string" },
          "ObjectDetailedType": { "type": "string" }
        }
      },
      "ADUserGeneralProfileDto": {
        "type": "object",
        "properties": {
          "ObjectType": { "type": "string" },
          "FirstName": { "type": "string" },
          "LastName": { "type": "string" },
          "DisplayName": { "type": "string" },
          "Initials": { "type": "string" },
          "OfficeLocation": { "type": "string" },
          "StreetAddress": { "type": "string" },
          "ZipCode": { "type": "string" },
          "City": { "type": "string" },
          "State": { "type": "string" },
          "CountryId": {
            "format": "int32",
            "type": "integer"
          },
          "CountryAbbreviation": { "type": "string" },
          "JobTitle": { "type": "string" },
          "Company": { "type": "string" },
          "Department": { "type": "string" },
          "BusinessPhone": { "type": "string" },
          "HomePhone": { "type": "string" },
          "MobilePhone": { "type": "string" },
          "Fax": { "type": "string" },
          "WebPage": { "type": "string" },
          "Notes": { "type": "string" },
          "Pager": { "type": "string" },
          "UserManager": { "$ref": "#/definitions/ManagerDto" },
          "ErrorCode": { "type": "string" },
          "ErrorDesc": { "type": "string" }
        }
      },
      "ManagerDto": {
        "type": "object",
        "properties": {
          "Email": { "type": "string" }
        }
      },
  
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AddUserDto": {
        "required": [
          "UserName",
          "EmailAddress",
          "Password"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "pattern": "^[A-Za-z0-9_-]{1,20}$",
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "Password": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UsersSearchDto": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          },
          "IsBilling": {
            "type": "boolean"
          },
          "IsDefaultCreditCardEnabled": {
            "type": "boolean"
          },
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Company": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "DirectChild": {
            "type": "boolean"
          },
          "ExactNameMatch": {
            "type": "boolean"
          },
          "CustomersOnly": {
            "type": "boolean"
          },
          "StaffMembersOnly": {
            "type": "boolean"
          },
          "CurrentPage": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UsersDto": {
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UserDto": {
        "required": [
          "UserName",
          "EmailAddress",
          "Password"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "pattern": "^[A-Za-z0-9_-]{1,20}$",
            "type": "string"
          },
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "RoleName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "IsSubadmin": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          },
          "DisabledBy": {
            "format": "int32",
            "type": "integer"
          },
          "IsDefaultCreditCardEnabled": {
            "type": "boolean"
          },
          "BillingProfileId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UserDto:List": {
        "required": [
          "UserName",
          "EmailAddress",
          "Password"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "pattern": "^[A-Za-z0-9_-]{1,20}$",
            "type": "string"
          },
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "RoleName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "IsSubadmin": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UserUpdateDto": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "Password": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AddUserDto:Request": {
        "required": [
          "UserName",
          "EmailAddress",
          "Password",
          "RoleId"
        ],
        "type": "object",
        "properties": {
          "UserName": {
            "pattern": "^[A-Za-z0-9_-]{1,20}$",
            "type": "string",
            "default": "tom",
            "description": "User name cannot be more than 20 characters long and white space is not allowed."
          },
          "EmailAddress": {
            "type": "string",
            "default": "tom@example.com",
            "description": "Email address should be valid."
          },
          "RoleId": {
            "format": "int32",
            "type": "integer",
            "description": "You can get role id by calling 'GET /user-roles'"
          },
          "Password": {
            "type": "string",
            "description": "Password should be complex, if the password complexity is enabled."
          },
          "Description": {
            "type": "string"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer",
            "description": "Set it true if want to disable user."
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UserUpdateDto:Request": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "type": "string",
            "description": "Password should be complex, if the password complexity is enabled."
          },
          "Description": {
            "type": "string"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer",
            "description": "Set it true if want to disable user."
          }
        }
      },
      "UserDisableOptionDto": {
        "type": "object",
        "properties": {
          "DisableOption": {
            "type": "string",
            "description": "possible values are as follows",
            "enum": [
              "restrictpanelaccess",
              "suspenduser",
              "restrictpanelaccessandsuspenduser"
            ]
          }
        }
      },
      "UserChangePasswordDto": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "type": "string",
            "description": "New password."
          }
        }
      },
      "UserProfileDto:Request": {
        "required": [
          "FirstName",
          "LastName",
          "State",
          "City",
          "StreetAddress",
          "EmailAddress",
          "PhoneNo",
          "Country"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Company": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "Country": {
            "format": "int32",
            "type": "integer"
          },
          "State": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "StreetAddress": {
            "type": "string"
          },
          "StreetAddress2": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "PhoneNo": {
            "type": "string"
          },
          "FaxNo": {
            "type": "string"
          },
          "SocialSecurityNo": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserCustomFieldDto"
            }
          }
        }
      },
      "UserProfileDto": {
        "required": [
          "FirstName",
          "LastName",
          "State",
          "City",
          "StreetAddress",
          "EmailAddress",
          "PhoneNo"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "Company": {
            "type": "string"
          },
          "Country": {
            "format": "int32",
            "type": "integer"
          },
          "State": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "StreetAddress": {
            "type": "string"
          },
          "StreetAddress2": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "PhoneNo": {
            "type": "string"
          },
          "FaxNo": {
            "type": "string"
          },
          "SocialSecurityNo": {
            "type": "string"
          },
          "CustomFieldXml": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserCustomFieldDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UserCustomFieldDto": {
        "type": "object",
        "properties": {
          "CustomFieldId": {
            "format": "int32",
            "type": "integer"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "BillingProfileDto": {
        "required": [
          "FirstName",
          "LastName",
          "BillingAddress",
          "BillingCity",
          "State",
          "ZipCode",
          "BillingPhone",
          "BillingEmail"
        ],
        "type": "object",
        "properties": {
          "BillingProfileId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "BillingAddress": {
            "type": "string"
          },
          "BillingCity": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Country": {
            "format": "int32",
            "type": "integer"
          },
          "ZipCode": {
            "type": "string"
          },
          "BillingPhone": {
            "type": "string"
          },
          "BillingFax": {
            "type": "string"
          },
          "BillingEmail": {
            "type": "string"
          },
          "CreditLimit": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "DefaultDiscount": {
            "format": "double",
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "CreditCardTypeId": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "CreditCardType": {
            "type": "string"
          },
          "CreditCardNo": {
            "type": "string"
          },
          "ExpireDate": {
            "format": "date-time",
            "type": "string"
          },
          "Cvv2": {
            "type": "string"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserCustomFieldDto"
            }
          },
          "CustomFieldXml": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "BillingProfileDto:List": {
        "required": [
          "FirstName",
          "LastName",
          "BillingAddress",
          "BillingCity",
          "State",
          "ZipCode",
          "BillingPhone",
          "BillingEmail"
        ],
        "type": "object",
        "properties": {
          "BillingProfileId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "BillingAddress": {
            "type": "string"
          },
          "BillingCity": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Country": {
            "format": "int32",
            "type": "integer"
          },
          "ZipCode": {
            "type": "string"
          },
          "BillingPhone": {
            "type": "string"
          },
          "BillingFax": {
            "type": "string"
          },
          "BillingEmail": {
            "type": "string"
          },
          "CreditLimit": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "DefaultDiscount": {
            "format": "double",
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "CreditCardTypeId": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "CreditCardType": {
            "type": "string"
          },
          "CreditCardNo": {
            "type": "string"
          },
          "ExpireDate": {
            "format": "date-time",
            "type": "string"
          },
          "Cvv2": {
            "type": "string"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserCustomFieldDto"
            }
          },
          "CustomFieldXml": {
            "type": "string"
          }
        }
      },
      "BillingProfileDto:Request": {
        "required": [
          "FirstName",
          "LastName",
          "BillingAddress",
          "BillingCity",
          "State",
          "ZipCode",
          "BillingPhone",
          "BillingEmail"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "BillingAddress": {
            "type": "string"
          },
          "BillingCity": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Country": {
            "format": "int32",
            "type": "integer"
          },
          "ZipCode": {
            "type": "string"
          },
          "BillingPhone": {
            "type": "string"
          },
          "BillingFax": {
            "type": "string"
          },
          "BillingEmail": {
            "type": "string"
          },
          "CreditLimit": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "DefaultDiscount": {
            "format": "double",
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "CreditCardTypeId": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "CreditCardType": {
            "type": "string"
          },
          "CreditCardNo": {
            "type": "string"
          },
          "ExpireDate": {
            "format": "date-time",
            "type": "string"
          },
          "Cvv2": {
            "type": "string"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserCustomFieldDto"
            }
          },
          "CustomFieldXml": {
            "type": "string"
          }
        }
      },
      "BillingProfileSearchDto": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "defaultOnly": {
            "type": "string"
          },
          "CreditCardTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "IncludeUsersProfile": {
            "type": "boolean"
          },
          "CurrentPage": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "BillingProfilesDto": {
        "type": "object",
        "properties": {
          "BillingProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BillingProfileDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "StatusDto": {
        "type": "object",
        "properties": {
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "StatsListDto": {
        "type": "object",
        "properties": {
          "Stats": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StatsDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "StatsDto": {
        "type": "object",
        "properties": {
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "StatsDto:List": {
        "type": "object",
        "properties": {
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "AuthToken": {
            "type": "string"
          },
          "ExpiresIn": {
            "format": "int32",
            "type": "integer"
          },
          "IssuedOn": {
            "type": "string"
          },
          "IsExpired": {
            "type": "boolean"
          }
        }
      },
      "AuthenticationDto:Request": {
        "required": [
          "LoginName",
          "Password"
        ],
        "type": "object",
        "properties": {
          "LoginName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "ApplicationName": {
            "type": "string",
            "description": "Client Application Name",
            "default": "hcapiconsole"
          },
          "ExpiresIn": {
            "format": "int32",
            "type": "integer",
            "description": "life of token, its value is in hours. Minimum 1 and Maximum 720.",
            "default": "1"
          }
        }
      },
      "AuthenticationDto": {
        "required": [
          "LoginName",
          "Password"
        ],
        "type": "object",
        "properties": {
          "LoginName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "ExpiresIn": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "QuotaReportDto": {
        "type": "object",
        "properties": {
          "ReportResources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/QuotaResourceDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "BillingReportsDto": {
        "type": "object",
        "properties": {
          "BillingReports": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BillingReportDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "BillingReportDto": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "TotalSoldPlans": {
            "format": "int32",
            "type": "integer"
          },
          "TotalInvoices": {
            "format": "int32",
            "type": "integer"
          },
          "Balance": {
            "format": "double",
            "type": "number"
          },
          "TotalInvoiceAmounts": {
            "format": "double",
            "type": "number"
          },
          "TotalPaymentsReceived": {
            "format": "double",
            "type": "number"
          },
          "CreditLimit": {
            "format": "double",
            "type": "number"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "IncomeStatsDto": {
        "type": "object",
        "properties": {
          "TotalInvoiceAmounts": {
            "format": "int32",
            "type": "integer"
          },
          "TotalRevenue": {
            "format": "double",
            "type": "number"
          },
          "IncomeDue": {
            "format": "double",
            "type": "number"
          },
          "TotalPaymentsReceived": {
            "format": "double",
            "type": "number"
          },
          "TotalSubscriptionsCount": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSubscriptionsAmount": {
            "format": "double",
            "type": "number"
          },
          "TotalTaxes": {
            "format": "double",
            "type": "number"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "InvoiceStatsDto": {
        "type": "object",
        "properties": {
          "TotalInvoices": {
            "format": "int32",
            "type": "integer"
          },
          "TotalInvoiceAmounts": {
            "format": "double",
            "type": "number"
          },
          "TotalDueInvoices": {
            "format": "int32",
            "type": "integer"
          },
          "TotalDueInvoicesAmount": {
            "format": "double",
            "type": "number"
          },
          "TotalPaidInvoices": {
            "format": "int32",
            "type": "integer"
          },
          "TotalPaidInvoicesAmount": {
            "format": "double",
            "type": "number"
          },
          "TotalCancelledInvoices": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCancelledInvoicesAmount": {
            "format": "double",
            "type": "number"
          },
          "TotalChargedBackInvoices": {
            "format": "int32",
            "type": "integer"
          },
          "TotalChargedBackInvoicesAmount": {
            "format": "double",
            "type": "number"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "FundsStatsDto": {
        "type": "object",
        "properties": {
          "TotalInvoiceAmounts": {
            "format": "double",
            "type": "number"
          },
          "ConsumedFunds": {
            "format": "double",
            "type": "number"
          },
          "RemainingFunds": {
            "format": "double",
            "type": "number"
          },
          "TotalTaxes": {
            "format": "double",
            "type": "number"
          },
          "TotalPaymentsDone": {
            "format": "double",
            "type": "number"
          },
          "TotalSubscriptionsCount": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSubscriptionsAmount": {
            "format": "double",
            "type": "number"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MailboxStatsReportDto": {
        "type": "object",
        "properties": {
          "TotalMailboxCount": {
            "format": "int32",
            "type": "integer"
          },
          "TotalMailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "TotalEnabledMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalDisabledMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalOWAEnabledMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalIMAPEnabledMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalMAPIEnabledMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalPOPEnabldMailbxoes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalActiveSyncMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalArchiveMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalArchiveMailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "TotalBBEnabledMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalJournalMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalPFMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalADSyncMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailboxReportDto": {
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxType": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "IsNewUser": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "MaildomainName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "ActiveSyncPolicy": {
            "type": "string"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "Flag": {
            "type": "string"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "SAMAccount": {
            "type": "string"
          },
          "PrimarySMTPAddress": {
            "type": "string"
          },
          "Guid": {
            "type": "string"
          },
          "MailboxLitigationHoldEnabled": {
            "type": "boolean"
          },
          "ArchiveMailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailboxReportListDto": {
        "type": "object",
        "properties": {
          "Mailboxes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeMailboxReportDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeCustomReportsDto": {
        "type": "object",
        "properties": {
          "ExchangeCustomReports": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeCustomReportDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeCustomReportDto": {
        "required": [
          "ReportName",
          "ExchangeCommand"
        ],
        "type": "object",
        "properties": {
          "ReportId": {
            "format": "int32",
            "type": "integer"
          },
          "ReportName": {
            "type": "string"
          },
          "ReportDescription": {
            "type": "string"
          },
          "ExchangeCommand": {
            "type": "string"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ExchangeCustomReportOutputFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeGenericReportArgumentsDto"
            }
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeGenericReportArgumentsDto": {
        "type": "object",
        "properties": {
          "FieldName": {
            "type": "string"
          },
          "FieldValue": {
            "type": "string"
          }
        }
      },
      "ExchangeGenericReportListDto": {
        "type": "object",
        "properties": {
          "ReportName": {
            "type": "string"
          },
          "ReportDescription": {
            "type": "string"
          },
          "ExchangeCommand": {
            "type": "string"
          },
          "Records": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "RecordCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ConsumedQuotaResourceDto": {
        "type": "object",
        "properties": {
          "RoleName": {
            "type": "string"
          },
          "ResourceName": {
            "type": "string"
          },
          "ResourceDisplayName": {
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ConsumedQuotaReportDto": {
        "type": "object",
        "properties": {
          "ReportResources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ConsumedQuotaResourceDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DailyResUsageDto": {
        "type": "object",
        "properties": {
          "ResourceName": {
            "type": "string"
          },
          "ResourceDisplayName": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "Usage": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DailyUsageDto"
            }
          }
        }
      },
      "DailyUsageDto": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int64",
            "type": "integer"
          },
          "DateText": {
            "type": "string"
          }
        }
      },
      "DailyResUsageReportDto": {
        "type": "object",
        "properties": {
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DailyResUsageDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "PanelStatsDto": {
        "type": "object",
        "properties": {
          "Customers": {
            "format": "int32",
            "type": "integer"
          },
          "StaffMembers": {
            "format": "int32",
            "type": "integer"
          },
          "ServicePlans": {
            "format": "int32",
            "type": "integer"
          },
          "SoldPlans": {
            "format": "int32",
            "type": "integer"
          },
          "Messages": {
            "format": "int32",
            "type": "integer"
          },
          "ClientTickets": {
            "format": "int32",
            "type": "integer"
          },
          "MyTickets": {
            "format": "int32",
            "type": "integer"
          },
          "SubscribedPlans": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DetailKeyValuePairDto": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "QuotaResourceDto": {
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceName": {
            "type": "string"
          },
          "ResourceDisplayName": {
            "type": "string"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "ResourceComponent": {
            "type": "string"
          },
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          },
          "IsComposite": {
            "type": "boolean"
          },
          "AllocatedQty": {
            "format": "int32",
            "type": "integer"
          },
          "SoldQty": {
            "format": "int32",
            "type": "integer"
          },
          "UsedQty": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "StatesDto": {
        "type": "object",
        "properties": {
          "States": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StateDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "StateDto": {
        "type": "object",
        "properties": {
          "StateId": {
            "format": "int32",
            "type": "integer"
          },
          "StateName": {
            "type": "string"
          },
          "StateCode": {
            "type": "string"
          },
          "CountryId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "CountriesDto": {
        "type": "object",
        "properties": {
          "Countries": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CountryDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CountryDto:List": {
        "type": "object",
        "properties": {
          "CountryId": {
            "format": "int32",
            "type": "integer"
          },
          "CountryName": {
            "type": "string"
          },
          "Abbrivation": {
            "type": "string"
          },
          "NumericCode": {
            "format": "int32",
            "type": "integer"
          },
          "ZipCodeRegex": {
            "type": "string"
          }
        }
      },
      "CountryDto": {
        "type": "object",
        "properties": {
          "CountryId": {
            "format": "int32",
            "type": "integer"
          },
          "CountryName": {
            "type": "string"
          },
          "Abbrivation": {
            "type": "string"
          },
          "NumericCode": {
            "format": "int32",
            "type": "integer"
          },
          "ZipCodeRegex": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "LanguagesDto": {
        "type": "object",
        "properties": {
          "Languages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LanguageDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "LanguageDto": {
        "type": "object",
        "properties": {
          "LanguageId": {
            "format": "int32",
            "type": "integer"
          },
          "LanguageName": {
            "type": "string"
          },
          "LanguageDisplayName": {
            "type": "string"
          },
          "IsRtl": {
            "type": "boolean"
          },
          "LanguageStatus": {
            "type": "boolean"
          }
        }
      },
      "TypesItemsDto": {
        "type": "object",
        "properties": {
          "TypeItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TypeItemsDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "TypeItemsDto": {
        "type": "object",
        "properties": {
          "TypeItemId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "DisplayIndex": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ErrorLogsDto": {
        "type": "object",
        "properties": {
          "ErrorLogs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ErrorLogDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ErrorLogDto:List": {
        "type": "object",
        "properties": {
          "ErrorLogId": {
            "type": "string"
          },
          "SourceName": {
            "type": "string"
          },
          "MethodName": {
            "type": "string"
          },
          "ExpceptionObj": {
            "$ref": "#/definitions/Object"
          },
          "InputParam": {
            "$ref": "#/definitions/Object"
          },
          "ExceptionMsg": {
            "type": "string"
          },
          "ExceptionType": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "ErrorLogDto": {
        "type": "object",
        "properties": {
          "ErrorLogId": {
            "type": "string"
          },
          "SourceName": {
            "type": "string"
          },
          "MethodName": {
            "type": "string"
          },
          "ExpceptionObj": {
            "$ref": "#/definitions/Object"
          },
          "InputParam": {
            "$ref": "#/definitions/Object"
          },
          "ExceptionMsg": {
            "type": "string"
          },
          "ExceptionType": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "Object": {
        "type": "object",
        "properties": {}
      },
      "AuditsDto": {
        "type": "object",
        "properties": {
          "AuditList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuditLogDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AuditLogDto:List": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "AuditLogId": {
            "format": "int32",
            "type": "integer"
          },
          "ActionName": {
            "type": "string"
          },
          "RequestUri": {
            "type": "string"
          },
          "SourceObjectName": {
            "type": "string"
          },
          "SourceObjectId": {
            "format": "int32",
            "type": "integer"
          },
          "SourceObjectType": {
            "type": "string"
          },
          "HttpMethod": {
            "type": "string"
          },
          "HttpResponseCode": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "LastLoginTime": {
            "format": "date-time",
            "type": "string"
          },
          "IPAddress": {
            "type": "string"
          }
        }
      },
      "AuditLogDto": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "AuditLogId": {
            "format": "int32",
            "type": "integer"
          },
          "ActionName": {
            "type": "string"
          },
          "RequestUri": {
            "type": "string"
          },
          "SourceObjectName": {
            "type": "string"
          },
          "SourceObjectId": {
            "format": "int32",
            "type": "integer"
          },
          "SourceObjectType": {
            "type": "string"
          },
          "HttpMethod": {
            "type": "string"
          },
          "HttpResponseCode": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "LastLoginTime": {
            "format": "date-time",
            "type": "string"
          },
          "IPAddress": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CustomFieldsDto": {
        "type": "object",
        "properties": {
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomFieldDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CustomFieldDto:List": {
        "type": "object",
        "properties": {
          "CustomFieldId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "FieldName": {
            "type": "string"
          },
          "ProfileFlag": {
            "type": "string"
          },
          "Optional": {
            "type": "boolean"
          },
          "Tag": {
            "type": "string"
          }
        }
      },
      "CustomFieldDto:AddUpdate": {
        "type": "object",
        "properties": {
          "FieldName": {
            "type": "string"
          },
          "ProfileFlag": {
            "type": "string"
          },
          "Optional": {
            "type": "boolean"
          },
          "Tag": {
            "type": "string"
          }
        }
      },
      "CustomFieldDto": {
        "type": "object",
        "properties": {
          "CustomFieldId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "FieldName": {
            "type": "string"
          },
          "ProfileFlag": {
            "type": "string"
          },
          "Optional": {
            "type": "boolean"
          },
          "Tag": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ConfigurationItemsDto": {
        "type": "object",
        "properties": {
          "ConfigurationItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ConfigurationItemDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ConfigurationItemDto:List": {
        "type": "object",
        "properties": {
          "SystemName": {
            "type": "string"
          },
          "ServerRoleConfigured": {
            "type": "boolean"
          },
          "ControlValues": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ControlValueDto"
            }
          },
          "ItemMetaData": {
            "$ref": "#/definitions/ConfigurationItemMetaDataDto"
          }
        }
      },
      "ConfigurationItemDto": {
        "type": "object",
        "properties": {
          "SystemName": {
            "type": "string"
          },
          "ServerRoleConfigured": {
            "type": "boolean"
          },
          "ControlValues": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ControlValueDto"
            }
          },
          "ItemMetaData": {
            "$ref": "#/definitions/ConfigurationItemMetaDataDto"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ConfigurationItemsInputDto": {
        "type": "object",
        "properties": {
          "ConfigurationItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ConfigurationItemInputDto"
            }
          }
        }
      },
      "ConfigurationItemInputDto": {
        "type": "object",
        "properties": {
          "SystemName": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "ControlValueDto": {
        "type": "object",
        "properties": {
          "Value": {
            "type": "string"
          },
          "IsEnabled": {
            "type": "boolean"
          }
        }
      },
      "ConfigurationItemMetaDataDto": {
        "type": "object",
        "properties": {
          "ConfigurationItemId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "ControlLabel": {
            "type": "string"
          },
          "DefaultValue": {
            "type": "string"
          },
          "DataSource": {
            "type": "string"
          },
          "ControlsTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayIndex": {
            "format": "int32",
            "type": "integer"
          },
          "GroupId": {
            "format": "int32",
            "type": "integer"
          },
          "HelpText": {
            "type": "string"
          },
          "ControlTypeName": {
            "type": "string"
          },
          "RegexPattern": {
            "type": "string"
          },
          "ValidatorType": {
            "type": "string"
          },
          "DependentId": {
            "format": "int32",
            "type": "integer"
          },
          "IsSuperior": {
            "type": "boolean"
          },
          "CssClasses": {
            "type": "string"
          },
          "DependentClasses": {
            "type": "string"
          }
        }
      },
      "LoggingValuesDto:Request": {
        "type": "object",
        "properties": {
          "LoggingKeyvalues": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LoggingValueDto:Request"
            }
          },
          "ServerIp": {
            "type": "string"
          }
        }
      },
      "LoggingValuesDto:Request1": {
        "type": "object",
        "properties": {
          "LoggingKeyvalues": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LoggingValueDto:Request"
            }
          }
        }
      },
      "LoggingValueDto:Request": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "LoggingValuesDto": {
        "type": "object",
        "properties": {
          "LoggingKeyvalues": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LoggingValueDto:List"
            }
          },
          "ServerIp": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "LoggingValueDto:List": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "LoggingValueDto": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "LogFileDto": {
        "type": "object",
        "properties": {
          "ServerIp": {
            "type": "string"
          },
          "LogFileName": {
            "type": "string"
          },
          "LogFilePath": {
            "type": "string"
          },
          "LogFileContent": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SiteproDto:request": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "IsEnable": {
            "type": "boolean"
          },
          "UseHostSettings": {
            "type": "boolean"
          },
          "IsHostEnable": {
            "type": "boolean"
          }
        }
      },
      "SiteproDto": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "IsEnable": {
            "type": "boolean"
          },
          "UseHostSettings": {
            "type": "boolean"
          },
          "IsHostEnable": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SpamExpertsConfigDto:Request": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "MXRecords": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "IsEnable": {
            "type": "boolean"
          },
          "UseHostSettings": {
            "type": "boolean"
          },
          "IsHostEnable": {
            "type": "boolean"
          }
        }
      },
      "SpamExpertsConfigDto": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "MXRecords": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "IsEnable": {
            "type": "boolean"
          },
          "UseHostSettings": {
            "type": "boolean"
          },
          "IsHostEnable": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UsersUsageReportDto": {
        "type": "object",
        "properties": {
          "UsersList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserUsageReportDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UserUsageReportDto:List": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "TotalAllocated": {
            "format": "int32",
            "type": "integer"
          },
          "TotalUsed": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UserUsageReportDto": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "TotalAllocated": {
            "format": "int32",
            "type": "integer"
          },
          "TotalUsed": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DedicatedServerSettingsDto": {
        "type": "object",
        "properties": {
          "AssignedServers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DedicatedServerSettingDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DedicatedServerSettingDto:List": {
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "IsShared": {
            "type": "boolean"
          }
        }
      },
      "DedicatedServerSettingDto": {
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "IsShared": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "LoadBalancerSettingDto:Request": {
        "type": "object",
        "properties": {
          "UserLBSId": {
            "format": "int32",
            "type": "integer"
          },
          "DefaultLBSId": {
            "format": "int32",
            "type": "integer"
          },
          "UserLBSName": {
            "type": "string"
          },
          "DefaultLBSName": {
            "type": "string"
          }
        }
      },
      "DiskUsageReportDto": {
        "type": "object",
        "properties": {
          "DiskReport": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DiskUsageDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DiskUsageDto": {
        "type": "object",
        "properties": {
          "Label": {
            "type": "string"
          },
          "Value": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "BandwidthUsageReportDto": {
        "type": "object",
        "properties": {
          "BandwidthReport": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BandwidthsUsageDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "BandwidthsUsageDto": {
        "type": "object",
        "properties": {
          "Label": {
            "type": "string"
          },
          "Value": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "LoadBalancerSettingDto": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserLBSId": {
            "format": "int32",
            "type": "integer"
          },
          "DefaultLBSId": {
            "format": "int32",
            "type": "integer"
          },
          "UserLBSName": {
            "type": "string"
          },
          "DefaultLBSName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CustomMenusDto": {
        "type": "object",
        "properties": {
          "CustomMenuItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomMenuDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CustomMenuDto:List": {
        "type": "object",
        "properties": {
          "MenuItemId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          },
          "ParentMenuItemId": {
            "format": "int32",
            "type": "integer"
          },
          "ParentMenuItemName": {
            "type": "string"
          },
          "IsMain": {
            "type": "boolean"
          },
          "VisibleToUsers": {
            "type": "string"
          },
          "IconPath": {
            "type": "string"
          },
          "PostHCCredentials": {
            "type": "boolean"
          },
          "UserNameVar": {
            "type": "string"
          },
          "UserPasswordVar": {
            "type": "string"
          },
          "MyUsers": {
            "type": "boolean"
          },
          "AllUsers": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "CustomMenuDto:Request": {
        "required": [
          "DisplayName",
          "Url",
          "ParentMenuItemName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          },
          "ParentMenuItemId": {
            "format": "int32",
            "type": "integer"
          },
          "IsMain": {
            "type": "boolean"
          },
          "VisibleToUsers": {
            "type": "string"
          },
          "IconPath": {
            "type": "string"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "PostHCCredentials": {
            "type": "boolean"
          },
          "UserNameVar": {
            "type": "string"
          },
          "UserPasswordVar": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "MyUsers": {
            "type": "boolean"
          },
          "AllUsers": {
            "type": "boolean"
          },
          "ParentMenuItemName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "CustomMenuDto:UpdateRequest": {
        "required": [
          "DisplayName",
          "Url",
          "ParentMenuItemName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          },
          "ParentMenuItemName": {
            "type": "string"
          },
          "IsMain": {
            "type": "boolean"
          },
          "VisibleToUsers": {
            "type": "string"
          },
          "MyUsers": {
            "type": "boolean"
          },
          "AllUsers": {
            "type": "boolean"
          },
          "PostHCCredentials": {
            "type": "boolean"
          },
          "UserNameVar": {
            "type": "string"
          },
          "UserPasswordVar": {
            "type": "string"
          },
          "IconPath": {
            "type": "string"
          }
        }
      },
      "CustomMenuDto": {
        "required": [
          "DisplayName",
          "Url",
          "ParentMenuItemName"
        ],
        "type": "object",
        "properties": {
          "MenuItemId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          },
          "ParentMenuItemId": {
            "format": "int32",
            "type": "integer"
          },
          "IsMain": {
            "type": "boolean"
          },
          "VisibleToUsers": {
            "type": "string"
          },
          "IconPath": {
            "type": "string"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "PostHCCredentials": {
            "type": "boolean"
          },
          "UserNameVar": {
            "type": "string"
          },
          "UserPasswordVar": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "MyUsers": {
            "type": "boolean"
          },
          "AllUsers": {
            "type": "boolean"
          },
          "ParentMenuItemName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MessageDto:Request": {
        "required": [
          "MessageSubject",
          "MessageDetails"
        ],
        "type": "object",
        "properties": {
          "MessageSubject": {
            "type": "string"
          },
          "MessageDetails": {
            "type": "string"
          },
          "MessagePriorityId": {
            "format": "int32",
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "'0' is for low priority,'1' is for normal priority and '2' is for high priority."
          },
          "AllowReply": {
            "type": "boolean"
          },
          "SendEmail": {
            "type": "boolean"
          },
          "SendToUsers": {
            "type": "string",
            "description": "SendToUsers is a flag it has multiple values 'my' is for my direct child users,'all' is for all child users and 'selected' is for the user ids provided in SelectedUsersList property but it will only accept the ids of child users (owner should have right on the specific user)."
          },
          "MessageStatus": {
            "type": "boolean"
          },
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SelectedUsersList": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "description": "This is the list of userid of the selected users, you can get userid by calling 'Get /panel-users', method will return you 'Invalid Access' if you give the wrong user id or you do not have rights on that user id."
          }
        }
      },
      "MessageDto": {
        "required": [
          "MessageSubject",
          "MessageDetails"
        ],
        "type": "object",
        "properties": {
          "MessageId": {
            "format": "int32",
            "type": "integer"
          },
          "MessageSubject": {
            "type": "string"
          },
          "MessageDetails": {
            "type": "string"
          },
          "MessagePriorityId": {
            "format": "int32",
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "MessagePriorityValue": {
            "type": "string"
          },
          "MessageSentDate": {
            "format": "date-time",
            "type": "string"
          },
          "AllowReply": {
            "type": "boolean"
          },
          "SendEmail": {
            "type": "boolean"
          },
          "MessageIdentifier": {
            "format": "int32",
            "type": "integer"
          },
          "SendToUsers": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MessageStatus": {
            "type": "boolean"
          },
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SelectedUsersList": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MessageDto:List": {
        "required": [
          "MessageSubject",
          "MessageDetails"
        ],
        "type": "object",
        "properties": {
          "MessageId": {
            "format": "int32",
            "type": "integer"
          },
          "MessageSubject": {
            "type": "string"
          },
          "MessageDetails": {
            "type": "string"
          },
          "MessagePriorityId": {
            "format": "int32",
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "MessagePriorityValue": {
            "type": "string"
          },
          "MessageSentDate": {
            "format": "date-time",
            "type": "string"
          },
          "AllowReply": {
            "type": "boolean"
          },
          "SendEmail": {
            "type": "boolean"
          },
          "MessageIdentifier": {
            "format": "int32",
            "type": "integer"
          },
          "SendToUsers": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MessageStatus": {
            "type": "boolean"
          },
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SelectedUsersList": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "MessagesDto": {
        "type": "object",
        "properties": {
          "Messages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MessageDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MessageRepliesDto": {
        "type": "object",
        "properties": {
          "MessageReplies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MessageReplyDto:List"
            }
          },
          "MessageSentToUsers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MessageSentToUsersDto:List"
            }
          },
          "MessageId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "AllowReply": {
            "type": "boolean"
          },
          "MessageSubject": {
            "type": "string"
          },
          "MessageDetails": {
            "type": "string"
          },
          "MessagePriorityId": {
            "format": "int32",
            "type": "integer"
          },
          "MessageSentDate": {
            "format": "date-time",
            "type": "string"
          },
          "MessageStatus": {
            "type": "boolean"
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "SendToUsers": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MessageReplyDto:List": {
        "required": [
          "ReplyDetails"
        ],
        "type": "object",
        "properties": {
          "ReplyId": {
            "format": "int32",
            "type": "integer"
          },
          "MessageId": {
            "format": "int32",
            "type": "integer"
          },
          "FromUserId": {
            "format": "int32",
            "type": "integer"
          },
          "FromUserName": {
            "type": "string"
          },
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "ReplySubject": {
            "type": "string"
          },
          "ReplyDetails": {
            "type": "string"
          },
          "ReplySentDate": {
            "format": "date-time",
            "type": "string"
          },
          "ParentId": {
            "format": "int32",
            "type": "integer"
          },
          "SendToUsers": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "MessageReplyDto:Request": {
        "required": [
          "ReplyDetails"
        ],
        "type": "object",
        "properties": {
          "ReplyDetails": {
            "type": "string"
          }
        }
      },
      "MessageReplyDto": {
        "required": [
          "ReplyDetails"
        ],
        "type": "object",
        "properties": {
          "ReplyId": {
            "format": "int32",
            "type": "integer"
          },
          "MessageId": {
            "format": "int32",
            "type": "integer"
          },
          "FromUserId": {
            "format": "int32",
            "type": "integer"
          },
          "FromUserName": {
            "type": "string"
          },
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "ReplySubject": {
            "type": "string"
          },
          "ReplyDetails": {
            "type": "string"
          },
          "ReplySentDate": {
            "format": "date-time",
            "type": "string"
          },
          "ParentId": {
            "format": "int32",
            "type": "integer"
          },
          "SendToUsers": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MessageSentToUsersDto:List": {
        "type": "object",
        "properties": {
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "ToUsername": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "MessageSentToUsersDto": {
        "type": "object",
        "properties": {
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "ToUsername": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "TroubleTicketsStatsDto": {
        "type": "object",
        "properties": {
          "OpenTickets": {
            "format": "int32",
            "type": "integer"
          },
          "ClosedTickets": {
            "format": "int32",
            "type": "integer"
          },
          "PendingTickets": {
            "format": "int32",
            "type": "integer"
          },
          "TotalTickets": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "TicketsDto": {
        "type": "object",
        "properties": {
          "Tickets": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TicketDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "TicketDto": {
        "required": [
          "Subject",
          "Details",
          "Category"
        ],
        "type": "object",
        "properties": {
          "TicketId": {
            "format": "int32",
            "type": "integer"
          },
          "TicketNumber": {
            "type": "string"
          },
          "FromUserId": {
            "format": "int32",
            "type": "integer"
          },
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "Subject": {
            "type": "string"
          },
          "Details": {
            "type": "string"
          },
          "TicketStatus": {
            "type": "string"
          },
          "Category": {
            "type": "string"
          },
          "Priority": {
            "type": "string"
          },
          "IssueDate": {
            "format": "date-time",
            "type": "string"
          },
          "DateModified": {
            "format": "date-time",
            "type": "string"
          },
          "SendEmail": {
            "type": "boolean"
          },
          "ModifiedBy": {
            "format": "int32",
            "type": "integer"
          },
          "TotalResponses": {
            "format": "int32",
            "type": "integer"
          },
          "ClientName": {
            "type": "string"
          },
          "TicketAttachments": {
            "format": "int32",
            "type": "integer"
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "TicketDto:List": {
        "type": "object",
        "properties": {
          "TicketId": {
            "format": "int32",
            "type": "integer"
          },
          "TicketNumber": {
            "type": "string"
          },
          "FromUserId": {
            "format": "int32",
            "type": "integer"
          },
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "Subject": {
            "type": "string"
          },
          "Details": {
            "type": "string"
          },
          "TicketStatus": {
            "type": "string"
          },
          "Category": {
            "type": "string"
          },
          "Priority": {
            "type": "string"
          },
          "IssueDate": {
            "format": "date-time",
            "type": "string"
          },
          "DateModified": {
            "format": "date-time",
            "type": "string"
          },
          "SendEmail": {
            "type": "boolean"
          },
          "ModifiedBy": {
            "format": "int32",
            "type": "integer"
          },
          "TotalResponses": {
            "format": "int32",
            "type": "integer"
          },
          "ClientName": {
            "type": "string"
          },
          "TicketAttachments": {
            "format": "int32",
            "type": "integer"
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "TicketDto:Update": {
        "type": "object",
        "properties": {
          "TicketNumber": {
            "type": "string"
          },
          "FromUserId": {
            "format": "int32",
            "type": "integer"
          },
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "Subject": {
            "type": "string"
          },
          "Details": {
            "type": "string"
          },
          "TicketStatus": {
            "type": "string"
          },
          "Category": {
            "type": "string"
          },
          "Priority": {
            "type": "string"
          },
          "IssueDate": {
            "format": "date-time",
            "type": "string"
          },
          "DateModified": {
            "format": "date-time",
            "type": "string"
          },
          "SendEmail": {
            "type": "boolean"
          },
          "ClientName": {
            "type": "string"
          },
          "TicketAttachments": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "TicketDto:Request": {
        "type": "object",
        "properties": {
          "TicketNumber": {
            "type": "string"
          },
          "FromUserId": {
            "format": "int32",
            "type": "integer"
          },
          "ToUserId": {
            "format": "int32",
            "type": "integer"
          },
          "Subject": {
            "type": "string"
          },
          "Details": {
            "type": "string"
          },
          "TicketStatus": {
            "type": "string"
          },
          "Category": {
            "type": "string"
          },
          "Priority": {
            "type": "string"
          },
          "IssueDate": {
            "format": "date-time",
            "type": "string"
          },
          "DateModified": {
            "format": "date-time",
            "type": "string"
          },
          "SendEmail": {
            "type": "boolean"
          },
          "ClientName": {
            "type": "string"
          },
          "TicketAttachments": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "TicketResponseDto:Request": {
        "required": [
          "Details"
        ],
        "type": "object",
        "properties": {
          "Details": {
            "type": "string"
          }
        }
      },
      "TicketResponseDto": {
        "required": [
          "Details"
        ],
        "type": "object",
        "properties": {
          "TicketResponseId": {
            "format": "int32",
            "type": "integer"
          },
          "TicketId": {
            "format": "int32",
            "type": "integer"
          },
          "ResponseTitle": {
            "type": "string"
          },
          "ResponderName": {
            "type": "string"
          },
          "Details": {
            "type": "string"
          },
          "ResponderId": {
            "format": "int32",
            "type": "integer"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "IsEscalated": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "TicketResponseDto:List": {
        "type": "object",
        "properties": {
          "TicketResponseId": {
            "format": "int32",
            "type": "integer"
          },
          "TicketId": {
            "format": "int32",
            "type": "integer"
          },
          "ResponseTitle": {
            "type": "string"
          },
          "ResponderName": {
            "type": "string"
          },
          "Details": {
            "type": "string"
          },
          "ResponderId": {
            "format": "int32",
            "type": "integer"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "IsEscalated": {
            "type": "boolean"
          }
        }
      },
      "TicketResponsesDto": {
        "type": "object",
        "properties": {
          "TicketResponses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TicketResponseDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CategoryDto:List": {
        "type": "object",
        "properties": {
          "CategoryId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsInternal": {
            "type": "boolean"
          }
        }
      },
      "CategoryDto:Request": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "CategoryDto": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "CategoryId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsInternal": {
            "type": "boolean"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "DeletedBy": {
            "format": "int32",
            "type": "integer"
          },
          "DateDeleted": {
            "format": "date-time",
            "type": "string"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CategoriesDto": {
        "type": "object",
        "properties": {
          "Categories": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CategoryDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AttachmentsDto": {
        "type": "object",
        "properties": {
          "TicketId": {
            "format": "int32",
            "type": "integer"
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AttachmentDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AttachmentsDto:Request": {
        "type": "object",
        "properties": {
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AttachmentDto:Request"
            }
          }
        }
      },
      "AttachmentDto:Request": {
        "type": "object",
        "properties": {
          "FileData": {
            "type": "string"
          },
          "FileName": {
            "type": "string"
          },
          "FileType": {
            "type": "string"
          },
          "ResponseId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AttachmentDto:List": {
        "type": "object",
        "properties": {
          "AttachmentId": {
            "format": "int32",
            "type": "integer"
          },
          "FileData": {
            "type": "string"
          },
          "FileName": {
            "type": "string"
          },
          "FileType": {
            "type": "string"
          },
          "ResponseId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AttachmentDto:Details": {
        "type": "object",
        "properties": {
          "FileData": {
            "type": "string"
          },
          "FileName": {
            "type": "string"
          },
          "FileType": {
            "type": "string"
          },
          "ResponseId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AttachmentDto": {
        "type": "object",
        "properties": {
          "AttachmentId": {
            "format": "int32",
            "type": "integer"
          },
          "FileData": {
            "type": "string"
          },
          "FileName": {
            "type": "string"
          },
          "FileType": {
            "type": "string"
          },
          "ResponseId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SellAddonsDto": {
        "type": "object",
        "properties": {
          "SoldAddonList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SoldAddOnDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SoldAddOnDto:List": {
        "type": "object",
        "properties": {
          "SoldAddOnId": {
            "format": "int32",
            "type": "integer"
          },
          "SoldPlanId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "PlanName": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "UnitSize": {
            "format": "int32",
            "type": "integer"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "BillingMethod": {
            "type": "string"
          },
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "IsComposite": {
            "type": "boolean"
          }
        }
      },
      "SoldAddOnDto": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "SoldAddOnId": {
            "format": "int32",
            "type": "integer"
          },
          "SoldPlanId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "PlanName": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "UnitSize": {
            "format": "int32",
            "type": "integer"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "BillingMethod": {
            "type": "string"
          },
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "IsComposite": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SoldAddOnBillingDetailDto:Request": {
        "type": "object",
        "properties": {
          "SellableItemTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "AddOnRecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "SetupDiscount": {
            "format": "double",
            "type": "number"
          },
          "RecurringDiscount": {
            "format": "double",
            "type": "number"
          },
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "NextInvoiceDate": {
            "format": "date-time",
            "type": "string"
          },
          "PaidTillDate": {
            "format": "date-time",
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SoldAddOnBillingDetailDto:List": {
        "type": "object",
        "properties": {
          "SoldAddOnId": {
            "format": "int32",
            "type": "integer"
          },
          "SellableItemTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "AddOnRecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "SetupDiscount": {
            "format": "double",
            "type": "number"
          },
          "RecurringDiscount": {
            "format": "double",
            "type": "number"
          },
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "NextInvoiceDate": {
            "format": "date-time",
            "type": "string"
          },
          "PaidTillDate": {
            "format": "date-time",
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SoldAddOnBillingDetailDto": {
        "type": "object",
        "properties": {
          "SoldAddOnId": {
            "format": "int32",
            "type": "integer"
          },
          "SellableItemTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "AddOnRecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "SetupDiscount": {
            "format": "double",
            "type": "number"
          },
          "RecurringDiscount": {
            "format": "double",
            "type": "number"
          },
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "NextInvoiceDate": {
            "format": "date-time",
            "type": "string"
          },
          "PaidTillDate": {
            "format": "date-time",
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SellAddonDto:Request": {
        "type": "object",
        "properties": {
          "SoldPlanId": {
            "format": "int32",
            "type": "integer"
          },
          "AddOns": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AddOnResourcesDto:SellAddon"
            }
          }
        }
      },
      "SellAddonDto": {
        "type": "object",
        "properties": {
          "SoldPlanId": {
            "format": "int32",
            "type": "integer"
          },
          "AddOns": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AddOnResourcesDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AddOnResourcesDto:SellAddon": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer",
            "description": "you can get resource id by calling 'GET /resources'."
          },
          "Quantity": {
            "format": "int32",
            "type": "integer",
            "description": "Number of instance you want to sell."
          },
          "IsComposite": {
            "type": "boolean"
          }
        }
      },
      "AddOnResourcesDto:List": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "IsComposite": {
            "type": "boolean"
          }
        }
      },
      "AddOnResourcesDto": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "IsComposite": {
            "type": "boolean"
          },
          "BillingDetails": {
            "$ref": "#/definitions/SoldAddOnBillingDetailDto:List"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AddUpdateSoldAddOnDto:Request": {
        "type": "object",
        "properties": {
          "BillingDetails": {
            "$ref": "#/definitions/SoldAddOnBillingDetailDto:List"
          }
        }
      },
      "AddUpdateSoldAddOnDto": {
        "type": "object",
        "properties": {
          "SoldAddOnId": {
            "format": "int32",
            "type": "integer"
          },
          "BillingDetails": {
            "$ref": "#/definitions/SoldAddOnBillingDetailDto:List"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CResourcesDto": {
        "type": "object",
        "properties": {
          "CompositeResources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CResourceDto:List": {
        "type": "object",
        "properties": {
          "CompositeResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "CategoryName": {
            "type": "string"
          },
          "IaasRefId": {
            "type": "string"
          },
          "CategoryDisplayName": {
            "type": "string"
          },
          "ProviderName": {
            "type": "string"
          },
          "SoldInstances": {
            "format": "int32",
            "type": "integer"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceDto"
            }
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceComponentDto"
            }
          }
        }
      },
      "CResourceDto:Request": {
        "required": [
          "DisplayName",
          "CategoryName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "CategoryName": {
            "type": "string"
          },
          "CategoryDisplayName": {
            "type": "string"
          },
          "ProviderName": {
            "type": "string"
          },
          "SoldInstances": {
            "format": "int32",
            "type": "integer"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceDto"
            }
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceComponentDto"
            }
          }
        }
      },
      "UpdateCResourceDto:Request": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceDto"
            }
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceComponentDto"
            }
          }
        }
      },
      "UpdateCResourceDto": {
        "required": [
          "DisplayName",
          "CategoryName"
        ],
        "type": "object",
        "properties": {
          "CompositeResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "CategoryName": {
            "type": "string"
          },
          "IaasRefId": {
            "type": "string"
          },
          "CategoryDisplayName": {
            "type": "string"
          },
          "ProviderName": {
            "type": "string"
          },
          "SoldInstances": {
            "format": "int32",
            "type": "integer"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceDto"
            }
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceComponentDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CResourceDto": {
        "required": [
          "DisplayName",
          "CategoryName"
        ],
        "type": "object",
        "properties": {
          "CompositeResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "CategoryName": {
            "type": "string"
          },
          "IaasRefId": {
            "type": "string"
          },
          "CategoryDisplayName": {
            "type": "string"
          },
          "ProviderName": {
            "type": "string"
          },
          "SoldInstances": {
            "format": "int32",
            "type": "integer"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceDto"
            }
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CResourceResourceComponentDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CResourceResourceDto": {
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "CResourceResourceComponentDto": {
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ComponentName": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "HostingServicesDto": {
        "type": "object",
        "properties": {
          "HostingServices": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/HostingServiceDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "HostingServiceDto:List": {
        "type": "object",
        "properties": {
          "HostingServiceId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ServerRole": {
            "type": "string"
          }
        }
      },
      "HostingServiceDto": {
        "type": "object",
        "properties": {
          "HostingServiceId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ServerRole": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ProvidersDto": {
        "type": "object",
        "properties": {
          "ProviderTypes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProviderDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ProviderDto:List": {
        "type": "object",
        "properties": {
          "RoleServerTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "PlatformId": {
            "format": "int32",
            "type": "integer"
          },
          "Platform": {
            "type": "string"
          },
          "ProviderName": {
            "type": "string"
          },
          "ConfiguredOnly": {
            "type": "boolean"
          },
          "KeyValueVerification": {
            "type": "boolean"
          },
          "RefrenceIdRequired": {
            "type": "boolean"
          },
          "Url": {
            "type": "string"
          },
          "HelpText": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "ProviderType": {
            "type": "string"
          }
        }
      },
      "ProviderDto": {
        "type": "object",
        "properties": {
          "RoleServerTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "PlatformId": {
            "format": "int32",
            "type": "integer"
          },
          "Platform": {
            "type": "string"
          },
          "ProviderName": {
            "type": "string"
          },
          "ConfiguredOnly": {
            "type": "boolean"
          },
          "KeyValueVerification": {
            "type": "boolean"
          },
          "RefrenceIdRequired": {
            "type": "boolean"
          },
          "Url": {
            "type": "string"
          },
          "HelpText": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "ProviderType": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResourcesDto": {
        "type": "object",
        "properties": {
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResourceDto:List": {
        "required": [
          "DefaultUnit"
        ],
        "type": "object",
        "properties": {
          "DefaultValue": {
            "format": "int32",
            "type": "integer"
          },
          "DependentOn": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceBehaviourType": {
            "type": "string"
          },
          "ResourceType": {
            "type": "string"
          },
          "ProvisioningTypes": {
            "type": "string"
          },
          "ServerRoleTypes": {
            "type": "string"
          },
          "SupportedRoleProviders": {
            "type": "string"
          },
          "ProviderSelection": {
            "type": "string"
          },
          "Role": {
            "type": "string"
          },
          "DisplayIndex": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceComponentDto:List"
            }
          },
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "Decription": {
            "type": "string"
          },
          "DefaultUnit": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ResourceDto:Request": {
        "required": [
          "DefaultUnit"
        ],
        "type": "object",
        "properties": {
          "DefaultValue": {
            "format": "int32",
            "type": "integer"
          },
          "DependentOn": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceBehaviourType": {
            "type": "string"
          },
          "ResourceType": {
            "type": "string"
          },
          "ProvisioningTypes": {
            "type": "string"
          },
          "ServerRoleTypes": {
            "type": "string"
          },
          "SupportedRoleProviders": {
            "type": "string"
          },
          "ProviderSelection": {
            "type": "string"
          },
          "Role": {
            "type": "string"
          },
          "DisplayIndex": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceComponentDto:List"
            }
          },
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "Decription": {
            "type": "string"
          },
          "DefaultUnit": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ResourceDto": {
        "required": [
          "DefaultUnit"
        ],
        "type": "object",
        "properties": {
          "DefaultValue": {
            "format": "int32",
            "type": "integer"
          },
          "DependentOn": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceBehaviourType": {
            "type": "string"
          },
          "ResourceType": {
            "type": "string"
          },
          "ProvisioningTypes": {
            "type": "string"
          },
          "ServerRoleTypes": {
            "type": "string"
          },
          "SupportedRoleProviders": {
            "type": "string"
          },
          "ProviderSelection": {
            "type": "string"
          },
          "Role": {
            "type": "string"
          },
          "DisplayIndex": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceComponentDto:List"
            }
          },
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "Decription": {
            "type": "string"
          },
          "DefaultUnit": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResourceComponentDto:List": {
        "type": "object",
        "properties": {
          "ComponentId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ComponentProps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceComponentPropDto"
            }
          }
        }
      },
      "ResourceComponentDto": {
        "type": "object",
        "properties": {
          "ComponentId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ComponentProps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceComponentPropDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResourceComponentPropDto": {
        "type": "object",
        "properties": {
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Providers": {
            "type": "string"
          }
        }
      },
      "ResourceBillingDetailsDto": {
        "type": "object",
        "properties": {
          "ItemRecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "DefaultSetupPrice": {
            "format": "double",
            "type": "number"
          },
          "DefaultRecurringPrice": {
            "format": "double",
            "type": "number"
          },
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AddUpdateResourceDto:Request": {
        "required": [
          "DefaultUnit",
          "DisplayName",
          "SystemName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "Decription": {
            "type": "string"
          },
          "DefaultUnit": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AddUpdateResourceDto:UpdateRequest": {
        "required": [
          "DefaultUnit",
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "Decription": {
            "type": "string"
          },
          "DefaultUnit": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AddUpdateResourceDto": {
        "required": [
          "DefaultUnit"
        ],
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "Decription": {
            "type": "string"
          },
          "DefaultUnit": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ItemBillingDetailsDto": {
        "type": "object",
        "properties": {
          "ItemBillingDetailId": {
            "format": "int32",
            "type": "integer"
          },
          "SetupPrice": {
            "format": "double",
            "type": "number"
          },
          "DefaultSetupDiscount": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "DefaultRecurringDiscount": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "PromotionalPrice": {
            "format": "double",
            "type": "number"
          },
          "PromotionalDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "PromotionalDuration": {
            "type": "string"
          },
          "RecurringDurations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ItemRecurringDurationsDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ItemBillingDetailsDto:List": {
        "type": "object",
        "properties": {
          "ItemBillingDetailId": {
            "format": "int32",
            "type": "integer"
          },
          "SetupPrice": {
            "format": "double",
            "type": "number"
          },
          "DefaultSetupDiscount": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "DefaultRecurringDiscount": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "PromotionalPrice": {
            "format": "double",
            "type": "number"
          },
          "PromotionalDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "PromotionalDuration": {
            "type": "string"
          },
          "RecurringDurations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ItemRecurringDurationsDto:List"
            }
          }
        }
      },
      "ItemRecurringDurationsDto:List": {
        "type": "object",
        "properties": {
          "ItemRecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringMonths": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringPrice": {
            "format": "double",
            "type": "number"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "RecurringDuration": {
            "type": "string"
          }
        }
      },
      "ItemRecurringDurationsDto": {
        "type": "object",
        "properties": {
          "ItemRecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringMonths": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringPrice": {
            "format": "double",
            "type": "number"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "RecurringDuration": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "RecurringDurationsDto": {
        "type": "object",
        "properties": {
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringDurations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RecurringDurationDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "RecurringDurationDto:List": {
        "type": "object",
        "properties": {
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Months": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringType": {
            "type": "string"
          }
        }
      },
      "RecurringDurationDto": {
        "type": "object",
        "properties": {
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Months": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringType": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SoldPlansDto": {
        "type": "object",
        "properties": {
          "SoldPlans": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SoldPlanDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SoldPlanDto:List": {
        "type": "object",
        "properties": {
          "PlanId": {
            "format": "int32",
            "type": "integer"
          },
          "PlanName": {
            "type": "string"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "SoldDate": {
            "format": "date-time",
            "type": "string"
          },
          "SoldPlanId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "BillingDetails": {
            "$ref": "#/definitions/SoldPlanBillingDetailDto:Request"
          }
        }
      },
      "SoldPlanDto": {
        "required": [
          "UserName"
        ],
        "type": "object",
        "properties": {
          "PlanId": {
            "format": "int32",
            "type": "integer"
          },
          "PlanName": {
            "type": "string"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "SoldDate": {
            "format": "date-time",
            "type": "string"
          },
          "SoldPlanId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "BillingDetails": {
            "$ref": "#/definitions/SoldPlanBillingDetailDto:Request"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SoldPlanBillingDetailDto": {
        "type": "object",
        "properties": {
          "SoldPlanId": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "SetupDiscount": {
            "format": "double",
            "type": "number"
          },
          "RecurringPrice": {
            "format": "double",
            "type": "number"
          },
          "RecurringDiscount": {
            "format": "double",
            "type": "number"
          },
          "NextInvoiceDate": {
            "format": "date-time",
            "type": "string"
          },
          "PaidTillDate": {
            "format": "date-time",
            "type": "string"
          },
          "DueSince": {
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "PaidStatus": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SoldPlanBillingDetailDto:Request": {
        "type": "object",
        "properties": {
          "SoldPlanId": {
            "format": "int32",
            "type": "integer"
          },
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "SetupDiscount": {
            "format": "double",
            "type": "number"
          },
          "RecurringPrice": {
            "format": "double",
            "type": "number"
          },
          "RecurringDiscount": {
            "format": "double",
            "type": "number"
          },
          "NextInvoiceDate": {
            "format": "date-time",
            "type": "string"
          },
          "PaidTillDate": {
            "format": "date-time",
            "type": "string"
          },
          "DueSince": {
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "PaidStatus": {
            "type": "string"
          }
        }
      },
      "SoldPlanBillingDetailDto:Update": {
        "type": "object",
        "properties": {
          "RecurringDurationId": {
            "format": "int32",
            "type": "integer"
          },
          "SetupDiscount": {
            "format": "double",
            "type": "number"
          },
          "RecurringPrice": {
            "format": "double",
            "type": "number"
          },
          "RecurringDiscount": {
            "format": "double",
            "type": "number"
          },
          "NextInvoiceDate": {
            "format": "date-time",
            "type": "string"
          },
          "PaidTillDate": {
            "format": "date-time",
            "type": "string"
          },
          "DueSince": {
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "PaidStatus": {
            "type": "string"
          }
        }
      },
      "SellPlanDto:Request": {
        "type": "object",
        "properties": {
          "PlanId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "Quantity": {
            "format": "int32",
            "maximum": 999,
            "minimum": 1,
            "type": "integer"
          },
          "BillingDetails": {
            "$ref": "#/definitions/SoldPlanBillingDetailDto:Request"
          }
        }
      },
      "SellPlanDto": {
        "type": "object",
        "properties": {
          "PlanId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "Quantity": {
            "format": "int32",
            "maximum": 999,
            "minimum": 1,
            "type": "integer"
          },
          "BillingDetails": {
            "$ref": "#/definitions/SoldPlanBillingDetailDto"
          }
        }
      },
      "SoldPlansIsDisabled": {
        "type": "object",
        "properties": {
          "IsDisabled": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SoldPlansIsDisabled:Request": {
        "type": "object",
        "properties": {
          "IsDisabled": {
            "type": "boolean"
          }
        }
      },
      "PurchasePlanDto:Request": {
        "type": "object",
        "properties": {
          "PlanId": {
            "format": "int32",
            "type": "integer"
          },
          "Quantity": {
            "format": "int32",
            "maximum": 999,
            "minimum": 1,
            "type": "integer"
          },
          "ItemRecurringDurations": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "PurchasePlanDto": {
        "type": "object",
        "properties": {
          "PlanId": {
            "format": "int32",
            "type": "integer"
          },
          "Quantity": {
            "format": "int32",
            "maximum": 999,
            "minimum": 1,
            "type": "integer"
          },
          "ItemRecurringDurations": {
            "format": "int32",
            "type": "integer"
          },
          "CurrentPage": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "OperationsDto": {
        "type": "object",
        "properties": {
          "DateRequested": {
            "format": "date-time",
            "type": "string"
          },
          "DateCompleted": {
            "format": "date-time",
            "type": "string"
          },
          "ErrorDetail": {
            "type": "string"
          },
          "Flag": {
            "type": "string"
          },
          "QueuedOperationId": {
            "format": "int32",
            "type": "integer"
          },
          "QueuedBy": {
            "format": "int32",
            "type": "integer"
          },
          "SourceId": {
            "format": "int32",
            "type": "integer"
          },
          "SourceName": {
            "type": "string"
          },
          "OperationName": {
            "type": "string"
          },
          "OperationStatus": {
            "type": "string"
          },
          "ConfirmationHash": {
            "type": "string"
          },
          "IsConfirmed": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "OperationsDto:Request": {
        "type": "object",
        "properties": {
          "DateRequested": {
            "format": "date-time",
            "type": "string"
          },
          "DateCompleted": {
            "format": "date-time",
            "type": "string"
          },
          "ErrorDetail": {
            "type": "string"
          },
          "Flag": {
            "type": "string"
          },
          "QueuedOperationId": {
            "format": "int32",
            "type": "integer"
          },
          "QueuedBy": {
            "format": "int32",
            "type": "integer"
          },
          "SourceId": {
            "format": "int32",
            "type": "integer"
          },
          "SourceName": {
            "type": "string"
          },
          "OperationName": {
            "type": "string"
          },
          "OperationStatus": {
            "type": "string"
          },
          "ConfirmationHash": {
            "type": "string"
          },
          "IsConfirmed": {
            "type": "boolean"
          }
        }
      },
      "OperationsDto:List": {
        "type": "object",
        "properties": {
          "DateRequested": {
            "format": "date-time",
            "type": "string"
          },
          "DateCompleted": {
            "format": "date-time",
            "type": "string"
          },
          "ErrorDetail": {
            "type": "string"
          },
          "Flag": {
            "type": "string"
          },
          "QueuedOperationId": {
            "format": "int32",
            "type": "integer"
          },
          "QueuedBy": {
            "format": "int32",
            "type": "integer"
          },
          "SourceId": {
            "format": "int32",
            "type": "integer"
          },
          "SourceName": {
            "type": "string"
          },
          "OperationName": {
            "type": "string"
          },
          "OperationStatus": {
            "type": "string"
          },
          "ConfirmationHash": {
            "type": "string"
          },
          "IsConfirmed": {
            "type": "boolean"
          }
        }
      },
      "QueuedOperationsDto": {
        "type": "object",
        "properties": {
          "QueuedOperations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OperationsDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ServerInfoDto": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Head": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          },
          "MachineName": {
            "type": "string"
          },
          "PrimaryServer": {
            "type": "boolean"
          },
          "ServerIp": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "UserPassword": {
            "type": "string"
          },
          "ReleaseDate": {
            "format": "date-time",
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SystemInfoDto": {
        "type": "object",
        "properties": {
          "BuildNumber": {
            "type": "string"
          },
          "InstallPath": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SystemServicesDto": {
        "type": "object",
        "properties": {
          "SystemServices": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SystemServiceDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SystemServiceDto": {
        "type": "object",
        "properties": {
          "ServiceName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ServiceType": {
            "type": "string"
          },
          "ServiceStatus": {
            "type": "string"
          },
          "ServiceDescription": {
            "type": "string"
          },
          "StartupStatus": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SystemServiceDto:List": {
        "type": "object",
        "properties": {
          "ServiceName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ServiceType": {
            "type": "string"
          },
          "ServiceStatus": {
            "type": "string"
          },
          "ServiceDescription": {
            "type": "string"
          },
          "StartupStatus": {
            "type": "string"
          }
        }
      },
      "SystemServiceDto:Request": {
        "type": "object",
        "properties": {
          "ServiceName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ServiceType": {
            "type": "string"
          },
          "ServiceStatus": {
            "type": "string"
          },
          "ServiceDescription": {
            "type": "string"
          },
          "StartupStatus": {
            "type": "string"
          }
        }
      },
      "UpdateSystemServiceDto": {
        "required": [
          "ServiceName"
        ],
        "type": "object",
        "properties": {
          "ServiceName": {
            "type": "string"
          }
        }
      },
      "EmailsDto": {
        "type": "object",
        "properties": {
          "Emails": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "EmailDto:List": {
        "type": "object",
        "properties": {
          "EmailId": {
            "format": "int32",
            "type": "integer"
          },
          "ToAddress": {
            "type": "string"
          },
          "FromEmailAddress": {
            "type": "string"
          },
          "EMailSubject": {
            "type": "string"
          },
          "EmailType": {
            "type": "string"
          },
          "EmailTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailStatus": {
            "type": "boolean"
          },
          "RetryCount": {
            "format": "int32",
            "type": "integer"
          },
          "SentDate": {
            "format": "date-time",
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CcAddress": {
            "type": "string"
          },
          "BccAddress": {
            "type": "string"
          },
          "EmailBody": {
            "type": "string"
          },
          "EmailErrorDescription": {
            "type": "string"
          },
          "IsRetryReset": {
            "type": "boolean"
          },
          "MailDeliverySettingsId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpPort": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpAuthentication": {
            "type": "boolean"
          },
          "EnableSsl": {
            "type": "boolean"
          },
          "MailDeliveryType": {
            "type": "string"
          },
          "DnsServer": {
            "type": "string"
          },
          "SmtpServer": {
            "type": "string"
          },
          "AuthUser": {
            "type": "string"
          },
          "AuthPassword": {
            "type": "string"
          },
          "FromAddress": {
            "type": "string"
          }
        }
      },
      "EmailDto": {
        "type": "object",
        "properties": {
          "EmailId": {
            "format": "int32",
            "type": "integer"
          },
          "ToAddress": {
            "type": "string"
          },
          "FromEmailAddress": {
            "type": "string"
          },
          "EMailSubject": {
            "type": "string"
          },
          "EmailType": {
            "type": "string"
          },
          "EmailTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailStatus": {
            "type": "boolean"
          },
          "RetryCount": {
            "format": "int32",
            "type": "integer"
          },
          "SentDate": {
            "format": "date-time",
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CcAddress": {
            "type": "string"
          },
          "BccAddress": {
            "type": "string"
          },
          "EmailBody": {
            "type": "string"
          },
          "EmailErrorDescription": {
            "type": "string"
          },
          "IsRetryReset": {
            "type": "boolean"
          },
          "MailDeliverySettingsId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpPort": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpAuthentication": {
            "type": "boolean"
          },
          "EnableSsl": {
            "type": "boolean"
          },
          "MailDeliveryType": {
            "type": "string"
          },
          "DnsServer": {
            "type": "string"
          },
          "SmtpServer": {
            "type": "string"
          },
          "AuthUser": {
            "type": "string"
          },
          "AuthPassword": {
            "type": "string"
          },
          "FromAddress": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "EmailTemplatesDto": {
        "type": "object",
        "properties": {
          "EmailTemplateList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailTemplateDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "EmailTemplateDto": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "EmailTags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailTagsDto"
            }
          },
          "EmailTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "EmailTemplateDto:List": {
        "type": "object",
        "properties": {
          "EmailTags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailTagsDto"
            }
          },
          "EmailTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "EmailTagsDto": {
        "type": "object",
        "properties": {
          "EmailTagId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "ParentName": {
            "type": "string"
          },
          "TypeItemId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "MailSettingsListDto": {
        "type": "object",
        "properties": {
          "MailSettings": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MailSettingsDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MailSettingsDto:List": {
        "type": "object",
        "properties": {
          "TemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "TemplateSystemName": {
            "type": "string"
          },
          "TemplateName": {
            "type": "string"
          },
          "SendMailToAllUsers": {
            "type": "boolean"
          },
          "SendMailToMe": {
            "type": "boolean"
          },
          "CCTo": {
            "pattern": "^\\S+@\\S+\\.\\S+$",
            "type": "string"
          },
          "ToThisUser": {
            "format": "int32",
            "type": "integer"
          },
          "DefaultOn": {
            "type": "boolean"
          }
        }
      },
      "MailSettingsDto": {
        "type": "object",
        "properties": {
          "TemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "TemplateSystemName": {
            "type": "string"
          },
          "TemplateName": {
            "type": "string"
          },
          "SendMailToAllUsers": {
            "type": "boolean"
          },
          "SendMailToMe": {
            "type": "boolean"
          },
          "CCTo": {
            "pattern": "^\\S+@\\S+\\.\\S+$",
            "type": "string"
          },
          "ToThisUser": {
            "format": "int32",
            "type": "integer"
          },
          "DefaultOn": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AdvanceMailSettingsDto": {
        "type": "object",
        "properties": {
          "TemplateName": {
            "type": "string"
          },
          "TemplateSystemName": {
            "type": "string"
          },
          "TemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "UsersList": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "SendMailsToAllUsers": {
            "type": "boolean"
          },
          "DefaultOn": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MailDeliverySettingsDto": {
        "type": "object",
        "properties": {
          "MailDeliverySettingsId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpPort": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpAuthentication": {
            "type": "boolean"
          },
          "EnableSsl": {
            "type": "boolean"
          },
          "MailDeliveryType": {
            "type": "string"
          },
          "DnsServer": {
            "type": "string"
          },
          "SmtpServer": {
            "type": "string"
          },
          "AuthUser": {
            "type": "string"
          },
          "AuthPassword": {
            "type": "string"
          },
          "FromAddress": {
            "type": "string"
          },
          "ToEmailAddress": {
            "type": "string"
          },
          "FromEmailAddress": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MailDeliverySettingsDto:Request": {
        "type": "object",
        "properties": {
          "MailDeliverySettingsId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpPort": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpAuthentication": {
            "type": "boolean"
          },
          "EnableSsl": {
            "type": "boolean"
          },
          "MailDeliveryType": {
            "type": "string"
          },
          "DnsServer": {
            "type": "string"
          },
          "SmtpServer": {
            "type": "string"
          },
          "AuthUser": {
            "type": "string"
          },
          "AuthPassword": {
            "type": "string"
          },
          "FromAddress": {
            "type": "string"
          },
          "ToEmailAddress": {
            "type": "string"
          },
          "FromEmailAddress": {
            "type": "string"
          }
        }
      },
      "MailDeliverySettingsDto:RequestTestmail": {
        "type": "object",
        "properties": {
          "MailDeliverySettingsId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpPort": {
            "format": "int32",
            "type": "integer"
          },
          "SmtpAuthentication": {
            "type": "boolean"
          },
          "EnableSsl": {
            "type": "boolean"
          },
          "MailDeliveryType": {
            "type": "string"
          },
          "DnsServer": {
            "type": "string"
          },
          "SmtpServer": {
            "type": "string"
          },
          "AuthUser": {
            "type": "string"
          },
          "AuthPassword": {
            "type": "string"
          },
          "FromAddress": {
            "type": "string"
          },
          "ToEmailAddress": {
            "type": "string"
          },
          "FromEmailAddress": {
            "type": "string"
          },
          "SendTestEmail": {
            "type": "boolean"
          }
        }
      },
      "NatIpAddressesDto": {
        "type": "object",
        "properties": {
          "NatIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NatIpAddressDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "NatIpAddressDto:List": {
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerName": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "NatId": {
            "format": "int32",
            "type": "integer"
          },
          "ExternalIpAddress": {
            "type": "string"
          },
          "InternalIpAddress": {
            "type": "string"
          },
          "IpType": {
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "type": "integer"
          },
          "IsIPv6": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "NatIpAddressDto:Request": {
        "required": [
          "ExternalIpAddress",
          "InternalIpAddress"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerName": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "ExternalIpAddress": {
            "type": "string"
          },
          "InternalIpAddress": {
            "type": "string"
          },
          "IpType": {
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "type": "integer"
          },
          "IsIPv6": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "NatIpAddressDto": {
        "required": [
          "ExternalIpAddress",
          "InternalIpAddress"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerName": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "NatId": {
            "format": "int32",
            "type": "integer"
          },
          "ExternalIpAddress": {
            "type": "string"
          },
          "InternalIpAddress": {
            "type": "string"
          },
          "IpType": {
            "type": "string"
          },
          "Limit": {
            "format": "int32",
            "type": "integer"
          },
          "IsIPv6": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResellerDnsDto:Request": {
        "type": "object",
        "properties": {
          "PNameServer": {
            "type": "string",
            "description": "Primary Server Name"
          },
          "SNameServer": {
            "type": "string",
            "description": "Secondary Server Name"
          },
          "NameServer3": {
            "type": "string"
          },
          "NameServer4": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          }
        }
      },
      "ResellerDnsDto": {
        "type": "object",
        "properties": {
          "ResellerDnsId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "PNameServer": {
            "type": "string"
          },
          "SNameServer": {
            "type": "string"
          },
          "NameServer3": {
            "type": "string"
          },
          "NameServer4": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DnsZonesDto": {
        "type": "object",
        "properties": {
          "DnsZones": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DnsZoneDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DnsZoneDto:List": {
        "type": "object",
        "properties": {
          "DnsZoneId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "DnsZoneName": {
            "type": "string"
          },
          "IsNameBased": {
            "type": "boolean"
          },
          "ProviderName": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "WebServerIp": {
            "type": "string"
          },
          "MailServerIp": {
            "type": "string"
          },
          "WebsiteType": {
            "type": "string"
          },
          "ZoneSettings": {
            "type": "string"
          },
          "TimeDifference": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "DnsZoneDto:Request": {
        "required": [
          "DnsZoneName",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Give ownerId if want to create DNS zone for your child."
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer",
            "description": "server role id is required to create dns zone, it will be optional if load balancer settings is set to 'AUTO' for resellers and clients."
          },
          "DnsZoneName": {
            "type": "string"
          },
          "ProviderName": {
            "type": "string",
            "description": "provider name is required to create dns zone."
          },
          "WebServerIp": {
            "type": "string"
          },
          "MailServerIp": {
            "type": "string"
          },
          "WebsiteType": {
            "type": "string",
            "description": "WebsiteType have two possible values '0' for ip base and '1' for name base, it is required only in DNSOnly case."
          }
        }
      },
      "DnsZoneDto": {
        "required": [
          "DnsZoneName"
        ],
        "type": "object",
        "properties": {
          "DnsZoneId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "DnsZoneName": {
            "type": "string"
          },
          "IsNameBased": {
            "type": "boolean"
          },
          "ProviderName": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "WebServerIp": {
            "type": "string"
          },
          "MailServerIp": {
            "type": "string"
          },
          "ZoneSettings": {
            "type": "string"
          },
          "TimeDifference": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateDnsZoneDto:Request": {
        "required": [
          "ZoneSettings"
        ],
        "type": "object",
        "properties": {
          "ZoneSettings": {
            "type": "string"
          },
          "SaveReload": {
            "type": "boolean",
            "description": "Set it true if want to reload zone settings after save."
          }
        }
      },
      "UpdateDnsZoneDto": {
        "type": "object",
        "properties": {
          "DnsZoneId": {
            "format": "int32",
            "type": "integer"
          },
          "ZoneSettings": {
            "type": "string"
          },
          "SaveReload": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DatabasesDto": {
        "type": "object",
        "properties": {
          "Databases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DatabaseDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DatabaseDto:List": {
        "type": "object",
        "properties": {
          "DatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "DatabaseName": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "DatabasePath": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteName": {
            "type": "string"
          },
          "InstanceName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "DataFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "LogFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseUserList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DatabaseDto:Request": {
        "required": [
          "DatabaseName",
          "Provider",
          "WebsiteId"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Give ownerId if want to create database for your child."
          },
          "DatabaseName": {
            "type": "string"
          },
          "Provider": {
            "type": "string",
            "description": "Database provider is required to create database."
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer",
            "description": "Website id is required to create database."
          },
          "InstanceName": {
            "type": "string",
            "description": "Give complete instance name with colon(:) separated port number."
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer",
            "description": "Server role id is required to create database."
          },
          "DataFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "LogFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer",
            "description": "Give composite resource id to add database, you can get composite resource id by calling '/composite-resources'."
          },
          "DatabaseUserList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Give the list of database user if want to give permission on this database."
          }
        }
      },
      "DatabaseDto": {
        "required": [
          "DatabaseName",
          "Provider",
          "WebsiteName"
        ],
        "type": "object",
        "properties": {
          "DatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "DatabaseName": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "DatabasePath": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteName": {
            "type": "string"
          },
          "InstanceName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "DataFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "LogFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseUserList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateDatabaseDto:Request": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DataFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "LogFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UpdateDatabaseDto": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DataFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "LogFileSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AssignUserstoDatabaseDto:Request": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseName": {
            "type": "string"
          },
          "DatabaseUserList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "InstanceName": {
            "type": "string",
            "description": "Give complete instance name with colon(:) separated port number."
          },
          "Provider": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AssignUserstoDatabaseDto": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseName": {
            "type": "string"
          },
          "DatabaseUserList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "InstanceName": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DatabaseConnectivityDto": {
        "required": [
          "DatabaseUserName",
          "DatabaseUserPassword"
        ],
        "type": "object",
        "properties": {
          "DatabaseUserName": {
            "type": "string"
          },
          "DatabaseUserPassword": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DatabaseConnectivityDto:Request": {
        "required": [
          "DatabaseUserName",
          "DatabaseUserPassword"
        ],
        "type": "object",
        "properties": {
          "DatabaseUserName": {
            "type": "string"
          },
          "DatabaseUserPassword": {
            "type": "string"
          }
        }
      },
      "ImportDatabaseDto:Request": {
        "required": [
          "DatabaseName",
          "Provider",
          "WebsiteName",
          "InstanceName"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseName": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "DatabaseUserName": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteName": {
            "type": "string"
          },
          "InstanceName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "CreateForMe": {
            "type": "boolean"
          },
          "UserName": {
            "type": "string"
          }
        }
      },
      "ImportDatabaseDto": {
        "required": [
          "DatabaseName",
          "Provider",
          "WebsiteName",
          "InstanceName"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseName": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "DatabaseUserName": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteName": {
            "type": "string"
          },
          "InstanceName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "CreateForMe": {
            "type": "boolean"
          },
          "UserName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DatabaseUsersDto": {
        "type": "object",
        "properties": {
          "DatabaseUsers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DatabaseUserDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DatabaseUserDto": {
        "required": [
          "DatabaseUserName",
          "Password",
          "Provider",
          "InstanceName"
        ],
        "type": "object",
        "properties": {
          "DatabaseUserId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseUserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "Provider": {
            "type": "string"
          },
          "DatabaseList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "InstanceName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "DatabaseName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DatabaseUserDto:List": {
        "type": "object",
        "properties": {
          "DatabaseUserId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseUserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "Provider": {
            "type": "string"
          },
          "DatabaseList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "InstanceName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "DatabaseName": {
            "type": "string"
          }
        }
      },
      "DatabaseUserDto:Request": {
        "required": [
          "DatabaseUserName",
          "Password",
          "Provider",
          "InstanceName",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "DatabaseUserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Give ownerId if want to create database user for your child."
          },
          "Provider": {
            "type": "string"
          },
          "DatabaseList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "InstanceName": {
            "type": "string",
            "description": "Give complete instance name with colon(:) separated port number."
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer",
            "description": "server role id is required to create database user."
          }
        }
      },
      "UpdateDatabaseUserDto": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "DatabaseUserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateDatabaseUserDto:Request": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "DatabaseUserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          }
        }
      },
      "AssignDatabasestoUserDto": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "InstanceName": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "DatabaseUserName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AssignDatabasestoUserDto:Request": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "InstanceName": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "DatabaseUserName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "DatabaseTasksDto": {
        "type": "object",
        "properties": {
          "DatabaseTasks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DatabaseTaskDto:List"
            }
          },
          "DatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DatabaseTaskDto:List": {
        "required": [
          "TaskName"
        ],
        "type": "object",
        "properties": {
          "DatabaseTaskId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "TaskName": {
            "type": "string"
          },
          "DatabaseFilePath": {
            "type": "string"
          },
          "SourceServerId": {
            "format": "int32",
            "type": "integer"
          },
          "TargetServerId": {
            "format": "int32",
            "type": "integer"
          },
          "TaskStatus": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "DateModified": {
            "format": "date-time",
            "type": "string"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "ModifiedBy": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "DatabaseTaskDto": {
        "required": [
          "TaskName"
        ],
        "type": "object",
        "properties": {
          "DatabaseTaskId": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "TaskName": {
            "type": "string"
          },
          "DatabaseFilePath": {
            "type": "string"
          },
          "SourceServerId": {
            "format": "int32",
            "type": "integer"
          },
          "TargetServerId": {
            "format": "int32",
            "type": "integer"
          },
          "TaskStatus": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "DateModified": {
            "format": "date-time",
            "type": "string"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "ModifiedBy": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "RestoreDatabaseDto": {
        "type": "object",
        "properties": {
          "BrowsePath": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "CurrentPage": {
            "format": "int32",
            "type": "integer"
          },
          "PageSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "RestoreDatabaseDto:Request": {
        "type": "object",
        "properties": {
          "BrowsePath": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "LogRotationDto:Request": {
        "type": "object",
        "properties": {
          "ConditionType": {
            "type": "string"
          },
          "ActionType": {
            "type": "string"
          },
          "SizeLimit": {
            "format": "int32",
            "type": "integer"
          },
          "DaysLimit": {
            "format": "int32",
            "type": "integer"
          },
          "FileCountLimit": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "LogRotationDto": {
        "type": "object",
        "properties": {
          "LogRotationId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ConditionType": {
            "type": "string"
          },
          "ActionType": {
            "type": "string"
          },
          "SizeLimit": {
            "format": "int32",
            "type": "integer"
          },
          "DaysLimit": {
            "format": "int32",
            "type": "integer"
          },
          "FileCountLimit": {
            "format": "int32",
            "type": "integer"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "ModifiedBy": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MailDomainDto": {
        "required": [
          "MailDomainName"
        ],
        "type": "object",
        "properties": {
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainName": {
            "type": "string"
          },
          "MailServerIp": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "MailOnly": {
            "type": "boolean"
          },
          "ProviderName": {
            "type": "string"
          },
          "DnsServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteName": {
            "type": "string"
          },
          "AddDns": {
            "type": "boolean"
          },
          "OwnerName": {
            "type": "string"
          },
          "TotalMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "DnsProviderName": {
            "type": "string"
          },
          "MailAccessUrl": {
            "type": "string"
          },
          "MailAdminUrl": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MailDomainDto:List": {
        "required": [
          "MailDomainName"
        ],
        "type": "object",
        "properties": {
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainName": {
            "type": "string"
          },
          "MailServerIp": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "MailOnly": {
            "type": "boolean"
          },
          "ProviderName": {
            "type": "string"
          },
          "DnsServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteName": {
            "type": "string"
          },
          "AddDns": {
            "type": "boolean"
          },
          "OwnerName": {
            "type": "string"
          },
          "TotalMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "DnsProviderName": {
            "type": "string"
          },
          "MailAccessUrl": {
            "type": "string"
          },
          "MailAdminUrl": {
            "type": "string"
          }
        }
      },
      "MailDomainDto:Request": {
        "required": [
          "MailDomainName"
        ],
        "type": "object",
        "properties": {
          "MailDomainName": {
            "type": "string"
          },
          "MailServerIp": {
            "type": "string",
            "description": "Mail server ip is required if want to add DNS zone with mail domain."
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Give ownerId if want to create mail domain for your child."
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer",
            "description": "server role id is required to create mail domain, it will be optional if load balancer settings is set to 'AUTO' for resellers and clients."
          },
          "ProviderName": {
            "type": "string",
            "description": "provider name is required to create mail domain."
          },
          "AddDns": {
            "type": "boolean",
            "description": "Set it true if want to create DNS zone with mail domain."
          },
          "DnsServerRoleId": {
            "format": "int32",
            "type": "integer",
            "description": "DNS server role id is required to create DNS zone if 'AddDns' flag is true, it will be optional if load balancer settings is set to 'AUTO' for resellers and clients."
          },
          "DnsProviderName": {
            "type": "string",
            "description": "If the 'AddDns' flag is true, it will be mandatory to provide the 'DnsProviderName' string."
          }
        }
      },
      "ImportMailDomainDto": {
        "required": [
          "MailDomainName"
        ],
        "type": "object",
        "properties": {
          "MailDomainName": {
            "type": "string"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ImportMailDomainDto:Request": {
        "required": [
          "MailDomainName"
        ],
        "type": "object",
        "properties": {
          "MailDomainName": {
            "type": "string"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "MailBoxDto": {
        "required": [
          "MailBoxName",
          "MailDomainId",
          "Password"
        ],
        "type": "object",
        "properties": {
          "MailBoxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "MailDomainName": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "ForwardAddress": {
            "type": "string"
          },
          "IsDomainAdmin": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MailBoxDto:List": {
        "required": [
          "MailBoxName",
          "MailDomainId",
          "Password"
        ],
        "type": "object",
        "properties": {
          "MailBoxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "MailDomainName": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "ForwardAddress": {
            "type": "string"
          },
          "IsDomainAdmin": {
            "type": "boolean"
          }
        }
      },
      "MailBoxDto:Request": {
        "required": [
          "MailBoxName",
          "Password"
        ],
        "type": "object",
        "properties": {
          "MailBoxName": {
            "type": "string",
            "description": "Mailbox name is required to add mailbox."
          },
          "MailBoxSize": {
            "format": "int32",
            "type": "integer",
            "description": "Mailbox size is required if composite rsource id is less than 1."
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer",
            "description": "Composite resource id is optional."
          },
          "Password": {
            "type": "string",
            "description": "It is good to set complex password, but simple password is also acceptable."
          },
          "ForwardAddress": {
            "type": "string",
            "description": "Email address should be valid."
          },
          "IsDomainAdmin": {
            "type": "boolean",
            "description": "Set it true if want to create admin type mailbox."
          }
        }
      },
      "UpdateMailBoxDto": {
        "required": [
          "MailBoxId"
        ],
        "type": "object",
        "properties": {
          "MailBoxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "ChangePassword": {
            "type": "boolean"
          },
          "Password": {
            "type": "string"
          },
          "ForwardAddress": {
            "type": "string"
          },
          "IsDomainAdmin": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateMailBoxDto:Request": {
        "required": [
          "MailBoxId"
        ],
        "type": "object",
        "properties": {
          "MailBoxName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "ChangePassword": {
            "type": "boolean"
          },
          "Password": {
            "type": "string"
          },
          "ForwardAddress": {
            "type": "string"
          },
          "IsDomainAdmin": {
            "type": "boolean"
          }
        }
      },
      "MailboxAliasDto": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailAddress": {
            "type": "string"
          },
          "MailBoxName": {
            "type": "string"
          },
          "MailDomainName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MailboxAliasDto:List": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailAddress": {
            "type": "string"
          },
          "MailBoxName": {
            "type": "string"
          },
          "MailDomainName": {
            "type": "string"
          }
        }
      },
      "MailboxAliasDto:Request": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailAddress": {
            "type": "string"
          },
          "MailBoxName": {
            "type": "string"
          },
          "MailDomainName": {
            "type": "string"
          }
        }
      },
      "DistributionListDto": {
        "required": [
          "DistributionListName"
        ],
        "type": "object",
        "properties": {
          "DistributionListId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxName": {
            "type": "string"
          },
          "DistributionListName": {
            "type": "string"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainName": {
            "type": "string"
          },
          "MembersList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Members": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DistributionListDto:Update": {
        "required": [
          "DistributionListName"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxName": {
            "type": "string"
          },
          "DistributionListName": {
            "type": "string"
          },
          "MailDomainName": {
            "type": "string"
          },
          "MembersList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Members": {
            "type": "string"
          }
        }
      },
      "DistributionListDto:List": {
        "required": [
          "DistributionListName"
        ],
        "type": "object",
        "properties": {
          "DistributionListId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxName": {
            "type": "string"
          },
          "DistributionListName": {
            "type": "string"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainName": {
            "type": "string"
          },
          "MembersList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Members": {
            "type": "string"
          }
        }
      },
      "DistributionListDto:Request": {
        "required": [
          "DistributionListName"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailBoxName": {
            "type": "string"
          },
          "DistributionListName": {
            "type": "string"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainName": {
            "type": "string"
          },
          "MembersList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Members": {
            "type": "string"
          }
        }
      },
      "WebsiteFileUploadDto": {
        "required": [
          "FileName",
          "BinaryData"
        ],
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string"
          },
          "BasePath": {
            "type": "string"
          },
          "BinaryData": {
            "type": "string"
          }
        }
      },
      "WebsiteIoDto": {
        "required": [
          "ObjectName"
        ],
        "type": "object",
        "properties": {
          "ObjectName": {
            "type": "string"
          },
          "BasePath": {
            "type": "string"
          }
        }
      },
      "WebsiteFileContentDto": {
        "required": [
          "FileName"
        ],
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string"
          },
          "BasePath": {
            "type": "string"
          },
          "TextData": {
            "type": "string"
          }
        }
      },
      "WebsiteObjectRenameDto": {
        "required": [
          "ObjectName",
          "ObjectNewName"
        ],
        "type": "object",
        "properties": {
          "ObjectName": {
            "type": "string"
          },
          "ObjectNewName": {
            "type": "string"
          },
          "BasePath": {
            "type": "string"
          }
        }
      },
      "WebsiteFilesZipDto": {
        "required": [
          "FilesName",
          "ArchieveName"
        ],
        "type": "object",
        "properties": {
          "BasePath": {
            "type": "string"
          },
          "FilesName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ArchieveName": {
            "type": "string"
          }
        }
      },
      "PermissionsDto": {
        "required": [
          "WebsiteId",
          "FolderPath",
          "Trustee",
          "Inheritence",
          "Operation"
        ],
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "FolderPath": {
            "type": "string"
          },
          "Trustee": {
            "type": "string"
          },
          "Inheritence": {
            "type": "string"
          },
          "FinalPermission": {
            "type": "string"
          },
          "Operation": {
            "type": "string"
          },
          "Users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PermissionsToSet": {
            "$ref": "#/definitions/PermissionDto"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "PermissionsDto:Request": {
        "required": [
          "WebsiteId",
          "FolderPath",
          "Trustee",
          "Inheritence",
          "Operation"
        ],
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "FolderPath": {
            "type": "string"
          },
          "Trustee": {
            "type": "string"
          },
          "Inheritence": {
            "type": "string"
          },
          "FinalPermission": {
            "type": "string"
          },
          "Operation": {
            "type": "string"
          },
          "Users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PermissionsToSet": {
            "$ref": "#/definitions/PermissionDto"
          }
        }
      },
      "PermissionDto": {
        "type": "object",
        "properties": {
          "FullControl": {
            "type": "boolean"
          },
          "Modify": {
            "type": "boolean"
          },
          "Read": {
            "type": "boolean"
          },
          "Write": {
            "type": "boolean"
          },
          "Execute": {
            "type": "boolean"
          },
          "Delete": {
            "type": "boolean"
          }
        }
      },
      "MailDomainsDto": {
        "type": "object",
        "properties": {
          "MailDomains": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MailDomainDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SystemMailDomainListDto": {
        "type": "object",
        "properties": {
          "MailDomains": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SystemMailDomainDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SystemMailDomainDto": {
        "type": "object",
        "properties": {
          "MailDomainName": {
            "type": "string"
          }
        }
      },
      "MailBoxesDto": {
        "type": "object",
        "properties": {
          "MailBoxes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MailBoxDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "MailboxAliasesDto": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MailboxAliasDto:List"
            }
          },
          "MailBoxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DistributionListsDto": {
        "type": "object",
        "properties": {
          "DistributionLists": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DistributionListDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "DistributionListMembersDto": {
        "type": "object",
        "properties": {
          "DistributionListName": {
            "type": "string"
          },
          "MailDomainName": {
            "type": "string"
          },
          "ListMembers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "FileFoldersDto": {
        "type": "object",
        "properties": {
          "SubFolderStructure": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FileFolderDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "FileFolderDto": {
        "type": "object",
        "properties": {
          "ObjectType": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "FullPath": {
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastAccessTime": {
            "format": "date-time",
            "type": "string"
          },
          "ModifiedTime": {
            "format": "date-time",
            "type": "string"
          },
          "Size": {
            "format": "double",
            "type": "number"
          },
          "FileData": {
            "type": "string"
          },
          "NewPath": {
            "type": "string"
          },
          "BinaryData": {
            "type": "string"
          },
          "BinaryDataLength": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "FileContentOutDto": {
        "type": "object",
        "properties": {
          "BinaryData": {
            "type": "string"
          },
          "TextData": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UserPermissionsDto": {
        "type": "object",
        "properties": {
          "UserPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserPermissionDto"
            }
          },
          "ModifiedPath": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UserPermissionDto": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "Permission": {
            "type": "string"
          },
          "ApplyTo": {
            "type": "string"
          }
        }
      },
      "ReturnPermissionsStatusDto": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "Permission": {
            "type": "string"
          },
          "ApplyTo": {
            "type": "string"
          },
          "FolderPath": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "WebsitesDto": {
        "type": "object",
        "properties": {
          "Websites": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebsiteDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "WebsiteDto": {
        "required": [
          "OwnerId",
          "ProviderName",
          "WebsiteName"
        ],
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "RootFolderPath": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "DotnetVersion": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "WebsiteState": {
            "type": "string"
          },
          "ExecutePermissions": {
            "type": "boolean"
          },
          "IsNameBased": {
            "type": "boolean"
          },
          "DotNetEnabled": {
            "type": "boolean"
          },
          "PhpEnabled": {
            "type": "boolean"
          },
          "PHPVersion": {
            "type": "string"
          },
          "PerlEnabled": {
            "type": "boolean"
          },
          "ColdFusionEnabled": {
            "type": "boolean"
          },
          "StatsEnabled": {
            "type": "boolean"
          },
          "IsSubDomain": {
            "type": "boolean"
          },
          "Status": {
            "type": "string"
          },
          "ReadPermission": {
            "type": "boolean"
          },
          "WritePermission": {
            "type": "boolean"
          },
          "EnableLogging": {
            "type": "boolean"
          },
          "SubDomain": {
            "type": "boolean"
          },
          "IsDedicated": {
            "type": "boolean"
          },
          "LoggingUpdate": {
            "type": "boolean"
          },
          "ExpiryDate": {
            "format": "date-time",
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "SendMailToUser": {
            "type": "boolean"
          },
          "DiskUsage": {
            "format": "double",
            "type": "number"
          },
          "BandwidthUsage": {
            "format": "double",
            "type": "number"
          },
          "SoftaculousPath": {
            "type": "string"
          },
          "WebsiteName": {
            "type": "string"
          },
          "ServerType": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "AnonymousUser": {
            "type": "string"
          },
          "AnonymousUserPass": {
            "type": "string"
          },
          "VirtualDirectoryName": {
            "type": "string"
          },
          "DefaultDocuments": {
            "type": "string"
          },
          "ApplicationPoolUpdate": {
            "type": "boolean"
          },
          "ApplicationPoolName": {
            "type": "string"
          },
          "VirDirectoryRootPath": {
            "type": "string"
          },
          "HttpRedirect": {
            "type": "string"
          },
          "DirectoryBrowsingUpdate": {
            "type": "boolean"
          },
          "IpAddressUpdate": {
            "type": "boolean"
          },
          "DirectoryBrowsing": {
            "type": "boolean"
          },
          "RedirectExactUrl": {
            "type": "boolean"
          },
          "RedirectChildOnly": {
            "type": "boolean"
          },
          "RedirectPermanent": {
            "type": "boolean"
          },
          "DefaultDocUpdate": {
            "type": "boolean"
          },
          "DefaultDocEnabled": {
            "type": "boolean"
          },
          "AnonymousUpdate": {
            "type": "boolean"
          },
          "IntegratedAuthenticationUpdate": {
            "type": "boolean"
          },
          "AllowAnonymous": {
            "type": "boolean"
          },
          "IntegratedAuthentication": {
            "type": "boolean"
          },
          "HttpRedirectUpdate": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "WebsiteDto:Request": {
        "required": [
          "OwnerId",
          "ProviderName",
          "WebsiteName"
        ],
        "type": "object",
        "properties": {
          "WebsiteName": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Owner id is required if want to add a website for your child reseller or client."
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer",
            "description": "Server role id is required to create website, it will be optional if load balancer settings is set to 'AUTO' for resellers and clients."
          },
          "ProviderName": {
            "type": "string",
            "description": "Provider name is required."
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "IsNameBased": {
            "type": "boolean",
            "description": "Set it true to create name base website."
          },
          "DotNetEnabled": {
            "type": "boolean",
            "description": "Set it true to enable dot net in website."
          },
          "PhpEnabled": {
            "type": "boolean",
            "description": "Set it true to enable php in website."
          },
          "PerlEnabled": {
            "type": "boolean",
            "description": "Set it true to enable perl in website."
          },
          "ColdFusionEnabled": {
            "type": "boolean",
            "description": "Set it true to enable cold fusion in website."
          },
          "StatsEnabled": {
            "type": "boolean",
            "description": "Set it true to enable stats in website."
          },
          "VirtualDirectoryName": {
            "type": "string",
            "description": "Virtual directory name is required if 'IsNameBased' is set true."
          },
          "IsSubDomain": {
            "type": "boolean",
            "description": "Set this flag true to create subdomain."
          },
          "DefaultDocUpdate": {
            "type": "boolean",
            "description": "set this flag true to update default document."
          },
          "DefaultDocuments": {
            "type": "string",
            "description": "Default documents is the comma separated list of file extentions it is required if 'DefaultDocUpdate' is set true."
          },
          "DirectoryBrowsing": {
            "type": "boolean",
            "description": "Set this flag true to enable directory browsing when you want client browsers to display a Web page that lists the contents of a directory when a request does not specify a document name and IIS cannot return a default document."
          },
          "AllowAnonymous": {
            "type": "boolean",
            "description": "Set this flag true to allow anonymous to a website."
          },
          "IntegratedAuthentication": {
            "type": "boolean",
            "description": "Set this flag true to enable integrated windows authentication."
          },
          "CreateFtpUser": {
            "type": "boolean",
            "description": "Set this flag true to create FTP user with website, it is mandatory when provider is 'apache' and PHP handler DSO is not configured."
          },
          "FtpUserName": {
            "type": "string",
            "description": "FTP user name to create with website, it is mandatory when provider is 'apache' and PHP handler DSO is not configured."
          },
          "FtpUserPassword": {
            "type": "string",
            "description": "FTP user password to create with password, it is mandatory when provider is 'apache' and PHP handler DSO is not configured."
          }
        }
      },
      "WebsiteDto:List": {
        "required": [
          "OwnerId",
          "ProviderName",
          "WebsiteName"
        ],
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "RootFolderPath": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "DotnetVersion": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "WebsiteState": {
            "type": "string"
          },
          "ExecutePermissions": {
            "type": "boolean"
          },
          "IsNameBased": {
            "type": "boolean"
          },
          "DotNetEnabled": {
            "type": "boolean"
          },
          "PhpEnabled": {
            "type": "boolean"
          },
          "PHPVersion": {
            "type": "string"
          },
          "PerlEnabled": {
            "type": "boolean"
          },
          "ColdFusionEnabled": {
            "type": "boolean"
          },
          "StatsEnabled": {
            "type": "boolean"
          },
          "IsSubDomain": {
            "type": "boolean"
          },
          "Status": {
            "type": "string"
          },
          "ReadPermission": {
            "type": "boolean"
          },
          "WritePermission": {
            "type": "boolean"
          },
          "EnableLogging": {
            "type": "boolean"
          },
          "SubDomain": {
            "type": "boolean"
          },
          "IsDedicated": {
            "type": "boolean"
          },
          "LoggingUpdate": {
            "type": "boolean"
          },
          "ExpiryDate": {
            "format": "date-time",
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "SendMailToUser": {
            "type": "boolean"
          },
          "DiskUsage": {
            "format": "double",
            "type": "number"
          },
          "BandwidthUsage": {
            "format": "double",
            "type": "number"
          },
          "SoftaculousPath": {
            "type": "string"
          },
          "WebsiteName": {
            "type": "string"
          },
          "ServerType": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "AnonymousUser": {
            "type": "string"
          },
          "AnonymousUserPass": {
            "type": "string"
          },
          "VirtualDirectoryName": {
            "type": "string"
          },
          "DefaultDocuments": {
            "type": "string"
          },
          "ApplicationPoolUpdate": {
            "type": "boolean"
          },
          "ApplicationPoolName": {
            "type": "string"
          },
          "VirDirectoryRootPath": {
            "type": "string"
          },
          "HttpRedirect": {
            "type": "string"
          },
          "DirectoryBrowsingUpdate": {
            "type": "boolean"
          },
          "IpAddressUpdate": {
            "type": "boolean"
          },
          "DirectoryBrowsing": {
            "type": "boolean"
          },
          "RedirectExactUrl": {
            "type": "boolean"
          },
          "RedirectChildOnly": {
            "type": "boolean"
          },
          "RedirectPermanent": {
            "type": "boolean"
          },
          "DefaultDocUpdate": {
            "type": "boolean"
          },
          "DefaultDocEnabled": {
            "type": "boolean"
          },
          "AnonymousUpdate": {
            "type": "boolean"
          },
          "IntegratedAuthenticationUpdate": {
            "type": "boolean"
          },
          "AllowAnonymous": {
            "type": "boolean"
          },
          "IntegratedAuthentication": {
            "type": "boolean"
          },
          "HttpRedirectUpdate": {
            "type": "boolean"
          }
        }
      },
      "WebsiteUpdateDto": {
        "type": "object",
        "properties": {
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "IsNameBased": {
            "type": "boolean"
          },
          "PhpEnabled": {
            "type": "boolean"
          },
          "DotNetEnabled": {
            "type": "boolean"
          },
          "PHPVersion": {
            "type": "string"
          },
          "PerlEnabled": {
            "type": "boolean"
          },
          "ColdFusionEnabled": {
            "type": "boolean"
          },
          "StatsEnabled": {
            "type": "boolean"
          },
          "IpAddress": {
            "type": "string"
          }
        }
      },
      "ServerWebsitesDto": {
        "type": "object",
        "properties": {
          "ServerWebsitesList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ServerWebsiteDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ServerWebsiteDto": {
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteName": {
            "type": "string"
          }
        }
      },
      "ImportWebsiteDto": {
        "required": [
          "ProviderName",
          "WebsiteName"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "WebsiteName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "CreateForMe": {
            "type": "boolean"
          },
          "UserName": {
            "type": "string"
          },
          "IPLessDomain": {
            "type": "boolean"
          },
          "SubDomain": {
            "type": "boolean"
          },
          "MailDomain": {
            "type": "boolean"
          },
          "DNS": {
            "type": "boolean"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "RootFolderPath": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ImportWebsiteDto:Request": {
        "required": [
          "ProviderName",
          "WebsiteName"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "WebsiteName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "CreateForMe": {
            "type": "boolean"
          },
          "UserName": {
            "type": "string"
          },
          "IPLessDomain": {
            "type": "boolean"
          },
          "SubDomain": {
            "type": "boolean"
          },
          "MailDomain": {
            "type": "boolean"
          },
          "DNS": {
            "type": "boolean"
          },
          "RootFolderPath": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ViewStatsDto": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SslsDto": {
        "type": "object",
        "properties": {
          "Ssls": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SslDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SslDto": {
        "required": [
          "WebsiteId",
          "SslName",
          "SslPath"
        ],
        "type": "object",
        "properties": {
          "SslId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "SslName": {
            "type": "string"
          },
          "SslPath": {
            "type": "string"
          },
          "AllowAnonymous": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SslDto:List": {
        "type": "object",
        "properties": {
          "SslId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "SslName": {
            "type": "string"
          },
          "SslPath": {
            "type": "string"
          },
          "AllowAnonymous": {
            "type": "boolean"
          }
        }
      },
      "SslDto:Request": {
        "required": [
          "SslName",
          "SslPath"
        ],
        "type": "object",
        "properties": {
          "SslName": {
            "type": "string"
          },
          "SslPath": {
            "type": "string"
          },
          "AllowAnonymous": {
            "type": "boolean"
          }
        }
      },
      "IPAddressDto": {
        "type": "object",
        "properties": {
          "IPAddress": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "IPAddressDto:Request": {
        "type": "object",
        "properties": {
          "IPAddress": {
            "type": "string"
          }
        }
      },
      "ParkedDomainsDto": {
        "type": "object",
        "properties": {
          "ParkedDomains": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ParkedDomainDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ParkedDomainDto": {
        "required": [
          "ParkedDomainName"
        ],
        "type": "object",
        "properties": {
          "ParkedDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "ParkedDomainName": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ParkedDomainDto:List": {
        "required": [
          "ParkedDomainName"
        ],
        "type": "object",
        "properties": {
          "ParkedDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "ParkedDomainName": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ParkedDomainDto:Request": {
        "required": [
          "ParkedDomainName"
        ],
        "type": "object",
        "properties": {
          "ParkedDomainName": {
            "type": "string"
          }
        }
      },
      "HostHeadersDto": {
        "type": "object",
        "properties": {
          "HostHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/HostHeaderDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "HostHeaderDto": {
        "required": [
          "HostHeaderName"
        ],
        "type": "object",
        "properties": {
          "WebsiteName": {
            "type": "string"
          },
          "HostHeaderName": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "Port": {
            "format": "int32",
            "type": "integer"
          },
          "Prefix": {
            "type": "string"
          },
          "Postfix": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "HostHeaderDto:Request": {
        "required": [
          "HostHeaderName"
        ],
        "type": "object",
        "properties": {
          "WebsiteName": {
            "type": "string"
          },
          "HostHeaderName": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "Port": {
            "format": "int32",
            "type": "integer"
          },
          "Prefix": {
            "type": "string"
          },
          "Postfix": {
            "type": "string"
          }
        }
      },
      "HostHeaderDto:List": {
        "required": [
          "HostHeaderName"
        ],
        "type": "object",
        "properties": {
          "WebsiteName": {
            "type": "string"
          },
          "HostHeaderName": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "Port": {
            "format": "int32",
            "type": "integer"
          },
          "Prefix": {
            "type": "string"
          },
          "Postfix": {
            "type": "string"
          }
        }
      },
      "VirtualDirectoriesDto": {
        "type": "object",
        "properties": {
          "VirtualDirectories": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VirtualDirectoryDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "VirtualDirectoryDto": {
        "required": [
          "VirtualDirectoryName",
          "WebsiteName"
        ],
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualDirectoryName": {
            "type": "string"
          },
          "Exists": {
            "type": "boolean"
          },
          "ManagedRuntimeVersion": {
            "type": "string"
          },
          "IsAppPoolDedicated": {
            "type": "boolean"
          },
          "AllowBasicAuthentication": {
            "type": "boolean"
          },
          "SystemUser": {
            "pattern": "^[A-Za-z0-9_-]{1,10}$",
            "type": "string"
          },
          "SystemUserPass": {
            "type": "string"
          },
          "WebsiteName": {
            "type": "string"
          },
          "ServerType": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "AnonymousUser": {
            "type": "string"
          },
          "AnonymousUserPass": {
            "type": "string"
          },
          "DefaultDocuments": {
            "type": "string"
          },
          "ApplicationPoolUpdate": {
            "type": "boolean"
          },
          "ApplicationPoolName": {
            "type": "string"
          },
          "VirDirectoryRootPath": {
            "type": "string"
          },
          "HttpRedirect": {
            "type": "string"
          },
          "DirectoryBrowsingUpdate": {
            "type": "boolean"
          },
          "IpAddressUpdate": {
            "type": "boolean"
          },
          "DirectoryBrowsing": {
            "type": "boolean"
          },
          "RedirectExactUrl": {
            "type": "boolean"
          },
          "RedirectChildOnly": {
            "type": "boolean"
          },
          "RedirectPermanent": {
            "type": "boolean"
          },
          "DefaultDocUpdate": {
            "type": "boolean"
          },
          "DefaultDocEnabled": {
            "type": "boolean"
          },
          "AnonymousUpdate": {
            "type": "boolean"
          },
          "IntegratedAuthenticationUpdate": {
            "type": "boolean"
          },
          "AllowAnonymous": {
            "type": "boolean"
          },
          "IntegratedAuthentication": {
            "type": "boolean"
          },
          "HttpRedirectUpdate": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "VirtualDirectoryDto:Request": {
        "required": [
          "VirtualDirectoryName",
          "WebsiteName"
        ],
        "type": "object",
        "properties": {
          "VirtualDirectoryName": {
            "type": "string"
          },
          "Exists": {
            "type": "boolean"
          },
          "ManagedRuntimeVersion": {
            "type": "string"
          },
          "IsAppPoolDedicated": {
            "type": "boolean"
          },
          "AllowBasicAuthentication": {
            "type": "boolean"
          },
          "SystemUser": {
            "pattern": "^[A-Za-z0-9_-]{1,10}$",
            "type": "string"
          },
          "SystemUserPass": {
            "type": "string"
          },
          "WebsiteName": {
            "type": "string"
          },
          "ServerType": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "AnonymousUser": {
            "type": "string"
          },
          "AnonymousUserPass": {
            "type": "string"
          },
          "DefaultDocuments": {
            "type": "string"
          },
          "ApplicationPoolUpdate": {
            "type": "boolean"
          },
          "ApplicationPoolName": {
            "type": "string"
          },
          "VirDirectoryRootPath": {
            "type": "string"
          },
          "HttpRedirect": {
            "type": "string"
          },
          "DirectoryBrowsingUpdate": {
            "type": "boolean"
          },
          "IpAddressUpdate": {
            "type": "boolean"
          },
          "DirectoryBrowsing": {
            "type": "boolean"
          },
          "RedirectExactUrl": {
            "type": "boolean"
          },
          "RedirectChildOnly": {
            "type": "boolean"
          },
          "RedirectPermanent": {
            "type": "boolean"
          },
          "DefaultDocUpdate": {
            "type": "boolean"
          },
          "DefaultDocEnabled": {
            "type": "boolean"
          },
          "AnonymousUpdate": {
            "type": "boolean"
          },
          "IntegratedAuthenticationUpdate": {
            "type": "boolean"
          },
          "AllowAnonymous": {
            "type": "boolean"
          },
          "IntegratedAuthentication": {
            "type": "boolean"
          },
          "HttpRedirectUpdate": {
            "type": "boolean"
          }
        }
      },
      "VirtualDirectoryDto:List": {
        "required": [
          "VirtualDirectoryName",
          "WebsiteName"
        ],
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualDirectoryName": {
            "type": "string"
          },
          "Exists": {
            "type": "boolean"
          },
          "ManagedRuntimeVersion": {
            "type": "string"
          },
          "IsAppPoolDedicated": {
            "type": "boolean"
          },
          "AllowBasicAuthentication": {
            "type": "boolean"
          },
          "SystemUser": {
            "pattern": "^[A-Za-z0-9_-]{1,10}$",
            "type": "string"
          },
          "SystemUserPass": {
            "type": "string"
          },
          "WebsiteName": {
            "type": "string"
          },
          "ServerType": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "AnonymousUser": {
            "type": "string"
          },
          "AnonymousUserPass": {
            "type": "string"
          },
          "DefaultDocuments": {
            "type": "string"
          },
          "ApplicationPoolUpdate": {
            "type": "boolean"
          },
          "ApplicationPoolName": {
            "type": "string"
          },
          "VirDirectoryRootPath": {
            "type": "string"
          },
          "HttpRedirect": {
            "type": "string"
          },
          "DirectoryBrowsingUpdate": {
            "type": "boolean"
          },
          "IpAddressUpdate": {
            "type": "boolean"
          },
          "DirectoryBrowsing": {
            "type": "boolean"
          },
          "RedirectExactUrl": {
            "type": "boolean"
          },
          "RedirectChildOnly": {
            "type": "boolean"
          },
          "RedirectPermanent": {
            "type": "boolean"
          },
          "DefaultDocUpdate": {
            "type": "boolean"
          },
          "DefaultDocEnabled": {
            "type": "boolean"
          },
          "AnonymousUpdate": {
            "type": "boolean"
          },
          "IntegratedAuthenticationUpdate": {
            "type": "boolean"
          },
          "AllowAnonymous": {
            "type": "boolean"
          },
          "IntegratedAuthentication": {
            "type": "boolean"
          },
          "HttpRedirectUpdate": {
            "type": "boolean"
          }
        }
      },
      "SysUserChangePasswordDto": {
        "required": [
          "Password",
          "SysUser"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "SysUser": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SysUserChangePasswordDto:Request": {
        "required": [
          "Password",
          "SysUser"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "SysUser": {
            "type": "string"
          }
        }
      },
      "ApplicationPoolsWithVDDto": {
        "type": "object",
        "properties": {
          "ApplicationPools": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ApplicationPoolWithVDDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ApplicationPoolWithVDDto:List": {
        "type": "object",
        "properties": {
          "WebsiteName": {
            "type": "string"
          },
          "VirtualDirectoryName": {
            "type": "string"
          },
          "VirDirectoryRootPath": {
            "type": "string"
          },
          "AppPoolCPUUsage": {
            "format": "int32",
            "type": "integer"
          },
          "AppPoolMemoryUsage": {
            "format": "double",
            "type": "number"
          },
          "ApplicationPoolIdentity": {
            "format": "int32",
            "type": "integer"
          },
          "ApplicationPoolName": {
            "type": "string"
          },
          "ManagedRuntimeVersionUpdate": {
            "type": "boolean"
          },
          "ManagedRuntimeVersion": {
            "type": "string"
          },
          "ManagedPipeLineModeUpdate": {
            "type": "boolean"
          },
          "ManagedPipeLineMode": {
            "type": "string"
          },
          "MaxVirtualMemory": {
            "format": "int64",
            "type": "integer"
          },
          "MaxUsedMemory": {
            "format": "int64",
            "type": "integer"
          },
          "MaxCpuUsage": {
            "format": "int64",
            "type": "integer"
          },
          "CpuUsageRefreshTime": {
            "format": "int32",
            "type": "integer"
          },
          "CpuUsageExceedAction": {
            "format": "int32",
            "type": "integer"
          },
          "CpuUsageRefreshTimeUpdate": {
            "type": "boolean"
          },
          "MaxVirtualMemoryUpdate": {
            "type": "boolean"
          },
          "MaxUsedMemoryUpdate": {
            "type": "boolean"
          },
          "MaxCpuUsageUpdate": {
            "type": "boolean"
          },
          "CpuUsageExceedActionUpdate": {
            "type": "boolean"
          }
        }
      },
      "ApplicationPoolWithVDDto": {
        "type": "object",
        "properties": {
          "WebsiteName": {
            "type": "string"
          },
          "VirtualDirectoryName": {
            "type": "string"
          },
          "VirDirectoryRootPath": {
            "type": "string"
          },
          "AppPoolCPUUsage": {
            "format": "int32",
            "type": "integer"
          },
          "AppPoolMemoryUsage": {
            "format": "double",
            "type": "number"
          },
          "ApplicationPoolIdentity": {
            "format": "int32",
            "type": "integer"
          },
          "ApplicationPoolName": {
            "type": "string"
          },
          "ManagedRuntimeVersionUpdate": {
            "type": "boolean"
          },
          "ManagedRuntimeVersion": {
            "type": "string"
          },
          "ManagedPipeLineModeUpdate": {
            "type": "boolean"
          },
          "ManagedPipeLineMode": {
            "type": "string"
          },
          "MaxVirtualMemory": {
            "format": "int64",
            "type": "integer"
          },
          "MaxUsedMemory": {
            "format": "int64",
            "type": "integer"
          },
          "MaxCpuUsage": {
            "format": "int64",
            "type": "integer"
          },
          "CpuUsageRefreshTime": {
            "format": "int32",
            "type": "integer"
          },
          "CpuUsageExceedAction": {
            "format": "int32",
            "type": "integer"
          },
          "CpuUsageRefreshTimeUpdate": {
            "type": "boolean"
          },
          "MaxVirtualMemoryUpdate": {
            "type": "boolean"
          },
          "MaxUsedMemoryUpdate": {
            "type": "boolean"
          },
          "MaxCpuUsageUpdate": {
            "type": "boolean"
          },
          "CpuUsageExceedActionUpdate": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ApplicationPoolDto": {
        "type": "object",
        "properties": {
          "ApplicationPoolIdentity": {
            "format": "int32",
            "type": "integer"
          },
          "ApplicationPoolName": {
            "type": "string"
          },
          "ManagedRuntimeVersionUpdate": {
            "type": "boolean"
          },
          "ManagedRuntimeVersion": {
            "type": "string"
          },
          "ManagedPipeLineModeUpdate": {
            "type": "boolean"
          },
          "ManagedPipeLineMode": {
            "type": "string"
          },
          "MaxVirtualMemory": {
            "format": "int64",
            "type": "integer"
          },
          "MaxUsedMemory": {
            "format": "int64",
            "type": "integer"
          },
          "MaxCpuUsage": {
            "format": "int64",
            "type": "integer"
          },
          "CpuUsageRefreshTime": {
            "format": "int32",
            "type": "integer"
          },
          "CpuUsageExceedAction": {
            "format": "int32",
            "type": "integer"
          },
          "CpuUsageRefreshTimeUpdate": {
            "type": "boolean"
          },
          "MaxVirtualMemoryUpdate": {
            "type": "boolean"
          },
          "MaxUsedMemoryUpdate": {
            "type": "boolean"
          },
          "MaxCpuUsageUpdate": {
            "type": "boolean"
          },
          "CpuUsageExceedActionUpdate": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ApplicationPoolDto:Request": {
        "type": "object",
        "properties": {
          "ApplicationPoolIdentity": {
            "format": "int32",
            "type": "integer"
          },
          "ApplicationPoolName": {
            "type": "string"
          },
          "ManagedRuntimeVersionUpdate": {
            "type": "boolean"
          },
          "ManagedRuntimeVersion": {
            "type": "string"
          },
          "ManagedPipeLineModeUpdate": {
            "type": "boolean"
          },
          "ManagedPipeLineMode": {
            "type": "string"
          },
          "MaxVirtualMemory": {
            "format": "int64",
            "type": "integer"
          },
          "MaxUsedMemory": {
            "format": "int64",
            "type": "integer"
          },
          "MaxCpuUsage": {
            "format": "int64",
            "type": "integer"
          },
          "CpuUsageRefreshTime": {
            "format": "int32",
            "type": "integer"
          },
          "CpuUsageExceedAction": {
            "format": "int32",
            "type": "integer"
          },
          "CpuUsageRefreshTimeUpdate": {
            "type": "boolean"
          },
          "MaxVirtualMemoryUpdate": {
            "type": "boolean"
          },
          "MaxUsedMemoryUpdate": {
            "type": "boolean"
          },
          "MaxCpuUsageUpdate": {
            "type": "boolean"
          },
          "CpuUsageExceedActionUpdate": {
            "type": "boolean"
          }
        }
      },
      "ApplicationPoolProcessInfoDto": {
        "required": [
          "ApplicationPoolName"
        ],
        "type": "object",
        "properties": {
          "ApplicationPoolName": {
            "type": "string"
          },
          "AppPoolCPUUsage": {
            "format": "int32",
            "type": "integer"
          },
          "AppPoolMemoryUsage": {
            "format": "double",
            "type": "number"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UrlRedirectionDto": {
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "EnableRedirectUrl": {
            "type": "boolean"
          },
          "RedirectUrl": {
            "type": "string"
          },
          "RedirectClientExact": {
            "type": "boolean"
          },
          "RedirectClientBelow": {
            "type": "boolean"
          },
          "RedirectClientPermanent": {
            "type": "boolean"
          },
          "EnableDefaultDoc": {
            "type": "boolean"
          },
          "DefaultDoc": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UrlRedirectionDto:Request": {
        "type": "object",
        "properties": {
          "EnableRedirectUrl": {
            "type": "boolean"
          },
          "RedirectUrl": {
            "type": "string"
          },
          "RedirectClientExact": {
            "type": "boolean"
          },
          "RedirectClientBelow": {
            "type": "boolean"
          },
          "RedirectClientPermanent": {
            "type": "boolean"
          },
          "EnableDefaultDoc": {
            "type": "boolean"
          },
          "DefaultDoc": {
            "type": "string"
          }
        }
      },
      "AccessPermissionDto": {
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "AllowAnonymous": {
            "type": "boolean"
          },
          "IntegratedWindowsAuthentication": {
            "type": "boolean"
          },
          "AccessPermissions": {
            "type": "boolean"
          },
          "EnableLogging": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AccessPermissionDto:Request": {
        "type": "object",
        "properties": {
          "AllowAnonymous": {
            "type": "boolean"
          },
          "IntegratedWindowsAuthentication": {
            "type": "boolean"
          },
          "AccessPermissions": {
            "type": "boolean"
          },
          "EnableLogging": {
            "type": "boolean"
          }
        }
      },
      "CustomErrorsDto": {
        "type": "object",
        "properties": {
          "CustomErrors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomErrorDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CustomErrorDto": {
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteName": {
            "type": "string"
          },
          "HttpError": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Contents": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CustomErrorDto:Request": {
        "type": "object",
        "properties": {
          "WebsiteName": {
            "type": "string"
          },
          "HttpError": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Contents": {
            "type": "string"
          }
        }
      },
      "CustomErrorDto:List": {
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteName": {
            "type": "string"
          },
          "HttpError": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Contents": {
            "type": "string"
          }
        }
      },
      "FtpUsersDto": {
        "type": "object",
        "properties": {
          "FtpUsers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FtpUserDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "FtpUserDto": {
        "required": [
          "UserName",
          "PermittedPath",
          "Password"
        ],
        "type": "object",
        "properties": {
          "FtpUserId": {
            "format": "int32",
            "type": "integer"
          },
          "FtpUserName": {
            "type": "string"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "PermittedPath": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          },
          "Read": {
            "type": "boolean"
          },
          "Write": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "FtpUserDto:List": {
        "required": [
          "UserName",
          "PermittedPath",
          "Password"
        ],
        "type": "object",
        "properties": {
          "FtpUserId": {
            "format": "int32",
            "type": "integer"
          },
          "FtpUserName": {
            "type": "string"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "PermittedPath": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          },
          "Read": {
            "type": "boolean"
          },
          "Write": {
            "type": "boolean"
          }
        }
      },
      "FtpUserDto:Request": {
        "required": [
          "UserName",
          "PermittedPath",
          "Password"
        ],
        "type": "object",
        "properties": {
          "FtpUserName": {
            "type": "string"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "PermittedPath": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          },
          "Read": {
            "type": "boolean"
          },
          "Write": {
            "type": "boolean"
          }
        }
      },
      "UpdateFtpUserPasswordDto": {
        "required": [
          "Password",
          "UserName"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateFtpUserPasswordDto:Request": {
        "required": [
          "Password",
          "UserName"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          }
        }
      },
      "UpdateFtpUserStatusDto": {
        "type": "object",
        "properties": {
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          },
          "Flag": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateFtpUserStatusDto:Request": {
        "type": "object",
        "properties": {
          "IsDisabled": {
            "format": "int32",
            "type": "integer"
          },
          "Flag": {
            "type": "string"
          }
        }
      },
      "UpdateFtpUserPermissionDto": {
        "type": "object",
        "properties": {
          "WebsiteId": {
            "format": "int32",
            "type": "integer"
          },
          "Read": {
            "type": "boolean"
          },
          "Write": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateFtpUserPermissionDto:Request": {
        "type": "object",
        "properties": {
          "Read": {
            "type": "boolean"
          },
          "Write": {
            "type": "boolean"
          }
        }
      },
      "DotNetInstalledVersionsDto": {
        "type": "object",
        "properties": {
          "DotNetInstalledVersions": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ScriptingDto": {
        "type": "object",
        "properties": {
          "VirtualDirectoryName": {
            "type": "string"
          },
          "ManagedRuntimeVersion": {
            "type": "string"
          },
          "PHPVersion": {
            "type": "string"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ScriptingInputModel": {
        "type": "object",
        "properties": {
          "VirtualDirectoryName": {
            "type": "string"
          },
          "DotNetVersion": {
            "type": "string"
          },
          "PHPVersion": {
            "type": "string"
          },
          "IsEnabled": {
            "type": "boolean"
          }
        }
      },
      "SystemUsersDto": {
        "type": "object",
        "properties": {
          "SystemUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeSettingsDto": {
        "type": "object",
        "properties": {
          "ExchangeServerType": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "User": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Host": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADPassword": {
            "type": "string"
          },
          "ParentOU": {
            "type": "string"
          },
          "WebRole": {
            "type": "boolean"
          }
        }
      },
      "OrganizationalUnitListDto": {
        "type": "object",
        "properties": {
          "OrganizationalUnits": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrganizationalUnitDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "OrganizationalUnitDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          }
        }
      },
      "ActiveDirectorySettingsDto": {
        "required": [
          "ServerIp",
          "ADAdmin",
          "ADAdminPassword"
        ],
        "type": "object",
        "properties": {
          "ServerIp": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADAdminPassword": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "RootOrganizationalUnitPath": {
            "type": "string"
          }
        }
      },
      "DomainControllerListDto": {
        "type": "object",
        "properties": {
          "DomainControllers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExgDomainControllerDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExgDomainControllerDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Fqdn": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          }
        }
      },
      "ActiveDirectoryListDto": {
        "type": "object",
        "properties": {
          "ActiveDirectoryList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActiveDirectoryDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ActiveDirectoryDto": {
        "required": [
          "ServerRoleId",
          "DomainController",
          "ADAdmin",
          "ADAdminPassword",
          "RootOU"
        ],
        "type": "object",
        "properties": {
          "ActiveDirectoryTrustId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADAdminPassword": {
            "type": "string"
          },
          "RootOU": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "OrganizationCount": {
            "format": "int32",
            "type": "integer"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ActiveDirectoryDto:Request": {
        "required": [
          "ServerRoleId",
          "DomainController",
          "ADAdmin",
          "ADAdminPassword",
          "RootOU"
        ],
        "type": "object",
        "properties": {
          "ActiveDirectoryTrustId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADAdminPassword": {
            "type": "string"
          },
          "RootOU": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "OrganizationCount": {
            "format": "int32",
            "type": "integer"
          },
          "IsDeleted": {
            "type": "boolean"
          }
        }
      },
      "ActiveDirectoryDto:Add": {
        "required": [
          "ServerRoleId",
          "DomainController",
          "ADAdmin",
          "ADAdminPassword",
          "RootOU"
        ],
        "type": "object",
        "properties": {
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADAdminPassword": {
            "type": "string"
          },
          "RootOU": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "OrganizationCount": {
            "format": "int32",
            "type": "integer"
          },
          "IsDeleted": {
            "type": "boolean"
          }
        }
      },
      "ActiveDirectoryDto:List": {
        "required": [
          "ServerRoleId",
          "DomainController",
          "ADAdmin",
          "ADAdminPassword",
          "RootOU"
        ],
        "type": "object",
        "properties": {
          "ActiveDirectoryTrustId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADAdminPassword": {
            "type": "string"
          },
          "RootOU": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "OrganizationCount": {
            "format": "int32",
            "type": "integer"
          },
          "IsDeleted": {
            "type": "boolean"
          }
        }
      },
      "ActiveDirectoryTrustOrganizationListDto": {
        "required": [
          "ActiveDirectoryTrustId"
        ],
        "type": "object",
        "properties": {
          "Organizations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActiveDirectoryTrustOrganizationDto:List"
            }
          },
          "ActiveDirectoryTrustId": {
            "format": "int32",
            "type": "integer"
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ActiveDirectoryTrustOrganizationListDto:Request": {
        "required": [
          "ActiveDirectoryTrustId"
        ],
        "type": "object",
        "properties": {
          "Organizations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActiveDirectoryTrustOrganizationDto:List"
            }
          },
          "ActiveDirectoryTrustId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ActiveDirectoryTrustOrganizationDto": {
        "required": [
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ActiveDirectoryTrustOrganizationDto:List": {
        "required": [
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          }
        }
      },
      "OrganizationsDto": {
        "type": "object",
        "properties": {
          "Organizations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrganizationDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ADOrganizationsDto": {
        "type": "object",
        "properties": {
          "Organizations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ADOrganizationDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "OrganizationDto": {
        "required": [
          "MailServerType",
          "SystemName"
        ],
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "MailServerType": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "OWAAccess": {
            "type": "string"
          },
          "TotalMailDomains": {
            "format": "int32",
            "type": "integer"
          },
          "TotalMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSharePointSites": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSIPDomains": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSkypeUsers": {
            "format": "int32",
            "type": "integer"
          },
          "IsADSync": {
            "type": "boolean"
          },
          "IsDatabaseSync": {
            "type": "boolean"
          },
          "IsResourceSync": {
            "type": "boolean"
          },
          "Regions": {
            "type": "string"
          },
          "DefaultDomain": {
            "type": "string"
          },
          "AddressLine1": {
            "type": "string"
          },
          "AddressLine2": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ADOrganizationDto:List": {
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": { "type": "string" },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "MailServerType": { "type": "string" },
          "Provider": { "type": "string" },
          "RoleName": { "type": "string" },
          "SystemName": { "type": "string" },
          "TotalAdUsers": {
            "format": "int32",
            "type": "integer"
          },
          "TotalAdGroups": {
            "format": "int32",
            "type": "integer"
          },
          "TotalAdContacts": {
            "format": "int32",
            "type": "integer"
          },
          "SyncLastRunTime": {
            "format": "date-time",
            "type": "string"
          },
          "IsADSync": { "type": "boolean" },
          "IsDatabaseSync": { "type": "boolean" },
          "IsResourceSync": { "type": "boolean" },
          "OUPath": { "type": "string" },
          "ServerName": { "type": "string" },
          "ProfileDefaults": { "type": "string" }
        }
      },
      "OrganizationDto:List": {
        "required": [
          "MailServerType",
          "SystemName"
        ],
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "MailServerType": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "OWAAccess": {
            "type": "string"
          },
          "TotalMailDomains": {
            "format": "int32",
            "type": "integer"
          },
          "TotalMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSharePointSites": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSIPDomains": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSkypeUsers": {
            "format": "int32",
            "type": "integer"
          },
          "IsADSync": {
            "type": "boolean"
          },
          "IsDatabaseSync": {
            "type": "boolean"
          },
          "IsResourceSync": {
            "type": "boolean"
          },
          "Regions": {
            "type": "string"
          },
          "DefaultDomain": {
            "type": "string"
          },
          "AddressLine1": {
            "type": "string"
          },
          "AddressLine2": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        }
      },
      "OrganizationDto:Request": {
        "required": [
          "MailServerType",
          "SystemName"
        ],
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "MailServerType": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "OWAAccess": {
            "type": "string"
          },
          "TotalMailDomains": {
            "format": "int32",
            "type": "integer"
          },
          "TotalMailboxes": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSharePointSites": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSIPDomains": {
            "format": "int32",
            "type": "integer"
          },
          "TotalSkypeUsers": {
            "format": "int32",
            "type": "integer"
          },
          "IsADSync": {
            "type": "boolean"
          },
          "IsDatabaseSync": {
            "type": "boolean"
          },
          "IsResourceSync": {
            "type": "boolean"
          },
          "Regions": {
            "type": "string"
          },
          "DefaultDomain": {
            "type": "string"
          },
          "AddressLine1": {
            "type": "string"
          },
          "AddressLine2": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        }
      },
      "OrganizationDto:Add": {
        "required": [
          "MailServerType",
          "SystemName"
        ],
        "type": "object",
        "properties": {
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "MailServerType": {
            "type": "string"
          },
          "SystemName": {
            "type": "string",
            "description": "Name of the new orgranization."
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Give owner ID in case of creating exchange organization for any descendent user."
          },
          "MailboxDatabaseName": {
            "type": "string",
            "description": "Mailbox database name will be used later in the creation of mailbox. This parameter is optional in case of automatic mailbox database selection in the server settings."
          }
        }
      },
      "SharePointOrganizationDto": {
        "required": [
          "SystemName"
        ],
        "type": "object",
        "properties": {
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DomainName": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ActiveDirectoryOrganizationDto": {
        "required": [ "ServerRoleId", "SystemName" ],
        "type": "object",
        "properties": {
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": { "type": "string" },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationSuffix": { "type": "string" },
          "ErrorCode": { "type": "string" },
          "ErrorDesc": { "type": "string" }
        }
      },
      "ActiveDirectoryOrganizationDto:Request": {
        "required": [ "ServerRoleId", "SystemName", "OwnerId", "OrganizationSuffix" ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": { "type": "string" },
          "OrganizationSuffix": { "type": "string" }
        }
      },
      "ActiveDirectorySubOrganizationDto": {
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OuName": { "type": "string" },
          "ParentOuPath": { "type": "string" },
          "ErrorCode": { "type": "string" },
          "ErrorDesc": { "type": "string" }
        }
      },
      "ActiveDirectorySubOrganizationDto:Request": {
        "required": [ "OuName", "ParentOuPath", "OrganizationId" ],
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OuName": { "type": "string" },
          "ParentOuPath": { "type": "string" }
        }
      },
      "SharePointOrganizationDto:Add": {
        "required": [
          "SystemName"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Give owner id in case of creating sharePoint organization for any descendent user."
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string",
            "description": "Name of the new sharePoint organization."
          },
          "DomainName": {
            "type": "string",
            "description": "Domain name parameter here is used to add UPNSuffix in Organization's OU."
          },
          "Provider": {
            "type": "string"
          }
        }
      },
      "SkypeOrganizationDto": {
        "required": [
          "ServerRoleId",
          "SystemName"
        ],
        "type": "object",
        "properties": {
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DomainName": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeOrganizationDto:Add": {
        "required": [
          "ServerRoleId",
          "SystemName"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Give owner id in case of creating skype organization for any descendent user."
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string",
            "description": "Name of the new skype organization."
          },
          "Provider": {
            "type": "string"
          }
        }
      },
      "ActiveDirectoryUsersListDto": {
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActiveDirectoryUserDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ActiveDirectoryUserDto": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "UserLogin": {
            "type": "string"
          },
          "UserPrincipalName": {
            "type": "string"
          }
        }
      },
      "ExchangeRecipientListDto": {
        "type": "object",
        "properties": {
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeRecipientDto"
            }
          },
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "IsAllSender": {
            "type": "boolean"
          },
          "RecipientId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeRecipientListDto:Request": {
        "type": "object",
        "properties": {
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeRecipientDto"
            }
          },
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "IsAllSender": {
            "type": "boolean"
          },
          "RecipientId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExchangeRecipientDto": {
        "required": [
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "AutoMapping": {
            "type": "string"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExchangeBlockedDomainRuleDto": {
        "type": "object",
        "properties": {
          "BlockedDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "RuleName": {
            "type": "string"
          },
          "SentToScope": {
            "type": "string"
          },
          "FromAddressMatchesPatterns": {
            "type": "string"
          },
          "RejectMessageReasonText": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeBlockedDomainRuleDto:List": {
        "type": "object",
        "properties": {
          "BlockedDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "RuleName": {
            "type": "string"
          },
          "SentToScope": {
            "type": "string"
          },
          "FromAddressMatchesPatterns": {
            "type": "string"
          },
          "RejectMessageReasonText": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExchangeBlockedDomainRuleDto:Request": {
        "type": "object",
        "properties": {
          "SentToScope": {
            "type": "string",
            "description": "You can get possible values of sent to scope by calling 'GET /system-entities/exchange/recipient-locations'.",
            "enum": [
              "NotInOrganization",
              "InOrganization",
              "ExternalPartner",
              "ExternalNonPartner"
            ]
          },
          "FromAddressMatchesPatterns": {
            "type": "string"
          },
          "RejectMessageReasonText": {
            "type": "string"
          }
        }
      },
      "ExchangeBlockedDomainRulesDto": {
        "type": "object",
        "properties": {
          "BlockedDomainRules": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeBlockedDomainRuleDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeBlockedDomainEnableDisableDto": {
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeBlockedDomainEnableDisableDto:Request": {
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean"
          }
        }
      },
      "ExchangeJournalRuleDto": {
        "required": [
          "JournalingMailbox",
          "JournalingMailboxPassword",
          "MailboxSize"
        ],
        "type": "object",
        "properties": {
          "JournalMailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "JournalingMailbox": {
            "type": "string"
          },
          "JournalingMailboxPassword": {
            "type": "string"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "EnableJournalRule": {
            "type": "boolean"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "JournalRuleName": {
            "type": "string"
          },
          "MailboxSize": {
            "type": "string"
          },
          "MailboxQuota": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeJournalRuleDto:Request": {
        "required": [
          "JournalingMailbox",
          "JournalingMailboxPassword",
          "MailboxSize"
        ],
        "type": "object",
        "properties": {
          "JournalingMailbox": {
            "type": "string"
          },
          "JournalingMailboxPassword": {
            "type": "string"
          },
          "MailboxSize": {
            "type": "string"
          }
        }
      },
      "ExchangeJournalRuleDto:List": {
        "required": [
          "JournalingMailbox",
          "JournalingMailboxPassword",
          "MailboxSize"
        ],
        "type": "object",
        "properties": {
          "JournalMailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "JournalingMailbox": {
            "type": "string"
          },
          "JournalingMailboxPassword": {
            "type": "string"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "EnableJournalRule": {
            "type": "boolean"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "JournalRuleName": {
            "type": "string"
          },
          "MailboxSize": {
            "type": "string"
          },
          "MailboxQuota": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExchangeJournalRulesDto": {
        "type": "object",
        "properties": {
          "JournalRules": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeJournalRuleDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeJournalRuleEnableDisableDto": {
        "type": "object",
        "properties": {
          "EnableJournalRule": {
            "type": "boolean"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeJournalRuleEnableDisableDto:Update": {
        "type": "object",
        "properties": {
          "EnableJournalRule": {
            "type": "boolean"
          }
        }
      },
      "ExchangeMailDisclaimersDto": {
        "type": "object",
        "properties": {
          "MailDisclaimers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeMailDisclaimerDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailDisclaimerDto": {
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "RecipientLocation": {
            "type": "string"
          },
          "DisclaimerText": {
            "type": "string"
          },
          "Location": {
            "type": "string"
          },
          "FallbackAction": {
            "type": "string"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailDisclaimerDto:Request": {
        "type": "object",
        "properties": {
          "DisclaimerText": {
            "type": "string"
          },
          "Location": {
            "type": "string",
            "enum": [
              "Append",
              "Prepend"
            ]
          },
          "FallbackAction": {
            "type": "string",
            "enum": [
              "Ignore",
              "Wrap",
              "Reject"
            ]
          },
          "RecipientLocation": {
            "type": "string",
            "description": "You can get possible values of recipient location by calling 'GET /system-entities/exchange/recipient-locations'.",
            "enum": [
              "NotInOrganization",
              "InOrganization",
              "ExternalPartner",
              "ExternalNonPartner"
            ]
          }
        }
      },
      "ExchangeMailDisclaimerDto:List": {
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "RecipientLocation": {
            "type": "string"
          },
          "DisclaimerText": {
            "type": "string"
          },
          "Location": {
            "type": "string"
          },
          "FallbackAction": {
            "type": "string"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExchangeMailDisclaimerEnableDisableDto": {
        "type": "object",
        "properties": {
          "IsDisabled": {
            "type": "boolean"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailDisclaimerEnableDisableDto:Request": {
        "type": "object",
        "properties": {
          "IsDisabled": {
            "type": "boolean"
          }
        }
      },
      "ExchangeServerListDto": {
        "type": "object",
        "properties": {
          "ExchangeServers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeServerDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeServerDto": {
        "type": "object",
        "properties": {
          "Domain": {
            "type": "string"
          },
          "IsClientAccessServer": {
            "type": "string"
          },
          "IsMailboxServer": {
            "type": "string"
          },
          "AdminDisplayVersion": {
            "type": "string"
          },
          "Edition": {
            "type": "string"
          },
          "HostName": {
            "type": "string"
          },
          "OutLookAnywhereEnabled": {
            "type": "boolean"
          },
          "ExchangeVersion": {
            "type": "string"
          },
          "DataPath": {
            "type": "string"
          },
          "DataPathEx": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Fqdn": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          }
        }
      },
      "ServerRoleDto": {
        "type": "object",
        "properties": {
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerIp": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "PlatformName": {
            "type": "string"
          },
          "WebRoleSettings": {
            "$ref": "#/definitions/WebServerRole"
          },
          "FtpRoleSettings": {
            "$ref": "#/definitions/FtpServerRole"
          },
          "DnsRoleSettings": {
            "$ref": "#/definitions/DnsServerRole"
          },
          "DatabaseRoleSettings": {
            "$ref": "#/definitions/DatabaseServerRole"
          },
          "MailRoleSettings": {
            "$ref": "#/definitions/MailServerRole"
          },
          "SharePointRoleSettings": {
            "$ref": "#/definitions/SharePointServerRole"
          },
          "SkypeRoleSettings": {
            "$ref": "#/definitions/SkypeServerRole"
          },
          "CrmRoleSettings": {
            "$ref": "#/definitions/CrmServerRole"
          },
          "VirtualizationRoleSettings": {
            "$ref": "#/definitions/VirtualizationServerRole"
          },
          "ExchangeRoleSettings": {
            "$ref": "#/definitions/ExchangeServerRole"
          },
          "BlackBerryRoleSettings": {
            "$ref": "#/definitions/BlackBerryServerRole"
          },
          "IaasRoleSettings": {
            "$ref": "#/definitions/IaasServerRole"
          },
          "Office365ServerSettings": {
            "$ref": "#/definitions/Office365ServerRole"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ServerRoleDto:List": {
        "type": "object",
        "properties": {
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerIp": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "PlatformName": {
            "type": "string"
          }
        }
      },
      "WebServerRole": {
        "required": [
          "Webspace"
        ],
        "type": "object",
        "properties": {
          "SelectedWebServerType": {
            "type": "string"
          },
          "Webspace": {
            "type": "string"
          },
          "SelectedFtpServerType": {
            "type": "string"
          },
          "VirtualDirectoryName": {
            "type": "string"
          },
          "IpLessDomainIp": {
            "type": "string"
          },
          "IpLessFtpSite": {
            "type": "string"
          },
          "FtpVersion": {
            "type": "string"
          },
          "ApplicationPoolEnabled": {
            "type": "boolean"
          },
          "SoftaculousEnabled": {
            "type": "boolean"
          },
          "SoftaculousPath": {
            "type": "string"
          },
          "DomainControllerEnabled": {
            "type": "boolean"
          },
          "DomainControllerName": {
            "type": "string"
          },
          "DefaultOrganizationalUnit": {
            "type": "string"
          },
          "SslWebsite": {
            "type": "string"
          },
          "WebServerPort": {
            "type": "string"
          },
          "ConfFilePath": {
            "type": "string"
          },
          "PidFilePath": {
            "type": "string"
          },
          "ServiceFilePath": {
            "type": "string"
          },
          "SslEnabledWebsite": {
            "type": "string"
          },
          "StatServerType": {
            "type": "string"
          },
          "PhpAvailableVersions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "IndexServerCatalogs": {
            "$ref": "#/definitions/IndexServerCatalog"
          },
          "PhpVersions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Php"
            }
          },
          "Perl": {
            "$ref": "#/definitions/PerlObject"
          },
          "DotNet": {
            "$ref": "#/definitions/DotNetObject"
          },
          "ColdFusion": {
            "$ref": "#/definitions/ColdFusionObject"
          },
          "AwStats": {
            "$ref": "#/definitions/AwStat"
          },
          "DeepMetrix": {
            "$ref": "#/definitions/DeepMetrixStat"
          },
          "SmarterStats": {
            "$ref": "#/definitions/SmarterStat"
          },
          "Webalizer": {
            "$ref": "#/definitions/WebalizerStat"
          },
          "WebTrend": {
            "$ref": "#/definitions/WebTrendStat"
          }
        }
      },
      "IndexServerCatalog": {
        "type": "object",
        "properties": {
          "IsEnabled": {
            "type": "boolean"
          }
        }
      },
      "Php": {
        "type": "object",
        "properties": {
          "Version": {
            "type": "string"
          },
          "FastCgiEnabled": {
            "type": "boolean"
          },
          "Handler": {
            "type": "string"
          },
          "InstallPath": {
            "type": "string"
          }
        }
      },
      "PerlObject": {
        "type": "object",
        "properties": {
          "InstallPath": {
            "type": "string"
          }
        }
      },
      "DotNetObject": {
        "type": "object",
        "properties": {
          "InstallPath": {
            "type": "string"
          }
        }
      },
      "ColdFusionObject": {
        "type": "object",
        "properties": {
          "ColdfusionPassword": {
            "type": "string"
          },
          "InstallPath": {
            "type": "string"
          }
        }
      },
      "AwStat": {
        "type": "object",
        "properties": {
          "IsEnabled": {
            "type": "boolean"
          }
        }
      },
      "DeepMetrixStat": {
        "type": "object",
        "properties": {
          "RemoteConfigured": {
            "type": "boolean"
          },
          "XspVersion": {
            "type": "boolean"
          },
          "ServerIp": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "AdminName": {
            "pattern": "^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$",
            "type": "string"
          },
          "AdminPassword": {
            "type": "string"
          }
        }
      },
      "SmarterStat": {
        "type": "object",
        "properties": {
          "IsEnterpriseVersion": {
            "type": "boolean"
          },
          "AdminName": {
            "type": "string"
          },
          "AdminPassword": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "AccessUrl": {
            "type": "string"
          },
          "LogsPath": {
            "type": "string"
          }
        }
      },
      "WebalizerStat": {
        "type": "object",
        "properties": {
          "IsEnabled": {
            "type": "boolean"
          }
        }
      },
      "WebTrendStat": {
        "type": "object",
        "properties": {
          "WebTrendVersion": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          }
        }
      },
      "FtpServerRole": {
        "required": [
          "ServuIniFilePath",
          "WuFtpd",
          "VsFtpd",
          "Proftpd"
        ],
        "type": "object",
        "properties": {
          "SelectedFtpServerType": {
            "type": "string"
          },
          "IpLessFtpSite": {
            "type": "string"
          },
          "VirtualDirectoryName": {
            "type": "string"
          },
          "ServuIniFilePath": {
            "type": "string"
          },
          "DefaultDomain": {
            "type": "string"
          },
          "WuFtpd": {
            "type": "string"
          },
          "VsFtpd": {
            "type": "string"
          },
          "Proftpd": {
            "type": "string"
          }
        }
      },
      "DnsServerRole": {
        "required": [
          "DnsPath",
          "NameServer1",
          "NameServer2",
          "EmailAddress",
          "RefreshTime",
          "NumberOfRetries",
          "ExpireTime",
          "Ttl"
        ],
        "type": "object",
        "properties": {
          "SelectedDnsServerType": {
            "type": "string"
          },
          "DnsPath": {
            "type": "string"
          },
          "NameServer1": {
            "type": "string"
          },
          "NameServer2": {
            "type": "string"
          },
          "NameServer3": {
            "type": "string"
          },
          "NameServer4": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "SpfRecord": {
            "type": "string"
          },
          "DnsEnabled": {
            "type": "boolean"
          },
          "IsSecondaryOnly": {
            "type": "boolean"
          },
          "SecondaryEnabled": {
            "type": "boolean"
          },
          "SpfEnabled": {
            "type": "boolean"
          },
          "Ns3Enabled": {
            "type": "boolean"
          },
          "Ns4Enabled": {
            "type": "boolean"
          },
          "Ns2ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "Ns3ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "Ns4ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "RefreshTime": {
            "format": "int32",
            "type": "integer"
          },
          "NumberOfRetries": {
            "format": "int32",
            "type": "integer"
          },
          "ExpireTime": {
            "format": "int32",
            "type": "integer"
          },
          "Ttl": {
            "format": "int32",
            "type": "integer"
          },
          "ConfFilePath": {
            "type": "string"
          },
          "DnsPidFilePath": {
            "type": "string"
          },
          "DnsServiceFilePath": {
            "type": "string"
          },
          "ChrootEnvironment": {
            "type": "boolean"
          },
          "ChrootDirectoryPath": {
            "type": "string"
          },
          "DnsRecords": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DnsRecord"
            }
          }
        }
      },
      "DnsRecord": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Data": {
            "type": "string"
          },
          "Preference": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        }
      },
      "DatabaseServerRole": {
        "type": "object",
        "properties": {
          "SqlInstances": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SqlInstance"
            }
          },
          "MySqlInstances": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MySqlInstance"
            }
          }
        }
      },
      "SqlInstance": {
        "required": [
          "ServerName",
          "DatabasePath",
          "IpAddress",
          "Port",
          "AdminName",
          "AdminPassword"
        ],
        "type": "object",
        "properties": {
          "ServerName": {
            "type": "string"
          },
          "DatabasePath": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "AdminName": {
            "type": "string"
          },
          "AdminPassword": {
            "type": "string"
          }
        }
      },
      "MySqlInstance": {
        "required": [
          "ServerName",
          "InstallPath",
          "IpAddress",
          "Port",
          "AdminName",
          "AdminPassword"
        ],
        "type": "object",
        "properties": {
          "ServerName": {
            "type": "string"
          },
          "InstallPath": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "AdminName": {
            "type": "string"
          },
          "AdminPassword": {
            "type": "string"
          }
        }
      },
      "MailServerRole": {
        "required": [
          "ServerIp"
        ],
        "type": "object",
        "properties": {
          "SelectedMailServerType": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "MailAccessUrl": {
            "type": "string"
          },
          "MailAdminUrl": {
            "type": "string"
          },
          "MerakIpBinding": {
            "type": "string"
          },
          "Enabled": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "MDaemonPort": {
            "type": "string"
          },
          "DsnName": {
            "type": "string"
          },
          "Database": {
            "type": "string"
          },
          "AdminUser": {
            "type": "string"
          },
          "AdminPassword": {
            "type": "string"
          },
          "VirtualDirPath": {
            "type": "string"
          },
          "InstallPath": {
            "type": "string"
          },
          "RootAddress": {
            "type": "string"
          },
          "ListAdministrator": {
            "type": "string"
          },
          "ConfFilePath": {
            "type": "string"
          },
          "MailPidFile": {
            "type": "string"
          },
          "MailServiceFile": {
            "type": "string"
          },
          "SmtpAuthentication": {
            "type": "string"
          },
          "VpopHomeDirectory": {
            "type": "string"
          },
          "QmailHomeDirectory": {
            "type": "string"
          },
          "DovecotConfFile": {
            "type": "string"
          },
          "DovecotServiceFile": {
            "type": "string"
          },
          "ExternalDllPath": {
            "type": "string"
          },
          "SystemDsn": {
            "type": "string"
          },
          "DsnUsername": {
            "type": "string"
          },
          "DsnPassword": {
            "type": "string"
          }
        }
      },
      "SharePointServerRole": {
        "required": [
          "HostName",
          "AdminUserName",
          "AdminUserPassword",
          "RootOu",
          "ADAdmin",
          "ADAdminPassword",
          "WebApplicationName"
        ],
        "type": "object",
        "properties": {
          "SelectedSharePointServerType": {
            "type": "string"
          },
          "HostName": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "AdminUserName": {
            "type": "string"
          },
          "AdminUserPassword": {
            "type": "string"
          },
          "DbMaxsize": {
            "type": "string"
          },
          "DbWarningsize": {
            "type": "string"
          },
          "DefaultWebApp": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "RootOu": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADAdminPassword": {
            "type": "string"
          },
          "WebApplicationName": {
            "type": "string"
          }
        }
      },
      "SkypeServerRole": {
        "required": [
          "DomainController",
          "RootOu"
        ],
        "type": "object",
        "properties": {
          "SelectedSkypeServerType": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "HostHeader": {
            "type": "string"
          },
          "RootOu": {
            "type": "string"
          },
          "SimpleUrlType": {
            "type": "string"
          },
          "SimpleUrlHostHeader": {
            "type": "string"
          },
          "SimpleUrlDefaultDomain": {
            "type": "string"
          },
          "HostName": {
            "type": "string"
          },
          "AdministratorLogin": {
            "type": "string"
          },
          "AdministratorPassword": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADAdminPassword": {
            "type": "string"
          },
          "ServerPool": {
            "type": "string"
          },
          "ApplicationService": {
            "type": "string"
          }
        }
      },
      "CrmServerRole": {
        "required": [
          "UserName",
          "UserPassword",
          "DomainName",
          "Serverport",
          "InternetFacingDomain",
          "SqlReportServerUrl",
          "DomainController",
          "RootOu"
        ],
        "type": "object",
        "properties": {
          "SelectedCrmServerType": {
            "type": "string"
          },
          "DefaultAuthentication": {
            "type": "boolean"
          },
          "UserName": {
            "type": "string"
          },
          "UserPassword": {
            "type": "string"
          },
          "DomainName": {
            "type": "string"
          },
          "Serverport": {
            "type": "string"
          },
          "BindingType": {
            "type": "string"
          },
          "InternetFacingDomain": {
            "type": "string"
          },
          "SqlReportServerUrl": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "RootOu": {
            "type": "string"
          }
        }
      },
      "VirtualizationServerRole": {
        "required": [
          "AdministratorLogin",
          "AdministratorPassword",
          "ExternalNetworkName",
          "PreferredDns"
        ],
        "type": "object",
        "properties": {
          "SelectedVirtualizationServerType": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "ServerApiUrl": {
            "type": "string"
          },
          "AdministratorLogin": {
            "type": "string"
          },
          "AdministratorPassword": {
            "type": "string"
          },
          "ConfirmPassword": {
            "type": "string"
          },
          "VirtualMachineRootPath": {
            "type": "string"
          },
          "ExternalNetworkName": {
            "type": "string"
          },
          "PreferredDns": {
            "type": "string"
          },
          "AlternateDns": {
            "type": "string"
          },
          "InternalNetworkName": {
            "type": "string"
          },
          "BandwidthManagement": {
            "type": "boolean"
          },
          "BandwidthTools": {
            "type": "string"
          },
          "BandwidthParserPath": {
            "type": "string"
          },
          "BandwidthLogFolder": {
            "type": "string"
          },
          "BandwidthReportFolder": {
            "type": "string"
          },
          "Version": {
            "format": "int32",
            "type": "integer"
          },
          "DataStoreName": {
            "type": "string"
          },
          "ProviderEnabled": {
            "type": "boolean"
          }
        }
      },
      "ExchangeServerRole": {
        "type": "object",
        "properties": {
          "SelectedExchangeServerType": {
            "type": "string"
          },
          "SelectedBlackBerryServer": {
            "type": "string"
          },
          "ActAsBackupServerOnly": {
            "type": "boolean"
          },
          "SrvRecordEnabled": {
            "type": "boolean"
          },
          "SrvHostName": {
            "type": "string"
          },
          "MailMxIpAddress": {
            "type": "string"
          },
          "ClientAccessServer": {
            "type": "string"
          },
          "OwaAccessUrl": {
            "type": "string"
          },
          "PublicFolderServer": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "RootOu": {
            "type": "string"
          },
          "HostName": {
            "type": "string"
          },
          "AdministratorLogin": {
            "type": "string"
          },
          "AdministratorPassword": {
            "type": "string"
          },
          "DatabaseSelectionMode": {
            "type": "string"
          },
          "ActiveDirectoryMode": {
            "type": "string"
          },
          "DomainAdministrator": {
            "type": "string"
          },
          "DomainPassword": {
            "type": "string"
          }
        }
      },
      "BlackBerryServerRole": {
        "required": [
          "AdminClientPath",
          "AdminClientPassword",
          "BlackBerryEnterpriseServerName",
          "UserName",
          "UserPassword"
        ],
        "type": "object",
        "properties": {
          "SelectedBlackBerryServerType": {
            "type": "string"
          },
          "SelectedExchangeServers": {
            "type": "string"
          },
          "AdminClientServerName": {
            "type": "string"
          },
          "AdminClientPath": {
            "type": "string"
          },
          "AdminClientPassword": {
            "type": "string"
          },
          "ConfirmPassword": {
            "type": "string"
          },
          "AdminServiceServerName": {
            "type": "string"
          },
          "BlackBerryEnterpriseServerName": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "UserPassword": {
            "type": "string"
          },
          "ConfirmUserPassword": {
            "type": "string"
          },
          "AccountType": {
            "type": "string"
          }
        }
      },
      "IaasServerRole": {
        "type": "object",
        "properties": {
          "IaasConfig": {
            "$ref": "#/definitions/IaasConfigsDto"
          },
          "SelectedVirtualizationServerType": {
            "type": "string"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "RoleId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "IaasConfigsDto": {
        "type": "object",
        "properties": {
          "StepName": {
            "type": "string"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IaasKeyValuePair"
            }
          }
        }
      },
      "IaasKeyValuePair": {
        "type": "object",
        "properties": {
          "SystemName": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "Office365ServerRole": {
        "required": [
          "SelectedOffice365ServerType",
          "CSPUserName",
          "CSPUserPassword",
          "ApplicationSecret",
          "PartnerServiceApiRoot",
          "ApplicationDomain",
          "ApplicationId",
          "Authority",
          "UserApplicationId",
          "DomainSuffix"
        ],
        "type": "object",
        "properties": {
          "SelectedOffice365ServerType": {
            "type": "string"
          },
          "CSPUserName": {
            "type": "string"
          },
          "CSPUserPassword": {
            "type": "string"
          },
          "ApplicationSecret": {
            "type": "string"
          },
          "PartnerServiceApiRoot": {
            "type": "string"
          },
          "ApplicationDomain": {
            "type": "string"
          },
          "Regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ApplicationId": {
            "type": "string"
          },
          "Authority": {
            "type": "string"
          },
          "UserApplicationId": {
            "type": "string"
          },
          "DomainSuffix": {
            "type": "string"
          }
        }
      },
      "ExchangeMailDomainsDto": {
        "type": "object",
        "properties": {
          "ExchangeMailDomains": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeMailDomainDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailDomainDto": {
        "required": [
          "MailDomain",
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomain": {
            "type": "string"
          },
          "MailDomainType": {
            "type": "string"
          },
          "MailServerIp": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "Provider": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "DnsTxtRecord": {
            "type": "string"
          },
          "IsVerified": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailDomainDto:Request": {
        "required": [
          "MailDomain",
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "MailDomain": {
            "type": "string"
          },
          "MailDomainType": {
            "type": "string",
            "enum": [
              "authoritative",
              "internalRelay",
              "externalRelay"
            ]
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "Provider": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Give owner id in case of creating mail domain for any descendent user."
          }
        }
      },
      "ExchangeMailDomainDto:List": {
        "required": [
          "MailDomain",
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomain": {
            "type": "string"
          },
          "MailDomainType": {
            "type": "string"
          },
          "MailServerIp": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "Provider": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "DnsTxtRecord": {
            "type": "string"
          },
          "IsVerified": {
            "type": "boolean"
          }
        }
      },
      "UpdateMailDomainDto": {
        "required": [
          "MailDomainId",
          "MailDomainType"
        ],
        "type": "object",
        "properties": {
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainType": {
            "type": "string"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateMailDomainDto:Request": {
        "required": [
          "MailDomainId",
          "MailDomainType"
        ],
        "type": "object",
        "properties": {
          "MailDomainType": {
            "type": "string"
          },
          "IsDisabled": {
            "type": "boolean"
          }
        }
      },
      "ExchangeDistributionListsDto": {
        "type": "object",
        "properties": {
          "DistributionList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeDistributionListDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeDistributionListDto": {
        "required": [
          "OrganizationId",
          "DisplayName",
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "ExchangeDistributionListId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailAddress": {
            "type": "string"
          },
          "IsDistribution": {
            "type": "boolean"
          },
          "IsAllSenderAuthenticated": {
            "type": "boolean"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "InComingMessageSizeLimit": {
            "format": "int32",
            "type": "integer"
          },
          "ListAdmin": {
            "type": "string"
          },
          "ListType": {
            "type": "string"
          },
          "SubOU": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          },
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeRecipientDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeDistributionListDto:List": {
        "required": [
          "OrganizationId",
          "DisplayName",
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "ExchangeDistributionListId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailAddress": {
            "type": "string"
          },
          "IsDistribution": {
            "type": "boolean"
          },
          "IsAllSenderAuthenticated": {
            "type": "boolean"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "InComingMessageSizeLimit": {
            "format": "int32",
            "type": "integer"
          },
          "ListAdmin": {
            "type": "string"
          },
          "ListType": {
            "type": "string"
          },
          "SubOU": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          },
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeRecipientDto"
            }
          }
        }
      },
      "ExchangeDistributionListDto:Request": {
        "required": [
          "OrganizationId",
          "DisplayName",
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailAddress": {
            "type": "string"
          },
          "IsDistribution": {
            "type": "boolean",
            "description": "Set it true to create 'distribution' type of list otherwise it will create 'security' type of list."
          },
          "IsAllSenderAuthenticated": {
            "type": "boolean"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "InComingMessageSizeLimit": {
            "format": "int32",
            "type": "integer"
          },
          "ListAdmin": {
            "type": "string"
          },
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeRecipientDto:exgRequest"
            }
          }
        }
      },
      "ExchangeRecipientDto:exgRequest": {
        "required": [
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          }
        }
      },
      "UpdateExchangeDLAdminDto": {
        "required": [
          "ListAdmin"
        ],
        "type": "object",
        "properties": {
          "ExchangeDistributionListId": {
            "format": "int32",
            "type": "integer"
          },
          "ListAdmin": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateExchangeDLAdminDto:Request": {
        "required": [
          "ListAdmin"
        ],
        "type": "object",
        "properties": {
          "ListAdmin": {
            "type": "string"
          }
        }
      },
      "ExchangeDistributionListMembersDto": {
        "type": "object",
        "properties": {
          "ExchangeDistributionListId": {
            "format": "int32",
            "type": "integer"
          },
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeRecipientDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeDistributionListMembersDto:Request": {
        "type": "object",
        "properties": {
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeRecipientDto"
            }
          }
        }
      },
      "RecipientEmailAddressesDto": {
        "type": "object",
        "properties": {
          "EmailAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RecipientEmailAddressDto:List"
            }
          },
          "RecipientId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "RecipientEmailAddressDto": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "RecipientEmailAddressDto:List": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "IsPrimary": {
            "type": "boolean"
          }
        }
      },
      "SetRecipientPrimaryEmailAddressDto": {
        "type": "object",
        "properties": {
          "RecipientId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailAddress": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SetRecipientPrimaryEmailAddressDto:Request": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          }
        }
      },
      "AddRecipientEmailAddressDto": {
        "type": "object",
        "properties": {
          "RecipientId": {
            "format": "int32",
            "type": "integer"
          },
          "EmailAddress": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AddRecipientEmailAddressDto:Request": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          }
        }
      },
      "ExchangeDistributionListAdvancePropertiesDto": {
        "type": "object",
        "properties": {
          "ExchangeDistributionListId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxServerType": {
            "type": "string"
          },
          "InComingMessageSizeLimit": {
            "format": "int32",
            "type": "integer"
          },
          "IsAllSenderAuthenticated": {
            "type": "boolean"
          },
          "IsSendOutToOriginator": {
            "type": "boolean"
          },
          "IsHideFromList": {
            "type": "boolean"
          },
          "ReportToManagerEnabled": {
            "type": "boolean"
          },
          "ReportToOriginatorEnabled": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeDistributionListAdvancePropertiesDto:Request": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxServerType": {
            "type": "string"
          },
          "InComingMessageSizeLimit": {
            "format": "int32",
            "type": "integer"
          },
          "IsAllSenderAuthenticated": {
            "type": "boolean"
          },
          "IsSendOutToOriginator": {
            "type": "boolean"
          },
          "IsHideFromList": {
            "type": "boolean"
          },
          "ReportToManagerEnabled": {
            "type": "boolean"
          },
          "ReportToOriginatorEnabled": {
            "type": "boolean"
          }
        }
      },
      "ExchangeMailContactsDto": {
        "type": "object",
        "properties": {
          "ContactsList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeMailContactDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailContactDto:List": {
        "required": [
          "OrganizationId",
          "FirstName",
          "LastName",
          "ContactName",
          "ExternalEmailAddress"
        ],
        "type": "object",
        "properties": {
          "ExchangeMailContactId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "PrimaryEmailAddress": {
            "type": "string"
          },
          "DistinguishedName": {
            "type": "string"
          },
          "ContactName": {
            "type": "string"
          },
          "ExternalEmailAddress": {
            "type": "string"
          },
          "InternalEmailAddress": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "HiddenFromAddressLists": {
            "type": "boolean"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "MaximumRecipients": {
            "format": "int32",
            "type": "integer"
          },
          "MaxReceiveSize": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "SubOU": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          }
        }
      },
      "ExchangeMailContactDto:Request": {
        "required": [
          "OrganizationId",
          "FirstName",
          "LastName",
          "ContactName",
          "ExternalEmailAddress"
        ],
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "ContactName": {
            "type": "string"
          },
          "ExternalEmailAddress": {
            "type": "string"
          },
          "InternalEmailAddress": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "HiddenFromAddressLists": {
            "type": "boolean"
          },
          "MaximumRecipients": {
            "format": "int32",
            "type": "integer"
          },
          "MaxReceiveSize": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          }
        }
      },
      "ExchangeMailContactDto": {
        "required": [
          "OrganizationId",
          "FirstName",
          "LastName",
          "ContactName",
          "ExternalEmailAddress"
        ],
        "type": "object",
        "properties": {
          "ExchangeMailContactId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "PrimaryEmailAddress": {
            "type": "string"
          },
          "DistinguishedName": {
            "type": "string"
          },
          "ContactName": {
            "type": "string"
          },
          "ExternalEmailAddress": {
            "type": "string"
          },
          "InternalEmailAddress": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "HiddenFromAddressLists": {
            "type": "boolean"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "MaximumRecipients": {
            "format": "int32",
            "type": "integer"
          },
          "MaxReceiveSize": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "SubOU": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ManagerDto:Resquest": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Email": { "type": "string" },
          "ManagerType": { "type": "string" }
        }
      },
      "UserGeneralProfileDto:Request": {
        "type": "object",
        "properties": {
          "UserDn": { "type": "string" },
          "ObjectType": { "type": "string" },
          "FirstName": { "type": "string" },
          "LastName": { "type": "string" },
          "DisplayName": { "type": "string" },
          "Initials": { "type": "string" },
          "OfficeLocation": { "type": "string" },
          "StreetAddress": { "type": "string" },
          "ZipCode": { "type": "string" },
          "City": { "type": "string" },
          "State": { "type": "string" },
          "CountryId": {
            "format": "int32",
            "type": "integer"
          },
          "CountryAbbreviation": { "type": "string" },
          "JobTitle": { "type": "string" },
          "Company": { "type": "string" },
          "Department": { "type": "string" },
          "BusinessPhone": { "type": "string" },
          "HomePhone": { "type": "string" },
          "MobilePhone": { "type": "string" },
          "Fax": { "type": "string" },
          "WebPage": { "type": "string" },
          "Notes": { "type": "string" },
          "Pager": { "type": "string" },
          "UserManager": { "$ref": "#/definitions/ManagerDto:Resquest" },
          "ErrorCode": { "type": "string" },
          "ErrorDesc": { "type": "string" }
        }
      },
      "UserGeneralProfileDto": {
        "required": [
          "State"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Initials": {
            "type": "string"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "StreetAddress": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "CountryId": {
            "format": "int32",
            "type": "integer"
          },
          "JobTitle": {
            "type": "string"
          },
          "Company": {
            "type": "string"
          },
          "Department": {
            "type": "string"
          },
          "BusinessPhone": {
            "type": "string"
          },
          "HomePhone": {
            "type": "string"
          },
          "MobilePhone": {
            "type": "string"
          },
          "Fax": {
            "type": "string"
          },
          "WebPage": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          }
        }
      },
      "ExchangeMailContactGeneralPropertiesDto": {
        "type": "object",
        "properties": {
          "ExchangeMailContactId": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailContactGeneralPropertiesDto:Request": {
        "type": "object",
        "properties": {
          "ExchangeMailContactId": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          }
        }
      },
      "ExchangeMailContactAdvancedPropertiesDto": {
        "type": "object",
        "properties": {
          "ExchangeMailContactId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "ExternalEmailAddress": {
            "type": "string"
          },
          "HiddenFromAddressLists": {
            "type": "boolean"
          },
          "MaximumRecipients": {
            "format": "int32",
            "type": "integer"
          },
          "MaxReceiveSize": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailContactAdvancedPropertiesDto:Request": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "ExternalEmailAddress": {
            "type": "string"
          },
          "HiddenFromAddressLists": {
            "type": "boolean"
          },
          "MaximumRecipients": {
            "format": "int32",
            "type": "integer"
          },
          "MaxReceiveSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExgMailboxDatabasesDto": {
        "type": "object",
        "properties": {
          "MailboxDatabases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExgMailboxDatabaseDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExgMailboxDatabaseDto": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "DatabasePath": {
            "type": "string"
          },
          "LogFolderPath": {
            "type": "string"
          },
          "Mounted": {
            "type": "boolean"
          },
          "MountAtStartup": {
            "type": "boolean"
          },
          "MailboxDatabaseName": {
            "type": "string"
          },
          "IsForMailBoxDB": {
            "type": "boolean"
          },
          "IsForArchiveMailboxDB": {
            "type": "boolean"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "AssignExgMailboxDatabasesDto": {
        "type": "object",
        "properties": {
          "MailboxDatabases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssignExchangeDatabaseDto"
            }
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AssignExgMailboxDatabasesDto:Request": {
        "type": "object",
        "properties": {
          "MailboxDatabases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssignExchangeDatabaseDto"
            }
          }
        }
      },
      "AssignExchangeDatabaseDto": {
        "type": "object",
        "properties": {
          "MailboxDatabaseName": {
            "type": "string"
          },
          "IsForMailBoxDB": {
            "type": "boolean"
          },
          "IsForArchiveMailboxDB": {
            "type": "boolean"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExgUpdateMailboxDatabaseDto": {
        "required": [
          "MailboxDatabaseName"
        ],
        "type": "object",
        "properties": {
          "MailboxDatabaseName": {
            "type": "string"
          },
          "Mount": {
            "type": "boolean"
          }
        }
      },
      "ExgAddMailboxDatabaseDto": {
        "required": [
          "MailboxDatabaseName",
          "DatabasePath",
          "LogFolderPath",
          "MailboxSever"
        ],
        "type": "object",
        "properties": {
          "MailboxDatabaseName": {
            "type": "string"
          },
          "DatabasePath": {
            "type": "string"
          },
          "LogFolderPath": {
            "type": "string"
          },
          "MailboxSever": {
            "type": "string"
          },
          "Mount": {
            "type": "boolean"
          }
        }
      },
      "ExchangePfMailboxesDto": {
        "type": "object",
        "properties": {
          "PfMailboxes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangePfMailboxDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePfMailboxDto": {
        "required": [
          "PfMailboxName",
          "MailboxDatabase"
        ],
        "type": "object",
        "properties": {
          "PfMailboxName": {
            "type": "string"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "ExcludeFromServingHierarchy": {
            "type": "boolean"
          }
        }
      },
      "UpdateExchangePfMailboxDto": {
        "required": [
          "PfMailboxName"
        ],
        "type": "object",
        "properties": {
          "PfMailboxName": {
            "type": "string"
          },
          "ExcludeFromServingHierarchy": {
            "type": "boolean"
          }
        }
      },
      "AssignExchangePfMailboxDto": {
        "required": [
          "UserId",
          "PfMailboxes"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "PfMailboxes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ActiveSyncPoliciesDto": {
        "type": "object",
        "properties": {
          "ActiveSyncPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActiveSyncPolicyDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ActiveSyncPolicyDto": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "DevicePolicyRefreshInterval": {
            "type": "string"
          },
          "AllowNonProvisionableDevices": {
            "type": "boolean"
          },
          "DevicePasswordEnabled": {
            "type": "boolean"
          },
          "AlphanumericDevicePasswordRequired": {
            "type": "boolean"
          },
          "MaxInactivityTimeDeviceLock": {
            "type": "string"
          },
          "MinDevicePasswordLength": {
            "type": "string"
          },
          "PasswordRecoveryEnabled": {
            "type": "boolean"
          },
          "RequireDeviceEncryption": {
            "type": "boolean"
          },
          "AttachmentsEnabled": {
            "type": "boolean"
          },
          "AllowSimpleDevicePassword": {
            "type": "boolean"
          },
          "DevicePasswordExpiration": {
            "type": "string"
          },
          "DevicePasswordHistory": {
            "type": "string"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ActiveSyncPolicyDto:Request": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "DevicePolicyRefreshInterval": {
            "type": "string"
          },
          "AllowNonProvisionableDevices": {
            "type": "boolean"
          },
          "DevicePasswordEnabled": {
            "type": "boolean"
          },
          "AlphanumericDevicePasswordRequired": {
            "type": "boolean"
          },
          "MaxInactivityTimeDeviceLock": {
            "type": "string"
          },
          "MinDevicePasswordLength": {
            "type": "string"
          },
          "PasswordRecoveryEnabled": {
            "type": "boolean"
          },
          "RequireDeviceEncryption": {
            "type": "boolean"
          },
          "AttachmentsEnabled": {
            "type": "boolean"
          },
          "AllowSimpleDevicePassword": {
            "type": "boolean"
          },
          "DevicePasswordExpiration": {
            "type": "string"
          },
          "DevicePasswordHistory": {
            "type": "string"
          },
          "IsDefault": {
            "type": "boolean"
          }
        }
      },
      "ActiveSyncPolicyDto:List": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "DevicePolicyRefreshInterval": {
            "type": "string"
          },
          "AllowNonProvisionableDevices": {
            "type": "boolean"
          },
          "DevicePasswordEnabled": {
            "type": "boolean"
          },
          "AlphanumericDevicePasswordRequired": {
            "type": "boolean"
          },
          "MaxInactivityTimeDeviceLock": {
            "type": "string"
          },
          "MinDevicePasswordLength": {
            "type": "string"
          },
          "PasswordRecoveryEnabled": {
            "type": "boolean"
          },
          "RequireDeviceEncryption": {
            "type": "boolean"
          },
          "AttachmentsEnabled": {
            "type": "boolean"
          },
          "AllowSimpleDevicePassword": {
            "type": "boolean"
          },
          "DevicePasswordExpiration": {
            "type": "string"
          },
          "DevicePasswordHistory": {
            "type": "string"
          },
          "IsDefault": {
            "type": "boolean"
          }
        }
      },
      "DefaultASyncPolicyDto": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        }
      },
      "OutlookAnywhrListDto": {
        "type": "object",
        "properties": {
          "OutlookAnywhrList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OutlookAnywhrDto:List"
            }
          },
          "ServerCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "OutlookAnywhrDto": {
        "required": [
          "HostName",
          "CasServer",
          "AuthenticationMode"
        ],
        "type": "object",
        "properties": {
          "HostName": {
            "type": "string"
          },
          "CasServer": {
            "type": "string"
          },
          "AuthenticationMode": {
            "type": "string"
          },
          "SslOffloading": {
            "type": "boolean"
          },
          "IpAddress": {
            "type": "string"
          },
          "RPCPath": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "OutlookAnywhrDto:List": {
        "required": [
          "HostName",
          "CasServer",
          "AuthenticationMode"
        ],
        "type": "object",
        "properties": {
          "HostName": {
            "type": "string"
          },
          "CasServer": {
            "type": "string"
          },
          "AuthenticationMode": {
            "type": "string"
          },
          "SslOffloading": {
            "type": "boolean"
          },
          "IpAddress": {
            "type": "string"
          },
          "RPCPath": {
            "type": "string"
          }
        }
      },
      "OutlookAnywhrDto:Request": {
        "required": [
          "HostName",
          "CasServer",
          "AuthenticationMode"
        ],
        "type": "object",
        "properties": {
          "HostName": {
            "type": "string"
          },
          "CasServer": {
            "type": "string"
          },
          "AuthenticationMode": {
            "type": "string"
          },
          "SslOffloading": {
            "type": "boolean"
          },
          "IpAddress": {
            "type": "string"
          },
          "RPCPath": {
            "type": "string"
          }
        }
      },
      "OrganizationSyncDto": {
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "IsResourceSync": {
            "type": "boolean"
          },
          "IsADSync": {
            "type": "boolean"
          },
          "IsDatabaseSync": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "OrganizationSyncDto:List": {
        "type": "object",
        "properties": {
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "IsResourceSync": {
            "type": "boolean"
          },
          "IsADSync": {
            "type": "boolean"
          },
          "IsDatabaseSync": {
            "type": "boolean"
          }
        }
      },
      "ExgUpdateOrganizationADSyncDto": {
        "type": "object",
        "properties": {
          "IsADSync": {
            "type": "boolean"
          },
          "IsResourceSync": {
            "type": "boolean"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseName": {
            "type": "string"
          }
        }
      },
      "ExgUpdateOrganizationADSyncDto:Request": {
        "type": "object",
        "properties": {
          "IsADSync": {
            "type": "boolean"
          },
          "IsResourceSync": {
            "type": "boolean"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabaseName": {
            "type": "string"
          }
        }
      },
      "OrganizationsSyncDto": {
        "type": "object",
        "properties": {
          "Organizations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrganizationSyncDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePublicFoldersDto": {
        "type": "object",
        "properties": {
          "PFList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangePublicFolderDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePublicFolderDto": {
        "required": [
          "PFName",
          "PFMailbox",
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "PFName": {
            "type": "string"
          },
          "PFMailbox": {
            "type": "string"
          },
          "EmailID": {
            "type": "string"
          },
          "OUPath": {
            "type": "string"
          },
          "TargetOU": {
            "type": "string"
          },
          "AccessRight": {
            "type": "string"
          },
          "NewAccessRight": {
            "type": "string"
          },
          "OldAccessRight": {
            "type": "string"
          },
          "DoForAllUsers": {
            "type": "boolean"
          },
          "IsMailEnabled": {
            "type": "boolean"
          },
          "PublicFolderType": {
            "type": "string"
          },
          "Identity": {
            "type": "string"
          },
          "Quota": {
            "type": "string"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "Flag": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePublicFolderDto:List": {
        "required": [
          "PFName",
          "PFMailbox",
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "PFName": {
            "type": "string"
          },
          "PFMailbox": {
            "type": "string"
          },
          "EmailID": {
            "type": "string"
          },
          "OUPath": {
            "type": "string"
          },
          "TargetOU": {
            "type": "string"
          },
          "AccessRight": {
            "type": "string"
          },
          "NewAccessRight": {
            "type": "string"
          },
          "OldAccessRight": {
            "type": "string"
          },
          "DoForAllUsers": {
            "type": "boolean"
          },
          "IsMailEnabled": {
            "type": "boolean"
          },
          "PublicFolderType": {
            "type": "string"
          },
          "Identity": {
            "type": "string"
          },
          "Quota": {
            "type": "string"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "Flag": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          }
        }
      },
      "ExchangePublicFolderDto:Request": {
        "required": [
          "PFName",
          "PFMailbox",
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "PFName": {
            "type": "string"
          },
          "PFMailbox": {
            "type": "string"
          },
          "EmailID": {
            "type": "string",
            "description": "Email Id value depends on 'IsMailEnabled'. If 'IsMailEnabled' is set to true emailId should be provided."
          },
          "IsMailEnabled": {
            "type": "boolean"
          },
          "PublicFolderType": {
            "type": "string",
            "description": "You can get public folder type by calling 'GET /system-entities/exchange/public-folder-types'.",
            "enum": [
              "mail",
              "contact",
              "calendar",
              "task"
            ]
          },
          "Quota": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExchangePublicFolderGeneralPropertiesDto": {
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "MaxItemSize": {
            "format": "int32",
            "type": "integer"
          },
          "RetentionDays": {
            "format": "int32",
            "type": "integer"
          },
          "AgeLimitsDays": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePublicFolderGeneralPropertiesDto:Request": {
        "type": "object",
        "properties": {
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "MaxItemSize": {
            "format": "int32",
            "type": "integer"
          },
          "RetentionDays": {
            "format": "int32",
            "type": "integer"
          },
          "AgeLimitsDays": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePublicFolderAdvancedPropertiesDto": {
        "required": [
          "MaxIncomingMsgSize",
          "MaxOutgoingMsgSize",
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePublicFolderAdvancedPropertiesDto:Request": {
        "required": [
          "MaxIncomingMsgSize",
          "MaxOutgoingMsgSize",
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          }
        }
      },
      "ExchangePFUsersListDto": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "type": "string"
          },
          "PFUsersList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangePFUserDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePFUserDto": {
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Permission": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePFUserDto:List": {
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Permission": {
            "type": "string"
          }
        }
      },
      "UpdatePFClientPermission": {
        "required": [
          "NewAccessRight",
          "OldAccessRight"
        ],
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "NewAccessRight": {
            "type": "string"
          },
          "OldAccessRight": {
            "type": "string"
          },
          "ClientEmailAddress": {
            "type": "string"
          },
          "DoForAllUsers": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdatePFClientPermission:Request": {
        "required": [
          "NewAccessRight",
          "OldAccessRight"
        ],
        "type": "object",
        "properties": {
          "NewAccessRight": {
            "type": "string"
          },
          "OldAccessRight": {
            "type": "string"
          },
          "ClientEmailAddress": {
            "type": "string"
          },
          "DoForAllUsers": {
            "type": "boolean"
          }
        }
      },
      "ExchangePublicFolderForwardingDto": {
        "required": [
          "MailboxForwardAddress"
        ],
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "ForwardingUserOrgName": {
            "type": "string"
          },
          "UserIdentity": {
            "type": "string"
          },
          "ForwardType": {
            "type": "string"
          },
          "MailboxForwardAddress": {
            "type": "string"
          },
          "DeliverToMailboxAndForward": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePublicFolderForwardingDto:Request": {
        "required": [
          "MailboxForwardAddress"
        ],
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "ForwardingUserOrgName": {
            "type": "string"
          },
          "UserIdentity": {
            "type": "string"
          },
          "ForwardType": {
            "type": "string"
          },
          "MailboxForwardAddress": {
            "type": "string"
          },
          "DeliverToMailboxAndForward": {
            "type": "boolean"
          }
        }
      },
      "ExchangePublicFolderEnableDisableDto": {
        "type": "object",
        "properties": {
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "IsMailEnabled": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangePublicFolderEnableDisableDto:Request": {
        "type": "object",
        "properties": {
          "IsMailEnabled": {
            "type": "boolean"
          }
        }
      },
      "RolesDto": {
        "type": "object",
        "properties": {
          "Roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RoleDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "RoleDto": {
        "type": "object",
        "properties": {
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ServerType": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "RemoteOnly": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "RoleDto:List": {
        "type": "object",
        "properties": {
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ServerType": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "RemoteOnly": {
            "type": "boolean"
          }
        }
      },
      "ServerRolesDto": {
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ServerRoleDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ServersDto": {
        "type": "object",
        "properties": {
          "Servers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ServerDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ServerDto": {
        "required": [
          "SystemName",
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "Providers": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "BuildNumber": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "UserPassword": {
            "type": "string"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ReleaseDate": {
            "format": "date-time",
            "type": "string"
          },
          "Guid": {
            "type": "string"
          },
          "LicenseStatus": {
            "type": "string"
          },
          "UsedQuantity": {
            "format": "int32",
            "type": "integer"
          },
          "OnPremises": {
            "type": "boolean"
          },
          "RbxBackupFrequency": {
            "type": "string"
          },
          "RbxLastBackupTime": {
            "format": "date-time",
            "type": "string"
          },
          "RbxLastBackupStatus": {
            "type": "string"
          },
          "RbxRestoreStatus": {
            "type": "string"
          },
          "RbxOperationPercentage": {
            "format": "int32",
            "type": "integer"
          },
          "RbxRestoreTime": {
            "format": "date-time",
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ServerDto:List": {
        "required": [
          "SystemName",
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "Providers": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "BuildNumber": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "UserPassword": {
            "type": "string"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "RoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ReleaseDate": {
            "format": "date-time",
            "type": "string"
          },
          "Guid": {
            "type": "string"
          },
          "LicenseStatus": {
            "type": "string"
          },
          "UsedQuantity": {
            "format": "int32",
            "type": "integer"
          },
          "OnPremises": {
            "type": "boolean"
          },
          "RbxBackupFrequency": {
            "type": "string"
          },
          "RbxLastBackupTime": {
            "format": "date-time",
            "type": "string"
          },
          "RbxLastBackupStatus": {
            "type": "string"
          },
          "RbxRestoreStatus": {
            "type": "string"
          },
          "RbxOperationPercentage": {
            "format": "int32",
            "type": "integer"
          },
          "RbxRestoreTime": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "PlansDto": {
        "type": "object",
        "properties": {
          "Plans": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlanDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "PlanDto:List": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "PlanId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "CancelationPolicy": {
            "type": "string"
          },
          "IsAvailable": {
            "type": "boolean"
          },
          "VisibleToUsers": {
            "type": "boolean"
          },
          "SystemName": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlanResourceDto"
            }
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlanResourceComponentDto"
            }
          },
          "SoldInstances": {
            "format": "int32",
            "type": "integer"
          },
          "VisibleToUserIds": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "PlanDto:Request": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string",
            "description": "Name of the new plan."
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "CancelationPolicy": {
            "type": "string"
          },
          "IsAvailable": {
            "type": "boolean"
          },
          "VisibleToUsers": {
            "type": "boolean"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlanResourceDto"
            },
            "description": "You can get plan resources by calling 'GET /addons' and composite resources by calling 'GET /composite-resources'."
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlanResourceComponentDto"
            },
            "description": "You can get plan resource component by calling 'GET /virtualization/base-os-types'."
          },
          "SoldInstances": {
            "format": "int32",
            "type": "integer"
          },
          "VisibleToUserIds": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "PlanDto": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "PlanId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "CancelationPolicy": {
            "type": "string"
          },
          "IsAvailable": {
            "type": "boolean"
          },
          "VisibleToUsers": {
            "type": "boolean"
          },
          "SystemName": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlanResourceDto"
            }
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlanResourceComponentDto"
            }
          },
          "SoldInstances": {
            "format": "int32",
            "type": "integer"
          },
          "VisibleToUserIds": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "PlanDto:Copy": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "PlanId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "CancelationPolicy": {
            "type": "string"
          },
          "IsAvailable": {
            "type": "boolean"
          },
          "VisibleToUsers": {
            "type": "boolean"
          },
          "SystemName": {
            "type": "string"
          },
          "DateAdded": {
            "format": "date-time",
            "type": "string"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlanResourceDto"
            }
          },
          "ResourceComponents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlanResourceComponentDto"
            }
          },
          "BillingDetails": {
            "$ref": "#/definitions/ItemBillingDetailsDto:List"
          },
          "SoldInstances": {
            "format": "int32",
            "type": "integer"
          },
          "VisibleToUserIds": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "PlanResourceDto": {
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "ProviderName": {
            "type": "string"
          },
          "Quantity": {
            "format": "int32",
            "type": "integer"
          },
          "IsComposite": {
            "type": "boolean"
          }
        }
      },
      "PlanResourceComponentDto": {
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ComponentName": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "ExgMailboxesDto": {
        "type": "object",
        "properties": {
          "Mailboxes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExgMailboxDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExgMailboxDto:List": {
        "required": [
          "MailboxType",
          "DisplayName",
          "MaildomainName"
        ],
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxType": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "IsNewUser": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "MaildomainName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "ActiveSyncPolicy": {
            "type": "string"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "Flag": {
            "type": "string"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "SAMAccount": {
            "type": "string"
          },
          "PrimarySMTPAddress": {
            "type": "string"
          },
          "Guid": {
            "type": "string"
          },
          "MailboxLitigationHoldEnabled": {
            "type": "boolean"
          },
          "ArchiveMailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "IsResourceMailbox": {
            "type": "boolean"
          },
          "SubOU": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          },
          "LinkedMasterAccount": {
            "type": "string"
          },
          "IsNewLinkedMasterAccount": {
            "type": "boolean"
          },
          "ActiveDirectoryTrustId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExgAddMailboxDto:Request": {
        "required": [
          "MailboxType",
          "DisplayName",
          "MaildomainName"
        ],
        "type": "object",
        "properties": {
          "CreateNewUser": {
            "type": "boolean",
            "description": "Set it true to create new user."
          },
          "MailboxType": {
            "type": "string",
            "enum": [
              "usermailbox",
              "sharedmailbox",
              "linkedmailbox"
            ]
          },
          "DisplayName": {
            "type": "string"
          },
          "Password": {
            "type": "string",
            "description": "Password required when 'CreateNewUser' is set true."
          },
          "MaildomainName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "ActiveSyncPolicy": {
            "type": "string"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "LinkedMasterAccount": {
            "type": "string",
            "description": "LinkedMasterAccount required when 'MailboxType' is set  as 'linkedmailbox'."
          },
          "IsNewLinkedMasterAccount": {
            "type": "boolean",
            "description": "IsNewLinkedMasterAccount required when 'MailboxType' is set  as 'linkedmailbox'. Set 'IsNewLinkedMasterAccount' true to create new user. "
          },
          "ActiveDirectoryTrustId": {
            "format": "int32",
            "type": "integer",
            "description": "ActiveDirectoryTrustId required when 'MailboxType' is set  as 'linkedmailbox'."
          }
        }
      },
      "ExgAddMailboxDto:Add": {
        "required": [
          "MailboxType",
          "DisplayName",
          "MaildomainName"
        ],
        "type": "object",
        "properties": {
          "CreateNewUser": {
            "type": "boolean"
          },
          "ExistingMailboxUserName": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxType": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "IsNewUser": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "MaildomainName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "Flag": {
            "type": "string"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "SAMAccount": {
            "type": "string"
          },
          "PrimarySMTPAddress": {
            "type": "string"
          },
          "Guid": {
            "type": "string"
          },
          "MailboxLitigationHoldEnabled": {
            "type": "boolean"
          },
          "ArchiveMailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "IsResourceMailbox": {
            "type": "boolean"
          },
          "SubOU": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          },
          "LinkedMasterAccount": {
            "type": "string"
          },
          "IsNewLinkedMasterAccount": {
            "type": "boolean"
          },
          "ActiveDirectoryTrustId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExgMailboxDto": {
        "required": [
          "MailboxType",
          "DisplayName",
          "MaildomainName"
        ],
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxType": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "IsNewUser": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "MaildomainName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "ActiveSyncPolicy": {
            "type": "string"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "Flag": {
            "type": "string"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "SAMAccount": {
            "type": "string"
          },
          "PrimarySMTPAddress": {
            "type": "string"
          },
          "Guid": {
            "type": "string"
          },
          "MailboxLitigationHoldEnabled": {
            "type": "boolean"
          },
          "ArchiveMailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "IsResourceMailbox": {
            "type": "boolean"
          },
          "SubOU": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          },
          "LinkedMasterAccount": {
            "type": "string"
          },
          "IsNewLinkedMasterAccount": {
            "type": "boolean"
          },
          "ActiveDirectoryTrustId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExgMailboxEnableDisableDto:Request": {
        "type": "object",
        "properties": {
          "IsDisabled": {
            "type": "boolean"
          }
        }
      },
      "MailboxActiveSyncSettingsDto": {
        "type": "object",
        "properties": {
          "IsActivated": {
            "type": "boolean"
          },
          "ActiveSyncMailboxPolicy": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ActivesyncEnabled": {
            "type": "string"
          },
          "IsDefault": {
            "type": "string"
          },
          "Identity": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateMailboxASyncDto:Request": {
        "type": "object",
        "properties": {
          "IsActivated": {
            "type": "boolean"
          },
          "ActiveSyncMailboxPolicy": {
            "type": "string"
          }
        }
      },
      "ExchangeArchiveMailboxListDto": {
        "type": "object",
        "properties": {
          "ArchiveMailboxes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeArchiveMailboxDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeArchiveMailboxDto:List": {
        "required": [
          "ArchiveDatabase",
          "ArchiveQuota",
          "ArchiveWarningQuota"
        ],
        "type": "object",
        "properties": {
          "ArchiveDatabase": {
            "type": "string"
          },
          "ArchiveName": {
            "type": "string"
          },
          "ArchiveQuota": {
            "type": "string"
          },
          "ArchiveWarningQuota": {
            "type": "string"
          },
          "ArchiveMailboxSize": {
            "type": "string"
          },
          "IsDisabledArchiveMailbox": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UpdateArchiveMailboxDto:Request": {
        "type": "object",
        "properties": {
          "ArchiveQuota": {
            "type": "string"
          },
          "ArchiveWarningQuota": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxServerType": {
            "type": "string"
          }
        }
      },
      "ExchangeArchiveMailboxDto": {
        "required": [
          "ArchiveDatabase",
          "ArchiveQuota",
          "ArchiveWarningQuota"
        ],
        "type": "object",
        "properties": {
          "ArchiveDatabase": {
            "type": "string"
          },
          "ArchiveName": {
            "type": "string"
          },
          "ArchiveQuota": {
            "type": "string"
          },
          "ArchiveWarningQuota": {
            "type": "string"
          },
          "ArchiveMailboxSize": {
            "type": "string"
          },
          "IsDisabledArchiveMailbox": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "TotalCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "CreateArchiveMailboxDto:Request": {
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "ArchiveMailboxDatabase": {
            "type": "string"
          },
          "ArchiveQuota": {
            "type": "string"
          },
          "ArchiveWarningQuota": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxServerType": {
            "type": "string"
          }
        }
      },
      "UpdateArchiveMailboxStatusDto:Request": {
        "type": "object",
        "properties": {
          "IsDisabledArchiveMailbox": {
            "type": "boolean"
          }
        }
      },
      "UpdateUserGeneralPropertiesDto": {
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateUserGeneralPropertiesDto:Request": {
        "type": "object",
        "properties": {
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          }
        }
      },
      "UserMailboxPasswordDto:Request": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          }
        }
      },
      "UserMailboxEmailAddressesDto": {
        "type": "object",
        "properties": {
          "EmailAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserMailboxEmailAddressDto:List"
            }
          },
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UserMailboxEmailAddressDto:List": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "IsPrimary": {
            "type": "boolean"
          }
        }
      },
      "SetPrimaryEmailAddressDto:Request": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          }
        }
      },
      "AddUserMailboxEmailAddressDto:Request": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          }
        }
      },
      "ExchangeRecipientListDto:MailboxRequest": {
        "type": "object",
        "properties": {
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeRecipientDto"
            }
          },
          "PublicFolderId": {
            "format": "int32",
            "type": "integer"
          },
          "IsAllSender": {
            "type": "boolean"
          },
          "RecipientId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UserMailboxAdvancedPropertiesDto": {
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "RetentionDays": {
            "format": "int32",
            "type": "integer"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "IsRetentionDefault": {
            "type": "boolean"
          },
          "IsPermanentDelete": {
            "type": "boolean"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UserMailboxAdvancedPropertiesDto:Request": {
        "type": "object",
        "properties": {
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "RetentionDays": {
            "format": "int32",
            "type": "integer"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "IsRetentionDefault": {
            "type": "boolean"
          },
          "IsPermanentDelete": {
            "type": "boolean"
          },
          "MailboxDatabase": {
            "type": "string"
          }
        }
      },
      "ExchangeMailboxForwardingDto": {
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "ForwardingUserOrgName": {
            "type": "string"
          },
          "UserIdentity": {
            "type": "string"
          },
          "ForwardType": {
            "type": "string"
          },
          "MailboxForwardAddress": {
            "description": "Forwarding would be enabled if MailboxForwardAddress has some valid email address is passed.\r\n            Forwarding would be disabled if this property is empty or null.",
            "type": "string"
          },
          "DeliverToMailboxAndForward": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailboxForwardingDto:Request": {
        "type": "object",
        "properties": {
          "ForwardingUserOrgName": {
            "type": "string"
          },
          "UserIdentity": {
            "type": "string"
          },
          "ForwardType": {
            "type": "string"
          },
          "MailboxForwardAddress": {
            "description": "Forwarding would be enabled if MailboxForwardAddress has some valid email address is passed.\r\n            Forwarding would be disabled if this property is empty or null.",
            "type": "string"
          },
          "DeliverToMailboxAndForward": {
            "type": "boolean"
          }
        }
      },
      "ExchangeMailboxStatsDto": {
        "type": "object",
        "properties": {
          "ItemCount": {
            "type": "string"
          },
          "TotalItemSize": {
            "type": "string"
          },
          "DeletedItemCount": {
            "type": "string"
          },
          "TotalDeletedItemSize": {
            "type": "string"
          },
          "LastLogonTime": {
            "type": "string"
          },
          "LastLogoffTime": {
            "type": "string"
          },
          "Database": {
            "type": "string"
          },
          "StorageLimitStatus": {
            "type": "string"
          },
          "LastLoggedOnUserAccount": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "LitigationHoldSettingsDto": {
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ApiUserId": {
            "format": "int32",
            "type": "integer"
          },
          "LitigationHoldEnabled": {
            "type": "boolean"
          },
          "RetentionUrl": {
            "type": "string"
          },
          "RetentionComment": {
            "type": "string"
          },
          "LitigationHoldDuration": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "LitigationHoldSettingsDto:Request": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "LitigationHoldEnabled": {
            "type": "boolean"
          },
          "RetentionUrl": {
            "type": "string"
          },
          "RetentionComment": {
            "type": "string"
          },
          "LitigationHoldDuration": {
            "type": "string"
          }
        }
      },
      "ExchangeBulkUserListDto": {
        "type": "object",
        "properties": {
          "UsersNotCreated": {
            "format": "int32",
            "type": "integer"
          },
          "ExchangeBulkUsers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeBulkUserDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeBulkUserDto:List": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "Feasibility": {
            "type": "string"
          },
          "StatusMessage": {
            "type": "string"
          },
          "PlanId": {
            "type": "string"
          },
          "Feasible": {
            "type": "boolean"
          },
          "IsCreated": {
            "type": "boolean"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExgBulkMailboxesDto:Request": {
        "type": "object",
        "properties": {
          "Mailboxes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExgBulkMailboxDto:List"
            }
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "Country": {
            "format": "int32",
            "type": "integer"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "ActiveSyncPolicy": {
            "type": "string"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "IsActivated": {
            "type": "boolean"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "Flag": {
            "type": "string"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "SAMAccount": {
            "type": "string"
          },
          "MailboxLitigationHoldEnabled": {
            "type": "boolean"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "FileName": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "CountryId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExgBulkMailboxDto:List": {
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Feasible": {
            "type": "boolean"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExgBulkMailboxDto": {
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Feasible": {
            "type": "boolean"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExgEditBulkMailboxDto:Request": {
        "type": "object",
        "properties": {
          "Property": {
            "type": "string"
          },
          "IsAllUsers": {
            "type": "boolean"
          },
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeRecipientDto"
            }
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "IsRetentionDefault": {
            "type": "boolean"
          },
          "IsPermanentDelete": {
            "type": "boolean"
          },
          "RetentionDays": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailboxOutOfOfficeDto": {
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "EnableAutoReply": {
            "type": "boolean"
          },
          "SetLimit": {
            "type": "boolean"
          },
          "SendExternalMessage": {
            "type": "boolean"
          },
          "AutoReplyState": {
            "type": "string"
          },
          "InternalMessage": {
            "type": "string"
          },
          "ExternalMessage": {
            "type": "string"
          },
          "ExternalAudience": {
            "type": "string"
          },
          "StartDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeMailboxOutOfOfficeDto:Request": {
        "type": "object",
        "properties": {
          "EnableAutoReply": {
            "type": "boolean"
          },
          "SetLimit": {
            "type": "boolean"
          },
          "SendExternalMessage": {
            "type": "boolean"
          },
          "AutoReplyState": {
            "type": "string"
          },
          "InternalMessage": {
            "type": "string"
          },
          "ExternalMessage": {
            "type": "string"
          },
          "ExternalAudience": {
            "type": "string"
          },
          "StartDateTime": {
            "format": "date-time",
            "type": "string"
          },
          "EndDateTime": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "ExchangeResourceMailboxesDto": {
        "type": "object",
        "properties": {
          "Mailboxes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExchangeResourceMailboxDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ExchangeResourceMailboxDto:List": {
        "required": [
          "MailboxType",
          "DisplayName",
          "MailDomainName"
        ],
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxType": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "MailDomainName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "Country": {
            "format": "int32",
            "type": "integer"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "IsActivated": {
            "type": "boolean"
          },
          "Password": {
            "type": "string"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "ActiveSyncPolicy": {
            "type": "string"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "Flag": {
            "type": "string"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "SAMAccount": {
            "type": "string"
          },
          "MailboxLitigationHoldEnabled": {
            "type": "boolean"
          },
          "ArchiveMailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          }
        }
      },
      "ExchangeResourceMailboxDto:Request": {
        "required": [
          "MailboxType",
          "DisplayName",
          "MailDomainName"
        ],
        "type": "object",
        "properties": {
          "MailboxType": {
            "type": "string",
            "description": "you can get mailbox types by calling 'GET /system-entities/exchange/resource-mailbox-types'.",
            "enum": [
              "room",
              "equipment"
            ]
          },
          "DisplayName": {
            "type": "string",
            "description": "Give display of resource mailbox."
          },
          "MailDomainName": {
            "type": "string",
            "description": "Give maildomain name to attach with resource mailbox display name."
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ExchangeResourceMailboxDto": {
        "required": [
          "MailboxType",
          "DisplayName",
          "MailDomainName"
        ],
        "type": "object",
        "properties": {
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "MailDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxType": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "SystemName": {
            "type": "string"
          },
          "MailDomainName": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "Country": {
            "format": "int32",
            "type": "integer"
          },
          "IMAP": {
            "type": "boolean"
          },
          "POP": {
            "type": "boolean"
          },
          "MAPI": {
            "type": "boolean"
          },
          "OWA": {
            "type": "boolean"
          },
          "MailboxSize": {
            "format": "int32",
            "type": "integer"
          },
          "HideFromAddressBook": {
            "type": "boolean"
          },
          "MaxIncomingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "MaxOutgoingMsgSize": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "IsActivated": {
            "type": "boolean"
          },
          "Password": {
            "type": "string"
          },
          "ActiveSync": {
            "type": "boolean"
          },
          "ActiveSyncPolicy": {
            "type": "string"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "Flag": {
            "type": "string"
          },
          "ProhibitSend": {
            "format": "int32",
            "type": "integer"
          },
          "WarnAt": {
            "format": "int32",
            "type": "integer"
          },
          "SAMAccount": {
            "type": "string"
          },
          "MailboxLitigationHoldEnabled": {
            "type": "boolean"
          },
          "ArchiveMailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "MailboxDatabase": {
            "type": "string"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "OrganizationMSOLId": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResourceDelegateListDto": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string"
          },
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceDelegateDto:List"
            }
          },
          "RecordCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResourceDelegateDto:List": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          }
        }
      },
      "PolicyUserListDto": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string"
          },
          "ExchangeRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PolicyUserDto:List"
            }
          },
          "RecordCount": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "PolicyUserDto:List": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          }
        }
      },
      "ResourceMailboxPropertiesDto": {
        "type": "object",
        "properties": {
          "bIsAllRequestOutOfPolicyUpdated": {
            "type": "boolean"
          },
          "bIsAllBookInPolicyUpdated": {
            "type": "boolean"
          },
          "bIsAllRequestInPolicyUpdated": {
            "type": "boolean"
          },
          "bIsAllowConflictsUpdated": {
            "type": "boolean"
          },
          "bIsAutomateProcessingUpdated": {
            "type": "boolean"
          },
          "bIsAllowRecurringMeetingsUpdated": {
            "type": "boolean"
          },
          "bIsScheduleOnlyDuringWorkHoursUpdated": {
            "type": "boolean"
          },
          "bIsEnforceSchedulingHorizonUpdated": {
            "type": "boolean"
          },
          "bIsBookingWindowInDaysUpdated": {
            "type": "boolean"
          },
          "bIsMaximumDurationInMinutesUpdated": {
            "type": "boolean"
          },
          "bIsMaximumConflictInstancesUpdated": {
            "type": "boolean"
          },
          "bIsConflictPercentageAllowedUpdated": {
            "type": "boolean"
          },
          "bIsForwardRequestsToDelegatesUpdated": {
            "type": "boolean"
          },
          "bIsDeleteAttachmentsUpdated": {
            "type": "boolean"
          },
          "bIsDeleteCommentsUpdated": {
            "type": "boolean"
          },
          "bIsDeleteSubjectUpdated": {
            "type": "boolean"
          },
          "bIsDeleteNonCalendarItemsUpdated": {
            "type": "boolean"
          },
          "bIsAddOrganizerToSubjectUpdated": {
            "type": "boolean"
          },
          "bIsRemovePrivatePropertyUpdated": {
            "type": "boolean"
          },
          "bIsOrganizerInfoUpdated": {
            "type": "boolean"
          },
          "bIsAddAdditionalResponseUpdated": {
            "type": "boolean"
          },
          "bIsTentativePendingApprovalUpdated": {
            "type": "boolean"
          },
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "AllowConflicts": {
            "type": "boolean"
          },
          "AutomateProcessing": {
            "type": "string"
          },
          "AllowRecurringMeetings": {
            "type": "boolean"
          },
          "ScheduleOnlyDuringWorkHours": {
            "type": "boolean"
          },
          "EnforceSchedulingHorizon": {
            "type": "boolean"
          },
          "BookingWindowInDays": {
            "format": "int32",
            "type": "integer"
          },
          "MaximumDurationInMinutes": {
            "format": "int32",
            "type": "integer"
          },
          "MaximumConflictInstances": {
            "format": "int32",
            "type": "integer"
          },
          "ConflictPercentageAllowed": {
            "format": "int32",
            "type": "integer"
          },
          "ForwardRequestsToDelegates": {
            "type": "boolean"
          },
          "DeleteAttachments": {
            "type": "boolean"
          },
          "DeleteComments": {
            "type": "boolean"
          },
          "DeleteSubject": {
            "type": "boolean"
          },
          "DeleteNonCalendarItems": {
            "type": "boolean"
          },
          "AddOrganizerToSubject": {
            "type": "boolean"
          },
          "RemovePrivateProperty": {
            "type": "boolean"
          },
          "OrganizerInfo": {
            "type": "boolean"
          },
          "AddAdditionalResponse": {
            "type": "boolean"
          },
          "AdditionalResponse": {
            "type": "string"
          },
          "TentativePendingApproval": {
            "type": "boolean"
          },
          "AllRequestOutOfPolicy": {
            "type": "boolean"
          },
          "AllBookInPolicy": {
            "type": "boolean"
          },
          "AllRequestInPolicy": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResourceMailboxPropertiesDto:Request": {
        "type": "object",
        "properties": {
          "bIsAllRequestOutOfPolicyUpdated": {
            "type": "boolean"
          },
          "bIsAllBookInPolicyUpdated": {
            "type": "boolean"
          },
          "bIsAllRequestInPolicyUpdated": {
            "type": "boolean"
          },
          "bIsAllowConflictsUpdated": {
            "type": "boolean"
          },
          "bIsAutomateProcessingUpdated": {
            "type": "boolean"
          },
          "bIsAllowRecurringMeetingsUpdated": {
            "type": "boolean"
          },
          "bIsScheduleOnlyDuringWorkHoursUpdated": {
            "type": "boolean"
          },
          "bIsEnforceSchedulingHorizonUpdated": {
            "type": "boolean"
          },
          "bIsBookingWindowInDaysUpdated": {
            "type": "boolean"
          },
          "bIsMaximumDurationInMinutesUpdated": {
            "type": "boolean"
          },
          "bIsMaximumConflictInstancesUpdated": {
            "type": "boolean"
          },
          "bIsConflictPercentageAllowedUpdated": {
            "type": "boolean"
          },
          "bIsForwardRequestsToDelegatesUpdated": {
            "type": "boolean"
          },
          "bIsDeleteAttachmentsUpdated": {
            "type": "boolean"
          },
          "bIsDeleteCommentsUpdated": {
            "type": "boolean"
          },
          "bIsDeleteSubjectUpdated": {
            "type": "boolean"
          },
          "bIsDeleteNonCalendarItemsUpdated": {
            "type": "boolean"
          },
          "bIsAddOrganizerToSubjectUpdated": {
            "type": "boolean"
          },
          "bIsRemovePrivatePropertyUpdated": {
            "type": "boolean"
          },
          "bIsOrganizerInfoUpdated": {
            "type": "boolean"
          },
          "bIsAddAdditionalResponseUpdated": {
            "type": "boolean"
          },
          "bIsTentativePendingApprovalUpdated": {
            "type": "boolean"
          },
          "MailboxId": {
            "format": "int32",
            "type": "integer"
          },
          "AllowConflicts": {
            "type": "boolean"
          },
          "AutomateProcessing": {
            "type": "string"
          },
          "AllowRecurringMeetings": {
            "type": "boolean"
          },
          "ScheduleOnlyDuringWorkHours": {
            "type": "boolean"
          },
          "EnforceSchedulingHorizon": {
            "type": "boolean"
          },
          "BookingWindowInDays": {
            "format": "int32",
            "type": "integer"
          },
          "MaximumDurationInMinutes": {
            "format": "int32",
            "type": "integer"
          },
          "MaximumConflictInstances": {
            "format": "int32",
            "type": "integer"
          },
          "ConflictPercentageAllowed": {
            "format": "int32",
            "type": "integer"
          },
          "ForwardRequestsToDelegates": {
            "type": "boolean"
          },
          "DeleteAttachments": {
            "type": "boolean"
          },
          "DeleteComments": {
            "type": "boolean"
          },
          "DeleteSubject": {
            "type": "boolean"
          },
          "DeleteNonCalendarItems": {
            "type": "boolean"
          },
          "AddOrganizerToSubject": {
            "type": "boolean"
          },
          "RemovePrivateProperty": {
            "type": "boolean"
          },
          "OrganizerInfo": {
            "type": "boolean"
          },
          "AddAdditionalResponse": {
            "type": "boolean"
          },
          "AdditionalResponse": {
            "type": "string"
          },
          "TentativePendingApproval": {
            "type": "boolean"
          },
          "AllRequestOutOfPolicy": {
            "type": "boolean"
          },
          "AllBookInPolicy": {
            "type": "boolean"
          },
          "AllRequestInPolicy": {
            "type": "boolean"
          }
        }
      },
      "SharePointUserWebApplicationListDto": {
        "type": "object",
        "properties": {
          "SharePointUserWebApplications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointUserWebApplicationDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointUserWebApplicationDto:Request": {
        "required": [
          "SharePointWebApplicationName",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "SharePointWebApplicationId": {
            "format": "int32",
            "type": "integer"
          },
          "SharePointWebApplicationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          }
        }
      },
      "SharePointUserWebApplicationDto": {
        "required": [
          "SharePointWebApplicationName",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "SharePointWebApplicationId": {
            "format": "int32",
            "type": "integer"
          },
          "SharePointWebApplicationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          }
        }
      },
      "AssignSharePointWebApplicationDto": {
        "type": "object",
        "properties": {
          "SharePointWebApplications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointUserWebApplicationDto"
            }
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AssignSharePointWebApplicationDto:Request": {
        "type": "object",
        "properties": {
          "SharePointWebApplications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointUserWebApplicationDto:Request"
            }
          }
        }
      },
      "SharePointGroupListDto": {
        "type": "object",
        "properties": {
          "SharePointGroups": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointGroupDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointGroupDto": {
        "required": [
          "GroupName",
          "Description"
        ],
        "type": "object",
        "properties": {
          "GroupName": {
            "type": "string"
          },
          "GroupLogin": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Dn": {
            "type": "string"
          },
          "SiteId": {
            "type": "string"
          },
          "SiteUrl": {
            "type": "string"
          },
          "GroupAdministrator": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "SharePointRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointRoleDto"
            }
          },
          "SharePointUsersLogin": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointGroupDto:Request": {
        "required": [
          "GroupName",
          "Description"
        ],
        "type": "object",
        "properties": {
          "GroupName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "GroupAdministrator": {
            "type": "string",
            "description": "you can get group administrator by calling 'GET /sharepoint/sites/{siteId}/users'."
          },
          "SharePointRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointRoleDto"
            },
            "description": "you can get SharePoint roles by calling 'GET /sharepoint/sites/{sharePointSiteId}/roles'."
          },
          "SharePointUsersLogin": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "you can get SharePoint users login by calling 'GET /sharepoint/sites/{siteId}/users'."
          }
        }
      },
      "SharePointGroupDto:List": {
        "required": [
          "GroupName",
          "Description"
        ],
        "type": "object",
        "properties": {
          "GroupName": {
            "type": "string"
          },
          "GroupLogin": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Dn": {
            "type": "string"
          },
          "SiteId": {
            "type": "string"
          },
          "SiteUrl": {
            "type": "string"
          },
          "GroupAdministrator": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "SharePointRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointRoleDto"
            }
          },
          "SharePointUsersLogin": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SharePointRoleDto": {
        "type": "object",
        "properties": {
          "RoleName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "SharePointRoleListDto": {
        "type": "object",
        "properties": {
          "SharePointRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointRoleDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointRoleListDto:Request": {
        "type": "object",
        "properties": {
          "SharePointRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointRoleDto"
            }
          }
        }
      },
      "SharePointUserListDto": {
        "type": "object",
        "properties": {
          "SPUsers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointUserDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointUserDto:List": {
        "required": [
          "UserName"
        ],
        "type": "object",
        "properties": {
          "CreateNewUser": {
            "type": "boolean"
          },
          "SPUserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "UserEmailAddress": {
            "type": "string"
          },
          "UserPassword": {
            "type": "string"
          },
          "UserLogin": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteUrl": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SharePointRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointRoleDto"
            }
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          }
        }
      },
      "SharePointUserDto:Request": {
        "required": [
          "UserName"
        ],
        "type": "object",
        "properties": {
          "CreateNewUser": {
            "type": "boolean",
            "description": "Set it true to create new user."
          },
          "UserName": {
            "type": "string"
          },
          "UserEmailAddress": {
            "type": "string",
            "description": "User email address is required when 'CreateNewUser' is true."
          },
          "UserPassword": {
            "type": "string",
            "description": "User password is required when 'CreateNewUser' is true."
          },
          "SharePointRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointRoleDto"
            },
            "description": "you can get SharePoint roles by calling 'GET /sharepoint/sites/{sharePointSiteId}/roles"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          }
        }
      },
      "SharePointUserDto": {
        "required": [
          "UserName"
        ],
        "type": "object",
        "properties": {
          "CreateNewUser": {
            "type": "boolean"
          },
          "SPUserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "UserEmailAddress": {
            "type": "string"
          },
          "UserPassword": {
            "type": "string"
          },
          "UserLogin": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteUrl": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SharePointRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointRoleDto"
            }
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointGroupMemberListDto": {
        "type": "object",
        "properties": {
          "SharePointGroupMembers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointGroupMemberDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointGroupMemberListDto:Request": {
        "type": "object",
        "properties": {
          "SharePointGroupMembers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointGroupMemberDto:List"
            }
          }
        }
      },
      "SharePointGroupMemberDto": {
        "type": "object",
        "properties": {
          "UserLogin": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointGroupMemberDto:List": {
        "type": "object",
        "properties": {
          "UserLogin": {
            "type": "string"
          }
        }
      },
      "SharePointSettingsDto": {
        "required": [
          "SharePointServerType",
          "HostName",
          "AdminUserName",
          "AdminUserPassword"
        ],
        "type": "object",
        "properties": {
          "SharePointServerType": {
            "type": "string"
          },
          "HostName": {
            "type": "string"
          },
          "AdminUserName": {
            "type": "string"
          },
          "AdminUserPassword": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADAdminPassword": {
            "type": "string"
          },
          "ParentOU": {
            "type": "string"
          },
          "WebRole": {
            "type": "boolean"
          },
          "WebApplication": {
            "type": "string"
          }
        }
      },
      "SharePointWebApplicationListDto": {
        "type": "object",
        "properties": {
          "SharePointWebApplications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointWebApplicationDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointWebApplicationDto": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "SharePointLocaleListDto": {
        "type": "object",
        "properties": {
          "SharePointLocales": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointLocaleDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointLocaleDto": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "Tag": {
            "type": "string"
          },
          "Lcid": {
            "type": "string"
          }
        }
      },
      "SharePointWebTemplateListDto": {
        "type": "object",
        "properties": {
          "SharePointWebTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointWebTemplateDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointWebTemplateDto": {
        "required": [
          "Lcid"
        ],
        "type": "object",
        "properties": {
          "TemplateId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Lcid": {
            "type": "string"
          }
        }
      },
      "SharePointSiteListDto": {
        "type": "object",
        "properties": {
          "SPSites": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SharePointSiteDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointSiteDto": {
        "required": [
          "SPHostHeader",
          "SPDomain",
          "ServerRoleId",
          "OrganizationId",
          "LanguageId",
          "SiteTemplateId",
          "SiteTitle",
          "SharePointUserName",
          "SharePointUserPassword"
        ],
        "type": "object",
        "properties": {
          "SPSiteId": {
            "format": "int32",
            "type": "integer"
          },
          "SPHostHeader": {
            "type": "string"
          },
          "SPDomain": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "MaxDatabaseSize": {
            "format": "int32",
            "type": "integer"
          },
          "SPUserUsage": {
            "format": "int32",
            "type": "integer"
          },
          "SPGroupUsage": {
            "format": "int32",
            "type": "integer"
          },
          "IsSubSite": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DBStorageUsage": {
            "format": "double",
            "type": "number"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ParentSiteId": {
            "format": "int32",
            "type": "integer"
          },
          "SitePath": {
            "type": "string"
          },
          "SiteUrl": {
            "type": "string"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "WebApplication": {
            "type": "string"
          },
          "LanguageId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteTemplateId": {
            "type": "string"
          },
          "SiteTitle": {
            "type": "string"
          },
          "DatabaseStorageSize": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseWarningEmailPercentage": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "SharePointUserName": {
            "type": "string"
          },
          "SharePointUserPassword": {
            "type": "string"
          },
          "OrganizationName": {
            "type": "string"
          },
          "OwnerName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointSiteDto:Request": {
        "required": [
          "SPHostHeader",
          "SPDomain",
          "ServerRoleId",
          "OrganizationId",
          "LanguageId",
          "SiteTemplateId",
          "SiteTitle",
          "SharePointUserName",
          "SharePointUserPassword"
        ],
        "type": "object",
        "properties": {
          "SPHostHeader": {
            "type": "string"
          },
          "SPDomain": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "WebApplication": {
            "type": "string"
          },
          "LanguageId": {
            "format": "int32",
            "type": "integer",
            "description": "You can get language id by calling 'GET /sharepoint-server/{serverRoleId}/locales'."
          },
          "SiteTemplateId": {
            "type": "string",
            "description": "You can get site template id by calling 'GET /sharepoint-server/{serverRoleId}/locales/{localeId}/web-templates'."
          },
          "SiteTitle": {
            "type": "string"
          },
          "DatabaseStorageSize": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseWarningEmailPercentage": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "SharePointUserName": {
            "type": "string"
          },
          "SharePointUserPassword": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "SharePointSiteDto:List": {
        "type": "object",
        "properties": {
          "SPSiteId": {
            "format": "int32",
            "type": "integer"
          },
          "SPHostHeader": {
            "type": "string"
          },
          "SPDomain": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "MaxDatabaseSize": {
            "format": "int32",
            "type": "integer"
          },
          "SPUserUsage": {
            "format": "int32",
            "type": "integer"
          },
          "SPGroupUsage": {
            "format": "int32",
            "type": "integer"
          },
          "IsSubSite": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DBStorageUsage": {
            "format": "double",
            "type": "number"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ParentSiteId": {
            "format": "int32",
            "type": "integer"
          },
          "SitePath": {
            "type": "string"
          },
          "SiteUrl": {
            "type": "string"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "WebApplication": {
            "type": "string"
          },
          "LanguageId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteTemplateId": {
            "type": "string"
          },
          "SiteTitle": {
            "type": "string"
          },
          "DatabaseStorageSize": {
            "format": "int32",
            "type": "integer"
          },
          "DatabaseWarningEmailPercentage": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "SharePointUserName": {
            "type": "string"
          },
          "SharePointUserPassword": {
            "type": "string"
          },
          "OrganizationName": {
            "type": "string"
          },
          "OwnerName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "SharePointSubSiteDto": {
        "required": [
          "SPHostHeader",
          "LanguageId",
          "SiteTemplateId",
          "OrganizationId",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "SPSiteId": {
            "format": "int32",
            "type": "integer"
          },
          "SPHostHeader": {
            "type": "string"
          },
          "SitePath": {
            "type": "string"
          },
          "SPDomain": {
            "type": "string"
          },
          "SiteUrl": {
            "type": "string"
          },
          "SiteTitle": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "UseUniquePermissions": {
            "type": "boolean"
          },
          "LanguageId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteTemplateId": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ApiUserId": {
            "format": "int32",
            "type": "integer"
          },
          "ParentSiteId": {
            "format": "int32",
            "type": "integer"
          },
          "IsSubSite": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointSubSiteDto:Request": {
        "required": [
          "SPHostHeader",
          "LanguageId",
          "SiteTemplateId",
          "OrganizationId",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "SPHostHeader": {
            "type": "string"
          },
          "SiteTitle": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "UseUniquePermissions": {
            "type": "boolean",
            "description": "Set this true to use your own user permissions setting, otherwise it use parent site permissions."
          },
          "LanguageId": {
            "format": "int32",
            "type": "integer",
            "description": "You can get language id by calling 'GET /sharepoint-server/{serverRoleId}/locales'."
          },
          "SiteTemplateId": {
            "type": "string",
            "description": "You can get site template id by calling 'GET /sharepoint-server/{serverRoleId}/locales/{localeId}/web-templates'."
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SharePointSiteDetailDto": {
        "type": "object",
        "properties": {
          "DatabaseStorageUsage": {
            "format": "int32",
            "type": "integer"
          },
          "StorageMaximumLevel": {
            "format": "int32",
            "type": "integer"
          },
          "StorageWarningLevel": {
            "format": "int32",
            "type": "integer"
          },
          "Bandwidth": {
            "format": "double",
            "type": "number"
          },
          "Hits": {
            "format": "int32",
            "type": "integer"
          },
          "UsagePercentage": {
            "format": "double",
            "type": "number"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointUserChangePasswordDto": {
        "required": [
          "SPUserId",
          "Password"
        ],
        "type": "object",
        "properties": {
          "SPUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointUserChangePasswordDto:Request": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          }
        }
      },
      "SharePointGeneralProfileDto": {
        "type": "object",
        "properties": {
          "SPUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SharePointGeneralProfileDto:Request": {
        "type": "object",
        "properties": {
          "SPUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SiteId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          }
        }
      },
      "SkypeGroupListDto": {
        "type": "object",
        "properties": {
          "SkypeGroups": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeGroupDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeGroupDto:List": {
        "required": [
          "ResponseGroupName",
          "OrganizationId",
          "Description"
        ],
        "type": "object",
        "properties": {
          "ResponseGroupId": {
            "format": "int32",
            "type": "integer"
          },
          "ResponseGroupName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "GroupIdentity": {
            "type": "string"
          },
          "ApplicationServiceName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "AgentAlertTime": {
            "format": "int32",
            "type": "integer"
          },
          "ParticipationPolicy": {
            "type": "string"
          },
          "RoutingMethod": {
            "type": "string"
          },
          "DistributionGroupAddress": {
            "type": "string"
          },
          "EnterpriseVoiceUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SkypeGroupDto": {
        "required": [
          "ResponseGroupName",
          "OrganizationId",
          "Description"
        ],
        "type": "object",
        "properties": {
          "ResponseGroupId": {
            "format": "int32",
            "type": "integer"
          },
          "ResponseGroupName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "GroupIdentity": {
            "type": "string"
          },
          "ApplicationServiceName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "AgentAlertTime": {
            "format": "int32",
            "type": "integer"
          },
          "ParticipationPolicy": {
            "type": "string"
          },
          "RoutingMethod": {
            "type": "string"
          },
          "DistributionGroupAddress": {
            "type": "string"
          },
          "EnterpriseVoiceUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeGroupDto:Request": {
        "required": [
          "ResponseGroupName",
          "OrganizationId",
          "Description"
        ],
        "type": "object",
        "properties": {
          "ResponseGroupName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ApplicationServiceName": {
            "type": "string",
            "description": "Application service name should be in the format, 'ApplicationServer:application server name'."
          },
          "Description": {
            "type": "string"
          },
          "AgentAlertTime": {
            "format": "int32",
            "type": "integer"
          },
          "ParticipationPolicy": {
            "type": "string",
            "enum": [
              "Informal",
              "Formal"
            ]
          },
          "RoutingMethod": {
            "type": "string",
            "enum": [
              "LongestIdle",
              "Serial",
              "Parallel",
              "RoundRobin",
              "Attendant"
            ]
          },
          "EnterpriseVoiceUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SkypeQueueListDto": {
        "type": "object",
        "properties": {
          "SkypeQueues": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeQueueDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeQueueDto:List": {
        "required": [
          "ResponseQueueName",
          "OrganizationId",
          "Description"
        ],
        "type": "object",
        "properties": {
          "ResponseQueueId": {
            "format": "int32",
            "type": "integer"
          },
          "ResponseQueueName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "QueueIdentity": {
            "type": "string"
          },
          "ApplicationServiceName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "EnableQueueTimeout": {
            "type": "boolean"
          },
          "TimeoutAction": {
            "type": "string"
          },
          "TimeoutPeriod": {
            "format": "int32",
            "type": "integer"
          },
          "TimeoutQueueIdentity": {
            "type": "string"
          },
          "TimeoutQueueName": {
            "type": "string"
          },
          "TimeoutAddress": {
            "type": "string"
          },
          "EnableQueueOverflow": {
            "type": "boolean"
          },
          "OverflowAction": {
            "type": "string"
          },
          "OverflowCandidate": {
            "type": "string"
          },
          "OverflowQueueIdentity": {
            "type": "string"
          },
          "OverflowQueueName": {
            "type": "string"
          },
          "MaximumCalls": {
            "format": "int32",
            "type": "integer"
          },
          "AgentAlertTime": {
            "format": "int32",
            "type": "integer"
          },
          "ParticipationPolicy": {
            "type": "string"
          },
          "RoutingMethod": {
            "type": "string"
          },
          "OverflowAddress": {
            "type": "string"
          },
          "DistributionGroupAddress": {
            "type": "string"
          },
          "Groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "GroupIdentities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SkypeQueueDto": {
        "required": [
          "ResponseQueueName",
          "OrganizationId",
          "Description"
        ],
        "type": "object",
        "properties": {
          "ResponseQueueId": {
            "format": "int32",
            "type": "integer"
          },
          "ResponseQueueName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "QueueIdentity": {
            "type": "string"
          },
          "ApplicationServiceName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "EnableQueueTimeout": {
            "type": "boolean"
          },
          "TimeoutAction": {
            "type": "string"
          },
          "TimeoutPeriod": {
            "format": "int32",
            "type": "integer"
          },
          "TimeoutQueueIdentity": {
            "type": "string"
          },
          "TimeoutQueueName": {
            "type": "string"
          },
          "TimeoutAddress": {
            "type": "string"
          },
          "EnableQueueOverflow": {
            "type": "boolean"
          },
          "OverflowAction": {
            "type": "string"
          },
          "OverflowCandidate": {
            "type": "string"
          },
          "OverflowQueueIdentity": {
            "type": "string"
          },
          "OverflowQueueName": {
            "type": "string"
          },
          "MaximumCalls": {
            "format": "int32",
            "type": "integer"
          },
          "AgentAlertTime": {
            "format": "int32",
            "type": "integer"
          },
          "ParticipationPolicy": {
            "type": "string"
          },
          "RoutingMethod": {
            "type": "string"
          },
          "OverflowAddress": {
            "type": "string"
          },
          "DistributionGroupAddress": {
            "type": "string"
          },
          "Groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "GroupIdentities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeQueueDto:Request": {
        "required": [
          "ResponseQueueName",
          "OrganizationId",
          "Description"
        ],
        "type": "object",
        "properties": {
          "ResponseQueueName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ApplicationServiceName": {
            "type": "string",
            "description": "Application service name should be in the format, 'ApplicationServer:application server name'."
          },
          "Description": {
            "type": "string"
          },
          "EnableQueueTimeout": {
            "type": "boolean"
          },
          "TimeoutAction": {
            "type": "string",
            "enum": [
              "TransferToQueue",
              "TransferToUri",
              "TransferToVoicemailUri",
              "TransferToPstn",
              "Terminate"
            ],
            "description": "Timeout action is required when 'EnableQueueTimeout' is true."
          },
          "TimeoutPeriod": {
            "format": "int32",
            "type": "integer",
            "description": "Timeout period is required when 'EnableQueueTimeout' is true."
          },
          "TimeoutQueueName": {
            "type": "string",
            "description": "Timeout queue name is required when 'TimeoutAction' is set as 'TransferToQueue'."
          },
          "TimeoutAddress": {
            "type": "string",
            "description": "Timeout queue name is required when 'TimeoutAction' is set as 'TransferToUri' or 'TransferToVoicemailUri' or 'TransferToPstn'."
          },
          "EnableQueueOverflow": {
            "type": "boolean"
          },
          "OverflowAction": {
            "type": "string",
            "description": "Overflow action is required when 'EnableQueueOverflow' is true.",
            "enum": [
              "TransferToQueue",
              "TransferToUri",
              "TransferToVoicemailUri",
              "TransferToPstn",
              "Terminate"
            ]
          },
          "OverflowQueueName": {
            "type": "string",
            "description": "Overflow queue name is required when 'OverflowAction' is set as 'TransferToQueue'."
          },
          "MaximumCalls": {
            "format": "int32",
            "type": "integer",
            "description": "Maximum calls is required when 'EnableQueueOverflow' is true."
          },
          "OverflowAddress": {
            "type": "string",
            "description": "Overflow address is required when 'OverflowAction' is set as 'TransferToUri' or 'TransferToVoicemailUri' or 'TransferToPstn'."
          },
          "Groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SkypeSettingsDto": {
        "type": "object",
        "properties": {
          "ServerIp": {
            "type": "string"
          },
          "DomainController": {
            "type": "string"
          },
          "ADAdmin": {
            "type": "string"
          },
          "ADPassword": {
            "type": "string"
          },
          "ParentOU": {
            "type": "string"
          },
          "HostName": {
            "type": "string"
          },
          "AdminUserName": {
            "type": "string"
          },
          "AdminUserPassword": {
            "type": "string"
          },
          "UserRegistrarPool": {
            "type": "string"
          },
          "SkypeServerType": {
            "type": "string"
          }
        }
      },
      "SkypeRegistrarPoolListDto": {
        "type": "object",
        "properties": {
          "Pools": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeRegistrarPoolDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeRegistrarPoolDto": {
        "type": "object",
        "properties": {
          "PoolName": {
            "type": "string"
          }
        }
      },
      "AssignSkypeServerPoolListDto": {
        "required": [
          "UserId"
        ],
        "type": "object",
        "properties": {
          "Pools": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssignSkypeServerPoolDto"
            }
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AssignSkypeServerPoolDto": {
        "required": [
          "PoolName",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "PoolName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SkypeTimeZoneListDto": {
        "type": "object",
        "properties": {
          "TimeZones": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeTimeZoneDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeTimeZoneDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          }
        }
      },
      "LineUriListDto": {
        "type": "object",
        "properties": {
          "LineUris": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LineUriDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "LineUriDto:List": {
        "required": [
          "LineURI",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "LineURIId": {
            "format": "int32",
            "type": "integer"
          },
          "LineURI": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "AssignedTo": {
            "format": "int32",
            "type": "integer"
          },
          "IsUsed": {
            "type": "boolean"
          },
          "AssignedToUserName": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          }
        }
      },
      "LineUriDto": {
        "required": [
          "LineURI",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "LineURIId": {
            "format": "int32",
            "type": "integer"
          },
          "LineURI": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "AssignedTo": {
            "format": "int32",
            "type": "integer"
          },
          "IsUsed": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "ModifiedBy": {
            "format": "int32",
            "type": "integer"
          },
          "DeletedBy": {
            "format": "int32",
            "type": "integer"
          },
          "AssignedToUserName": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AssignLineUriListDto": {
        "required": [
          "UserId"
        ],
        "type": "object",
        "properties": {
          "LineUris": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssignLineUriDto"
            }
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AssignLineUriDto": {
        "required": [
          "LineURIId"
        ],
        "type": "object",
        "properties": {
          "LineURIId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeFederatedDomainListDto": {
        "type": "object",
        "properties": {
          "FederatedDomains": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeFederatedDomainDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeFederatedDomainDto:List": {
        "required": [
          "Comment",
          "DomainType",
          "DomainName"
        ],
        "type": "object",
        "properties": {
          "Comment": {
            "type": "string"
          },
          "DomainType": {
            "type": "string"
          },
          "ProxyFqdn": {
            "type": "string"
          },
          "DomainName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SkypeFederatedDomainDto": {
        "required": [
          "Comment",
          "DomainType",
          "DomainName"
        ],
        "type": "object",
        "properties": {
          "Comment": {
            "type": "string"
          },
          "DomainType": {
            "type": "string"
          },
          "ProxyFqdn": {
            "type": "string"
          },
          "DomainName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserPoliciesListDto": {
        "type": "object",
        "properties": {
          "ConferencingPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "ClientVersionPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "PinPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "ExternalAccessPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "ArchivingPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "LocationPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "MobilityPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "PersistentChatPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "ClientPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "VoicePolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "DialInPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserPolicyDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserPolicyDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "SkypeApplicationServicesListDto": {
        "type": "object",
        "properties": {
          "ApplicationServices": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeApplicationServiceDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeApplicationServiceDto": {
        "type": "object",
        "properties": {
          "ApplicationServiceName": {
            "type": "string"
          }
        }
      },
      "AssignSkypeApplicationServiceListDto": {
        "required": [
          "UserId"
        ],
        "type": "object",
        "properties": {
          "ApplicationServices": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssignSkypeApplicationServiceDto"
            }
          },
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AssignSkypeApplicationServiceDto": {
        "required": [
          "ApplicationServiceName",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "ApplicationServiceName": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SkypeSipDomainListDto": {
        "type": "object",
        "properties": {
          "SipDomains": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeSipDomainDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeSipDomainDto:List": {
        "required": [
          "SIPDomainName",
          "OrganizationId",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "SIPDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "SIPDomainName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "UserCount": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "MeetSimpleURL": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SkypeSipDomainDto": {
        "required": [
          "SIPDomainName",
          "OrganizationId",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "SIPDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "SIPDomainName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "UserCount": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "ModifiedBy": {
            "format": "int32",
            "type": "integer"
          },
          "DeletedBy": {
            "format": "int32",
            "type": "integer"
          },
          "MeetSimpleURL": {
            "type": "string"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeSipDomainDto:Request": {
        "required": [
          "SIPDomainName",
          "OrganizationId",
          "ServerRoleId"
        ],
        "type": "object",
        "properties": {
          "SIPDomainName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer",
            "description": "Give owner id in case of creating sip domain for any descendent user."
          }
        }
      },
      "SkypeUserListDto": {
        "type": "object",
        "properties": {
          "SkypeUsers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeUserDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserDto:List": {
        "required": [
          "SkypeUserName",
          "SIPDomainId",
          "TelephonyOption"
        ],
        "type": "object",
        "properties": {
          "SkypeUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SkypeUserName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SIPAddress": {
            "type": "string"
          },
          "SIPDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "SIPDomainName": {
            "type": "string"
          },
          "UserServerPool": {
            "type": "string"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "LineURIId": {
            "format": "int32",
            "type": "integer"
          },
          "GUID": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "SipAddressType": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "EnterpriseVoiceEnabled": {
            "type": "boolean"
          },
          "RemoteCallControlEnabled": {
            "type": "boolean"
          },
          "RemoteCallControlOnly": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "OrganizationName": {
            "type": "string"
          },
          "TelephonyOption": {
            "type": "string"
          },
          "LineServerUri": {
            "type": "string"
          },
          "LineUri": {
            "type": "string"
          },
          "VoicePolicy": {
            "type": "string"
          },
          "DialPlan": {
            "type": "string"
          },
          "MeetingPolicy": {
            "type": "string"
          },
          "MeetingPolicyDetails": {
            "type": "string"
          },
          "ConferencingPolicy": {
            "type": "string"
          },
          "ClientVersionPolicy": {
            "type": "string"
          },
          "PinPolicy": {
            "type": "string"
          },
          "ExternalAccessPolicy": {
            "type": "string"
          },
          "ArchivingPolicy": {
            "type": "string"
          },
          "LocationPolicy": {
            "type": "string"
          },
          "MobilityPolicy": {
            "type": "string"
          },
          "ClientPolicy": {
            "type": "string"
          },
          "PersistentChatPolicy": {
            "type": "string"
          },
          "FederationEnabled": {
            "type": "boolean"
          },
          "RemoteUserAccess": {
            "type": "boolean"
          },
          "PublicImConnectivity": {
            "type": "boolean"
          },
          "EnhancedPresence": {
            "type": "boolean"
          },
          "ArchiveInternalMessages": {
            "type": "boolean"
          },
          "ArchiveFederatedMessages": {
            "type": "boolean"
          },
          "AnonymousRecipients": {
            "type": "boolean"
          },
          "PbxIntegrationEnabled": {
            "type": "boolean"
          }
        }
      },
      "SkypeUserDto:Request": {
        "required": [
          "SkypeUserName",
          "SIPDomainId",
          "TelephonyOption"
        ],
        "type": "object",
        "properties": {
          "SkypeUserName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SIPDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "UserServerPool": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name should be given if not provided in general profile, it will be ignored if passed in general profile."
          },
          "Password": {
            "type": "string"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "TelephonyOption": {
            "type": "string",
            "enum": [
              "pctopc",
              "enterprisevoice",
              "audiovideodisabled",
              "remotecallcontrol",
              "remotecallcontrolonly"
            ]
          },
          "LineServerUri": {
            "type": "string",
            "description": "It depends on 'TelephonyOption', Its value is required when telephony option is 'remotecallcontrol' and 'remotecallcontrolonly'."
          },
          "LineUri": {
            "type": "string",
            "description": "It depends on 'TelephonyOption', It is not required when telephony option is 'audiovideodisabled'."
          },
          "VoicePolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "MeetingPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "ConferencingPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "ClientVersionPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "PinPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "ExternalAccessPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "ArchivingPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "LocationPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "MobilityPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "ClientPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          },
          "PersistentChatPolicy": {
            "type": "string",
            "description": "Policy format should be 'Tag:policy name', You can get policies list by calling 'GET /skype-server/{serverRoleId}/user-policies'."
          }
        }
      },
      "SkypeUserDto": {
        "required": [
          "SkypeUserName",
          "SIPDomainId",
          "TelephonyOption"
        ],
        "type": "object",
        "properties": {
          "SkypeUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SkypeUserName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "SIPAddress": {
            "type": "string"
          },
          "SIPDomainId": {
            "format": "int32",
            "type": "integer"
          },
          "SIPDomainName": {
            "type": "string"
          },
          "UserServerPool": {
            "type": "string"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "LineURIId": {
            "format": "int32",
            "type": "integer"
          },
          "GUID": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "SipAddressType": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "EnterpriseVoiceEnabled": {
            "type": "boolean"
          },
          "RemoteCallControlEnabled": {
            "type": "boolean"
          },
          "RemoteCallControlOnly": {
            "type": "boolean"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "ModifiedBy": {
            "format": "int32",
            "type": "integer"
          },
          "DeletedBy": {
            "format": "int32",
            "type": "integer"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "OrganizationName": {
            "type": "string"
          },
          "TelephonyOption": {
            "type": "string"
          },
          "LineServerUri": {
            "type": "string"
          },
          "LineUri": {
            "type": "string"
          },
          "VoicePolicy": {
            "type": "string"
          },
          "DialPlan": {
            "type": "string"
          },
          "MeetingPolicy": {
            "type": "string"
          },
          "MeetingPolicyDetails": {
            "type": "string"
          },
          "ConferencingPolicy": {
            "type": "string"
          },
          "ClientVersionPolicy": {
            "type": "string"
          },
          "PinPolicy": {
            "type": "string"
          },
          "ExternalAccessPolicy": {
            "type": "string"
          },
          "ArchivingPolicy": {
            "type": "string"
          },
          "LocationPolicy": {
            "type": "string"
          },
          "MobilityPolicy": {
            "type": "string"
          },
          "ClientPolicy": {
            "type": "string"
          },
          "PersistentChatPolicy": {
            "type": "string"
          },
          "FederationEnabled": {
            "type": "boolean"
          },
          "RemoteUserAccess": {
            "type": "boolean"
          },
          "PublicImConnectivity": {
            "type": "boolean"
          },
          "EnhancedPresence": {
            "type": "boolean"
          },
          "ArchiveInternalMessages": {
            "type": "boolean"
          },
          "ArchiveFederatedMessages": {
            "type": "boolean"
          },
          "AnonymousRecipients": {
            "type": "boolean"
          },
          "PbxIntegrationEnabled": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserChangePasswordDto": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "SkypeUserId": {
            "format": "int32",
            "type": "integer"
          },
          "Password": {
            "type": "string"
          },
          "SkypeUserName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserChangePasswordDto:Request": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "SkypeUserName": {
            "type": "string"
          }
        }
      },
      "SkypeUserGeneralProfileDto": {
        "type": "object",
        "properties": {
          "SkypeUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SkypeUserName": {
            "type": "string"
          },
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserGeneralProfileDto:Request": {
        "type": "object",
        "properties": {
          "GeneralProfile": {
            "$ref": "#/definitions/UserGeneralProfileDto"
          }
        }
      },
      "SkypeUserAdvancedPropertiesDto": {
        "type": "object",
        "properties": {
          "SkypeUserId": {
            "format": "int32",
            "type": "integer"
          },
          "SkypeUserName": {
            "type": "string"
          },
          "LineURIId": {
            "format": "int32",
            "type": "integer"
          },
          "TelephonyOption": {
            "type": "string"
          },
          "LineServerUri": {
            "type": "string"
          },
          "LineUri": {
            "type": "string"
          },
          "VoicePolicy": {
            "type": "string"
          },
          "DialPlan": {
            "type": "string"
          },
          "MeetingPolicy": {
            "type": "string"
          },
          "MeetingPolicyDetails": {
            "type": "string"
          },
          "ConferencingPolicy": {
            "type": "string"
          },
          "ClientVersionPolicy": {
            "type": "string"
          },
          "PinPolicy": {
            "type": "string"
          },
          "ExternalAccessPolicy": {
            "type": "string"
          },
          "ArchivingPolicy": {
            "type": "string"
          },
          "LocationPolicy": {
            "type": "string"
          },
          "MobilityPolicy": {
            "type": "string"
          },
          "ClientPolicy": {
            "type": "string"
          },
          "PersistentChatPolicy": {
            "type": "string"
          },
          "FederationEnabled": {
            "type": "boolean"
          },
          "RemoteUserAccess": {
            "type": "boolean"
          },
          "PublicImConnectivity": {
            "type": "boolean"
          },
          "EnhancedPresence": {
            "type": "boolean"
          },
          "ArchiveInternalMessages": {
            "type": "boolean"
          },
          "ArchiveFederatedMessages": {
            "type": "boolean"
          },
          "AnonymousRecipients": {
            "type": "boolean"
          },
          "PbxIntegrationEnabled": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserAdvancedPropertiesDto:Request": {
        "required": [
          "SkypeUserId"
        ],
        "type": "object",
        "properties": {
          "SkypeUserName": {
            "type": "string"
          },
          "LineURIId": {
            "format": "int32",
            "type": "integer"
          },
          "TelephonyOption": {
            "type": "string"
          },
          "LineServerUri": {
            "type": "string"
          },
          "LineUri": {
            "type": "string"
          },
          "VoicePolicy": {
            "type": "string"
          },
          "DialPlan": {
            "type": "string"
          },
          "MeetingPolicy": {
            "type": "string"
          },
          "MeetingPolicyDetails": {
            "type": "string"
          },
          "ConferencingPolicy": {
            "type": "string"
          },
          "ClientVersionPolicy": {
            "type": "string"
          },
          "PinPolicy": {
            "type": "string"
          },
          "ExternalAccessPolicy": {
            "type": "string"
          },
          "ArchivingPolicy": {
            "type": "string"
          },
          "LocationPolicy": {
            "type": "string"
          },
          "MobilityPolicy": {
            "type": "string"
          },
          "ClientPolicy": {
            "type": "string"
          },
          "PersistentChatPolicy": {
            "type": "string"
          },
          "FederationEnabled": {
            "type": "boolean"
          },
          "RemoteUserAccess": {
            "type": "boolean"
          },
          "PublicImConnectivity": {
            "type": "boolean"
          },
          "EnhancedPresence": {
            "type": "boolean"
          },
          "ArchiveInternalMessages": {
            "type": "boolean"
          },
          "ArchiveFederatedMessages": {
            "type": "boolean"
          },
          "AnonymousRecipients": {
            "type": "boolean"
          },
          "PbxIntegrationEnabled": {
            "type": "boolean"
          }
        }
      },
      "SkypeUserStatusDto": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserStatusDto:Request": {
        "type": "object",
        "properties": {
          "IsDisabled": {
            "type": "boolean"
          }
        }
      },
      "SkypeUserForwardingSettingsDto": {
        "required": [
          "ForwardTo"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "ForwardTo": {
            "type": "string"
          },
          "ForwardImmidiately": {
            "type": "boolean"
          },
          "ForwardAfter": {
            "type": "string"
          },
          "EnableCallForwarding": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserForwardingSettingsDto:Request": {
        "required": [
          "ForwardTo"
        ],
        "type": "object",
        "properties": {
          "ForwardTo": {
            "type": "string"
          },
          "ForwardImmidiately": {
            "type": "boolean"
          },
          "ForwardAfter": {
            "type": "string"
          },
          "EnableCallForwarding": {
            "type": "boolean"
          }
        }
      },
      "SkypeBulkUsersFeasibilityDto": {
        "required": [
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeBulkUserDto"
            }
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeBulkUsersFeasibilityDto:Request": {
        "required": [
          "OrganizationId"
        ],
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeBulkUserDto"
            }
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SkypeBulkUserDto": {
        "required": [
          "UserName"
        ],
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "SipAddress": {
            "type": "string"
          },
          "SipAddressType": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "IsFeasible": {
            "type": "boolean"
          },
          "OfficeLocation": {
            "type": "string"
          },
          "FileName": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "CountryId": {
            "format": "int32",
            "type": "integer"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Company": {
            "type": "string"
          },
          "Feasibility": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          }
        }
      },
      "SkypeBulkUsersListDto": {
        "required": [
          "OrganizationId",
          "UserServerPool"
        ],
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeBulkUserDto"
            }
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "UserServerPool": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeBulkUsersListDto:Request": {
        "required": [
          "OrganizationId",
          "UserServerPool"
        ],
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeBulkUserDto"
            }
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "UserServerPool": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SkypeUserTelephonySettingsDto": {
        "required": [
          "TelephonyOption"
        ],
        "type": "object",
        "properties": {
          "SkypeUserId": {
            "format": "int32",
            "type": "integer"
          },
          "TelephonyOption": {
            "type": "string"
          },
          "LineServerUri": {
            "type": "string"
          },
          "LineUri": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserTelephonySettingsDto:Request": {
        "required": [
          "TelephonyOption"
        ],
        "type": "object",
        "properties": {
          "TelephonyOption": {
            "type": "string"
          },
          "LineServerUri": {
            "type": "string"
          },
          "LineUri": {
            "type": "string"
          }
        }
      },
      "SkypeUserPolicySettingsDto": {
        "type": "object",
        "properties": {
          "SkypeUserId": {
            "format": "int32",
            "type": "integer"
          },
          "VoicePolicy": {
            "type": "string"
          },
          "DialPlan": {
            "type": "string"
          },
          "MeetingPolicy": {
            "type": "string"
          },
          "MeetingPolicyDetails": {
            "type": "string"
          },
          "ConferencingPolicy": {
            "type": "string"
          },
          "ClientVersionPolicy": {
            "type": "string"
          },
          "PinPolicy": {
            "type": "string"
          },
          "ExternalAccessPolicy": {
            "type": "string"
          },
          "ArchivingPolicy": {
            "type": "string"
          },
          "LocationPolicy": {
            "type": "string"
          },
          "MobilityPolicy": {
            "type": "string"
          },
          "ClientPolicy": {
            "type": "string"
          },
          "PersistentChatPolicy": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeUserPolicySettingsDto:Request": {
        "type": "object",
        "properties": {
          "VoicePolicy": {
            "type": "string"
          },
          "DialPlan": {
            "type": "string"
          },
          "MeetingPolicy": {
            "type": "string"
          },
          "MeetingPolicyDetails": {
            "type": "string"
          },
          "ConferencingPolicy": {
            "type": "string"
          },
          "ClientVersionPolicy": {
            "type": "string"
          },
          "PinPolicy": {
            "type": "string"
          },
          "ExternalAccessPolicy": {
            "type": "string"
          },
          "ArchivingPolicy": {
            "type": "string"
          },
          "LocationPolicy": {
            "type": "string"
          },
          "MobilityPolicy": {
            "type": "string"
          },
          "ClientPolicy": {
            "type": "string"
          },
          "PersistentChatPolicy": {
            "type": "string"
          }
        }
      },
      "SkypeWorkflowListDto": {
        "type": "object",
        "properties": {
          "SkypeWorkflows": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeWorkflowDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeWorkflowDto:List": {
        "required": [
          "WorkflowName",
          "OrganizationId",
          "SIPAddress",
          "LanguageName",
          "ApplicationServiceName"
        ],
        "type": "object",
        "properties": {
          "WorkflowId": {
            "format": "int32",
            "type": "integer"
          },
          "WorkflowName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "SIPAddress": {
            "type": "string"
          },
          "DisplayNumber": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "GUID": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "LineURIId": {
            "format": "int32",
            "type": "integer"
          },
          "LineURI": {
            "type": "string"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "WorkflowIdentity": {
            "type": "string"
          },
          "LanguageName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "IsActivated": {
            "type": "boolean"
          },
          "IsFederationEnabled": {
            "type": "boolean"
          },
          "IsAnonymityEnabled": {
            "type": "boolean"
          },
          "IsManaged": {
            "type": "boolean"
          },
          "TimeZone": {
            "type": "string"
          },
          "UseDefaultBusinessHours": {
            "type": "boolean"
          },
          "CustomMusicOnHoldFile": {
            "type": "string"
          },
          "ApplicationServiceName": {
            "type": "string"
          },
          "Managers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SkypeWorkflowDto": {
        "required": [
          "WorkflowName",
          "OrganizationId",
          "SIPAddress",
          "LanguageName",
          "ApplicationServiceName"
        ],
        "type": "object",
        "properties": {
          "WorkflowId": {
            "format": "int32",
            "type": "integer"
          },
          "WorkflowName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationName": {
            "type": "string"
          },
          "SIPAddress": {
            "type": "string"
          },
          "DisplayNumber": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "GUID": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "LineURIId": {
            "format": "int32",
            "type": "integer"
          },
          "LineURI": {
            "type": "string"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "WorkflowIdentity": {
            "type": "string"
          },
          "LanguageName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "IsActivated": {
            "type": "boolean"
          },
          "IsFederationEnabled": {
            "type": "boolean"
          },
          "IsAnonymityEnabled": {
            "type": "boolean"
          },
          "IsManaged": {
            "type": "boolean"
          },
          "TimeZone": {
            "type": "string"
          },
          "UseDefaultBusinessHours": {
            "type": "boolean"
          },
          "CustomMusicOnHoldFile": {
            "type": "string"
          },
          "ApplicationServiceName": {
            "type": "string"
          },
          "Managers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeWorkflowDto:Request": {
        "required": [
          "WorkflowName",
          "OrganizationId",
          "SIPAddress",
          "LanguageName",
          "ApplicationServiceName",
          "Description"
        ],
        "type": "object",
        "properties": {
          "WorkflowName": {
            "type": "string"
          },
          "OrganizationId": {
            "format": "int32",
            "type": "integer"
          },
          "SIPAddress": {
            "type": "string",
            "description": "SIP adress should be in given format, 'sip:displayName@sipDomainName' "
          },
          "DisplayNumber": {
            "type": "string"
          },
          "Type": {
            "type": "string",
            "enum": [
              "Managed",
              "Unmanaged"
            ]
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "LineURIId": {
            "format": "int32",
            "type": "integer",
            "description": "You can get line URI id by calling 'GET /skype-server/line-uris'."
          },
          "LanguageName": {
            "type": "string",
            "description": "You can get languages by calling 'GET /system-entities/skype/workflow-languages'."
          },
          "Description": {
            "type": "string"
          },
          "IsFederationEnabled": {
            "type": "boolean"
          },
          "IsAnonymityEnabled": {
            "type": "boolean"
          },
          "TimeZone": {
            "type": "string",
            "description": "You can get time zones by calling 'GET /skype-server/{serverRoleId}/time-zones'."
          },
          "ApplicationServiceName": {
            "type": "string",
            "description": "Application service name should be in the format, 'ApplicationServer:application server name'."
          },
          "Managers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Managers required when 'type' is 'Managed'."
          }
        }
      },
      "SkypeWorkflowGeneralSettingsDto": {
        "type": "object",
        "properties": {
          "WorkflowName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "LineUri": {
            "type": "string"
          },
          "DisplayNumber": {
            "type": "string"
          },
          "Language": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          }
        }
      },
      "SkypeWorkflowStatusDto": {
        "type": "object",
        "properties": {
          "WorkflowId": {
            "format": "int32",
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeWorkflowStatusDto:Request": {
        "type": "object",
        "properties": {
          "IsDisabled": {
            "type": "boolean"
          }
        }
      },
      "SkypeWorkflowIvrSettingsDto": {
        "type": "object",
        "properties": {
          "WorkflowId": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "DefaultAction": {
            "$ref": "#/definitions/SkypeResponseGroupCallActionDto"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SkypeWorkflowIvrSettingsDto:Request": {
        "type": "object",
        "properties": {
          "WorkflowId": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "DefaultAction": {
            "$ref": "#/definitions/SkypeResponseGroupCallActionDto"
          }
        }
      },
      "SkypeResponseGroupCallActionDto": {
        "type": "object",
        "properties": {
          "CallActionType": {
            "type": "string"
          },
          "Prompt": {
            "$ref": "#/definitions/SkypeResponseGroupPromptDto"
          },
          "Question": {
            "$ref": "#/definitions/SkypeResponseGroupQuestionDto"
          },
          "QueueName": {
            "type": "string"
          },
          "QueueIdentity": {
            "type": "string"
          },
          "SipUri": {
            "type": "string"
          }
        }
      },
      "SkypeResponseGroupPromptDto": {
        "type": "object",
        "properties": {
          "TextToSpeechPrompt": {
            "type": "string"
          },
          "AudioFilePath": {
            "type": "string"
          }
        }
      },
      "SkypeResponseGroupQuestionDto": {
        "type": "object",
        "properties": {
          "Prompt": {
            "$ref": "#/definitions/SkypeResponseGroupPromptDto"
          },
          "AnswerList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SkypeResponseGroupAnswerDto"
            }
          },
          "InvalidAnswerPrompt": {
            "$ref": "#/definitions/SkypeResponseGroupPromptDto"
          },
          "NoAnswerPrompt": {
            "$ref": "#/definitions/SkypeResponseGroupPromptDto"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "SkypeResponseGroupAnswerDto": {
        "type": "object",
        "properties": {
          "Action": {
            "$ref": "#/definitions/SkypeResponseGroupCallActionDto"
          },
          "DigitResponse": {
            "type": "string"
          },
          "VoiceResponseList": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "VirtualMachinesDto": {
        "type": "object",
        "properties": {
          "VirtualMachines": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VirtualMachineDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "VirtualMachineDto:List": {
        "required": [
          "DisplayName",
          "OsAdminPassword"
        ],
        "type": "object",
        "properties": {
          "IpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VMIPAddressDto"
            }
          },
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OsTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "OsTemplate": {
            "type": "string"
          },
          "OsAdminName": {
            "type": "string"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "HardDriveSize": {
            "format": "int32",
            "type": "integer"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualMachineGuid": {
            "type": "string"
          },
          "NumberOfSnapshots": {
            "format": "int32",
            "type": "integer"
          },
          "PublicVLanId": {
            "format": "int32",
            "type": "integer"
          },
          "PrivateVLanId": {
            "format": "int32",
            "type": "integer"
          },
          "VmStatus": {
            "type": "string"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "PublicNetwork": {
            "$ref": "#/definitions/VirtualNetworkDto"
          },
          "PrivateNetwork": {
            "$ref": "#/definitions/VirtualNetworkDto"
          },
          "ManagementNetwork": {
            "$ref": "#/definitions/VirtualNetworkDto"
          },
          "AdminPassword": {
            "type": "string"
          },
          "VHDSize": {
            "format": "int32",
            "type": "integer"
          },
          "Platform": {
            "type": "string"
          },
          "ErrorReason": {
            "type": "string"
          },
          "ExternalSwitchId": {
            "type": "string"
          },
          "InternalSwithcId": {
            "type": "string"
          },
          "PublicIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "PrivateIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "State": {
            "format": "int32",
            "enum": [
              0,
              2,
              3,
              6,
              10,
              32768,
              32769,
              32770,
              32771,
              32772,
              32773,
              32774,
              32775,
              32776
            ],
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "IsWindows": {
            "type": "boolean"
          },
          "PlatformName": {
            "type": "string"
          },
          "OnPremises": {
            "type": "boolean"
          }
        }
      },
      "VirtualMachineDto": {
        "required": [
          "DisplayName",
          "OsAdminPassword"
        ],
        "type": "object",
        "properties": {
          "IpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VMIPAddressDto"
            }
          },
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OsTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "OsTemplate": {
            "type": "string"
          },
          "OsAdminName": {
            "type": "string"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "HardDriveSize": {
            "format": "int32",
            "type": "integer"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualizationServer": {
            "$ref": "#/definitions/VirtualizationServerDto"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualMachineGuid": {
            "type": "string"
          },
          "VirtualizationServerName": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "NumberOfSnapshots": {
            "format": "int32",
            "type": "integer"
          },
          "PublicVLanId": {
            "format": "int32",
            "type": "integer"
          },
          "PrivateVLanId": {
            "format": "int32",
            "type": "integer"
          },
          "VmStatus": {
            "type": "string"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerName": {
            "type": "string"
          },
          "PublicNetwork": {
            "$ref": "#/definitions/VirtualNetworkDto"
          },
          "PrivateNetwork": {
            "$ref": "#/definitions/VirtualNetworkDto"
          },
          "ManagementNetwork": {
            "$ref": "#/definitions/VirtualNetworkDto"
          },
          "AdminPassword": {
            "type": "string"
          },
          "VHDSize": {
            "format": "int32",
            "type": "integer"
          },
          "Platform": {
            "type": "string"
          },
          "ErrorReason": {
            "type": "string"
          },
          "ExternalSwitchId": {
            "type": "string"
          },
          "InternalSwithcId": {
            "type": "string"
          },
          "PublicIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "PrivateIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "State": {
            "format": "int32",
            "enum": [
              0,
              2,
              3,
              6,
              10,
              32768,
              32769,
              32770,
              32771,
              32772,
              32773,
              32774,
              32775,
              32776
            ],
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "IsWindows": {
            "type": "boolean"
          },
          "PlatformName": {
            "type": "string"
          },
          "ExpandRequired": {
            "type": "boolean"
          },
          "OnPremises": {
            "type": "boolean"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "VMIPAddressDto": {
        "type": "object",
        "properties": {
          "IsPublicIP": {
            "type": "boolean"
          },
          "IpAddress": {
            "type": "string"
          },
          "Subnet": {
            "type": "string"
          },
          "GateWay": {
            "type": "string"
          },
          "PreferredDnsServer": {
            "type": "string"
          },
          "AlternatedDnsServer": {
            "type": "string"
          },
          "Family": {
            "type": "string"
          }
        }
      },
      "VirtualizationServerDto": {
        "type": "object",
        "properties": {
          "ServerIp": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "ServerAddress": {
            "type": "string"
          },
          "Domain": {
            "type": "string"
          },
          "AuthUser": {
            "type": "string"
          },
          "AuthPass": {
            "type": "string"
          },
          "Version": {
            "format": "int32",
            "type": "integer"
          },
          "APIUrl": {
            "type": "string"
          },
          "HostName": {
            "type": "string"
          },
          "DataCenter": {
            "type": "string"
          }
        }
      },
      "VirtualNetworkDto": {
        "type": "object",
        "properties": {
          "IPAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VMIPAddressDto"
            }
          },
          "DNSServers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Enabled": {
            "type": "boolean"
          },
          "IsLegacyNetwork": {
            "type": "boolean"
          },
          "SwitchID": {
            "type": "string"
          }
        }
      },
      "IpAddressDto:List": {
        "required": [
          "IpAddress",
          "SubnetMask",
          "Gateway"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerName": {
            "type": "string"
          },
          "ServerIP": {
            "type": "string"
          },
          "IpAddressId": {
            "format": "int32",
            "type": "integer"
          },
          "IpAddress": {
            "type": "string"
          },
          "IpType": {
            "type": "string"
          },
          "IpTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "SubnetMask": {
            "type": "string"
          },
          "Gateway": {
            "type": "string"
          },
          "PreferredDns": {
            "type": "string"
          },
          "AlternateDns": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "Pool": {
            "type": "string"
          },
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualMachineName": {
            "type": "string"
          }
        }
      },
      "IpAddressDto": {
        "required": [
          "IpAddress",
          "SubnetMask",
          "Gateway"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerName": {
            "type": "string"
          },
          "ServerIP": {
            "type": "string"
          },
          "IpAddressId": {
            "format": "int32",
            "type": "integer"
          },
          "IpAddress": {
            "type": "string"
          },
          "IpType": {
            "type": "string"
          },
          "IpTypeId": {
            "format": "int32",
            "type": "integer"
          },
          "SubnetMask": {
            "type": "string"
          },
          "Gateway": {
            "type": "string"
          },
          "PreferredDns": {
            "type": "string"
          },
          "AlternateDns": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "Pool": {
            "type": "string"
          },
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "Limit": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualMachineName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AddVmDto": {
        "required": [
          "DisplayName",
          "OsAdminPassword",
          "ProviderId",
          "ResourceComponentPropId"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "HardDriveSize": {
            "format": "int32",
            "type": "integer"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "KeyPairName": {
            "type": "string"
          },
          "PublicNetworkEnabled": {
            "type": "boolean"
          },
          "PrivateNetworkEnabled": {
            "type": "boolean"
          },
          "OsTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "OsAdminName": {
            "type": "string"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AddVmDto:Request": {
        "required": [
          "DisplayName",
          "OsAdminPassword",
          "ProviderId",
          "ResourceComponentPropId"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "HardDriveSize": {
            "format": "int32",
            "type": "integer"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "KeyPairName": {
            "type": "string"
          },
          "PublicNetworkEnabled": {
            "type": "boolean"
          },
          "PrivateNetworkEnabled": {
            "type": "boolean"
          },
          "OsTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "OsAdminName": {
            "type": "string"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UpdateVmDto": {
        "required": [
          "DisplayName",
          "OsAdminPassword",
          "ProviderId",
          "ResourceComponentPropId"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "HardDriveSize": {
            "format": "int32",
            "type": "integer"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "KeyPairName": {
            "type": "string"
          },
          "PublicNetworkEnabled": {
            "type": "boolean"
          },
          "PrivateNetworkEnabled": {
            "type": "boolean"
          },
          "OsTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "OsAdminName": {
            "type": "string"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "UpdateVmDto:Request": {
        "required": [
          "DisplayName",
          "OsAdminPassword",
          "ProviderId",
          "ResourceComponentPropId"
        ],
        "type": "object",
        "properties": {
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "HardDriveSize": {
            "format": "int32",
            "type": "integer"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "KeyPairName": {
            "type": "string"
          },
          "PublicNetworkEnabled": {
            "type": "boolean"
          },
          "PrivateNetworkEnabled": {
            "type": "boolean"
          },
          "OsTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "OsAdminName": {
            "type": "string"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "VmAddUpdateResultDto": {
        "type": "object",
        "properties": {
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "ViolationResourcesReport": {
            "$ref": "#/definitions/ResourceQtyViolationReportDto:List"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResourceQtyViolationReportDto:List": {
        "type": "object",
        "properties": {
          "ViolatedResources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceQtyViolationDto"
            }
          }
        }
      },
      "ResourceQtyViolationReportDto": {
        "type": "object",
        "properties": {
          "ViolatedResources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceQtyViolationDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ResourceQtyViolationDto": {
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceDisplayName": {
            "type": "string"
          },
          "DesiredQty": {
            "format": "int32",
            "type": "integer"
          },
          "AllocatedQty": {
            "format": "int32",
            "type": "integer"
          },
          "SoldQty": {
            "format": "int32",
            "type": "integer"
          },
          "UsedQty": {
            "format": "int32",
            "type": "integer"
          },
          "RemainingQty": {
            "format": "int32",
            "type": "integer"
          },
          "SubResources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubResourceQtyViolationDto"
            }
          },
          "AffactedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceQtyViolationAffacteesDto"
            }
          }
        }
      },
      "SubResourceQtyViolationDto": {
        "type": "object",
        "properties": {
          "ResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceDisplayName": {
            "type": "string"
          },
          "DesiredQty": {
            "format": "int32",
            "type": "integer"
          },
          "AllocatedQty": {
            "format": "int32",
            "type": "integer"
          },
          "SoldQty": {
            "format": "int32",
            "type": "integer"
          },
          "UsedQty": {
            "format": "int32",
            "type": "integer"
          },
          "RemainingQty": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ResourceQtyViolationAffacteesDto": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "DesiredQty": {
            "format": "int32",
            "type": "integer"
          },
          "AllocatedQty": {
            "format": "int32",
            "type": "integer"
          },
          "SoldQty": {
            "format": "int32",
            "type": "integer"
          },
          "UsedQty": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UpdateVLanDto": {
        "type": "object",
        "properties": {
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "PublicVLanId": {
            "format": "int32",
            "type": "integer"
          },
          "PrivateVLanId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UpdateVLanDto:Request": {
        "type": "object",
        "properties": {
          "PublicVLanId": {
            "format": "int32",
            "type": "integer"
          },
          "PrivateVLanId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SystemVirtualMachinesDto": {
        "type": "object",
        "properties": {
          "VirtualMachines": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VirtualMachineSettingsDto"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "VirtualMachineSettingsDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "VHDPath": {
            "type": "string"
          },
          "VHDSize": {
            "format": "int32",
            "type": "integer"
          },
          "UpTime": {
            "format": "int64",
            "type": "integer"
          },
          "State": {
            "format": "int32",
            "enum": [
              0,
              2,
              3,
              6,
              10,
              32768,
              32769,
              32770,
              32771,
              32772,
              32773,
              32774,
              32775,
              32776
            ],
            "type": "integer"
          }
        }
      },
      "VmIpAddressesDto": {
        "type": "object",
        "properties": {
          "PublicIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "PrivateIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "AssignVmIpAddressesDto": {
        "type": "object",
        "properties": {
          "NoOfPublicIpAddresses": {
            "format": "int32",
            "type": "integer"
          },
          "NoOfPrivateIpAddresses": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SnapShotsDto": {
        "type": "object",
        "properties": {
          "SnapShotList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SnapShotDetailDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "SnapShotDetailDto:List": {
        "type": "object",
        "properties": {
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "SnapShotGUId": {
            "type": "string"
          },
          "SnapShotId": {
            "format": "int32",
            "type": "integer"
          },
          "SnapShotName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "VirtualMachineName": {
            "type": "string"
          },
          "Dated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "SnapShotDetailDto:Request": {
        "type": "object",
        "properties": {
          "SnapShotName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "SnapShotDetailDto:ApplyRequest": {
        "type": "object",
        "properties": {
          "SnapShotGUId": {
            "type": "string"
          },
          "SnapShotId": {
            "format": "int32",
            "type": "integer"
          },
          "SnapShotName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Dated": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "SnapShotDetailDto": {
        "type": "object",
        "properties": {
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "SnapShotGUId": {
            "type": "string"
          },
          "SnapShotId": {
            "format": "int32",
            "type": "integer"
          },
          "SnapShotName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "VirtualMachineName": {
            "type": "string"
          },
          "Dated": {
            "format": "date-time",
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ChangeVmPasswordDto": {
        "type": "object",
        "properties": {
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "OsAdminName": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ChangeVmPasswordDto:Request": {
        "type": "object",
        "properties": {
          "OsAdminPassword": {
            "type": "string"
          },
          "OsAdminName": {
            "type": "string"
          }
        }
      },
      "ImportVmDto": {
        "required": [
          "DisplayName",
          "OsAdminPassword",
          "ProviderId",
          "ResourceComponentPropId"
        ],
        "type": "object",
        "properties": {
          "VirtualMachineGuid": {
            "type": "string"
          },
          "VmStatus": {
            "type": "string"
          },
          "PublicIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "PrivateIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "HardDriveSize": {
            "format": "int32",
            "type": "integer"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "KeyPairName": {
            "type": "string"
          },
          "PublicNetworkEnabled": {
            "type": "boolean"
          },
          "PrivateNetworkEnabled": {
            "type": "boolean"
          },
          "OsTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "OsAdminName": {
            "type": "string"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "ImportVmDto:Request": {
        "required": [
          "DisplayName",
          "OsAdminPassword",
          "ProviderId",
          "ResourceComponentPropId"
        ],
        "type": "object",
        "properties": {
          "VirtualMachineGuid": {
            "type": "string"
          },
          "VmStatus": {
            "type": "string"
          },
          "PublicIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "PrivateIpAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpAddressDto:List"
            }
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "CResourceId": {
            "format": "int32",
            "type": "integer"
          },
          "VirtualMachineId": {
            "format": "int32",
            "type": "integer"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "HardDriveSize": {
            "format": "int32",
            "type": "integer"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "KeyPairName": {
            "type": "string"
          },
          "PublicNetworkEnabled": {
            "type": "boolean"
          },
          "PrivateNetworkEnabled": {
            "type": "boolean"
          },
          "OsTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "OsAdminName": {
            "type": "string"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "TransferVmDto": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "format": "int32",
            "type": "integer"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "OwnerName": {
            "type": "string"
          },
          "OsTemplate": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "CpuCores": {
            "format": "int32",
            "type": "integer"
          },
          "RamSize": {
            "format": "int32",
            "type": "integer"
          },
          "HardDriveSize": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "VirtualMachineStatusDto": {
        "type": "object",
        "properties": {
          "VirtualMachineStatus": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "FetchMachinePasswordDto": {
        "type": "object",
        "properties": {
          "MachineId": {
            "format": "int32",
            "type": "integer"
          },
          "Password": {
            "type": "string"
          },
          "FileContents": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "FetchMachinePasswordDto:Request": {
        "type": "object",
        "properties": {
          "MachineId": {
            "format": "int32",
            "type": "integer"
          },
          "Password": {
            "type": "string"
          },
          "FileContents": {
            "type": "string"
          }
        }
      },
      "VmOsTemplatesDto": {
        "type": "object",
        "properties": {
          "OsTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VmOsTemplateDto:List"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "VmOsTemplateDto:List": {
        "required": [
          "DisplayName",
          "AdminName"
        ],
        "type": "object",
        "properties": {
          "OsTemplateId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "BaseOsType": {
            "type": "string"
          },
          "BaseOsSystemName": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "VhdPath": {
            "type": "string"
          },
          "OsAdminPassword": {
            "type": "string"
          },
          "ServerRoleId": {
            "format": "int32",
            "type": "integer"
          },
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          },
          "IaasRefId": {
            "type": "string"
          },
          "TemplateProperties": {
            "$ref": "#/definitions/Object"
          },
          "ServerId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderName": {
            "type": "string"
          },
          "UsageCount": {
            "type": "string"
          },
          "IsWindows": {
            "type": "boolean"
          },
          "TemplateSize": {
            "format": "int32",
            "type": "integer"
          },
          "GenerationType": {
            "format": "int32",
            "type": "integer"
          },
          "IaasOSTempConfig": {
            "$ref": "#/definitions/IaasConfigsDto"
          },
          "AdminName": {
            "type": "string"
          },
          "PublicNetworkName": {
            "type": "string"
          },
          "PrivateNetworkName": {
            "type": "string"
          },
          "RepositoryId": {
            "format": "int32",
            "type": "integer"
          },
          "ProviderId": {
            "format": "int32",
            "type": "integer"
          },
          "Cache": {
            "type": "boolean"
          },
          "RepositoryDisplayName": {
            "type": "string"
          }
        }
      },
      "BaseOsTypesDto": {
        "type": "object",
        "properties": {
          "BaseOsTypes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BaseOsTypeDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      },
      "BaseOsTypeDto": {
        "type": "object",
        "properties": {
          "ResourceComponentPropId": {
            "format": "int32",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "IsWindows": {
            "type": "boolean"
          },
          "IsActive": {
            "type": "boolean"
          },
          "DetailValue": {
            "type": "string"
          }
        }
      },
      "VLANDto": {
        "type": "object",
        "properties": {
          "VLANId": {
            "format": "int32",
            "type": "integer"
          },
          "NetworkId": {
            "type": "string"
          },
          "AddedBy": {
            "format": "int32",
            "type": "integer"
          },
          "VLANName": {
            "type": "string"
          },
          "VLANType": {
            "type": "string"
          }
        }
      },
      "VLANsDto": {
        "type": "object",
        "properties": {
          "VLANList": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VLANDto"
            }
          },
          "TotalRecords": {
            "format": "int32",
            "type": "integer"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ErrorDesc": {
            "type": "string"
          }
        }
      }
    }
  }
  